/*
SPDX-FileCopyrightText: 2022-present Open Networking Foundation <info@opennetworking.org>

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package atomix.multiraft.set.v1;

import "atomix/multiraft/set/v1/fsm.proto";
import "atomix/multiraft/v1/descriptor.proto";
import "atomix/multiraft/v1/headers.proto";
import "gogoproto/gogo.proto";

// Set is a service for a set primitive
service Set {
    // Size gets the number of elements in the set
    rpc Size (SizeRequest) returns (SizeResponse) {
        option (atomix.multiraft.v1.operation_type) = QUERY;
    }

    // Contains returns whether the set contains a value
    rpc Contains (ContainsRequest) returns (ContainsResponse) {
        option (atomix.multiraft.v1.operation_type) = QUERY;
    }

    // Add adds a value to the set
    rpc Add (AddRequest) returns (AddResponse) {
        option (atomix.multiraft.v1.operation_type) = COMMAND;
    }

    // Remove removes a value from the set
    rpc Remove (RemoveRequest) returns (RemoveResponse) {
        option (atomix.multiraft.v1.operation_type) = COMMAND;
    }

    // Clear removes all values from the set
    rpc Clear (ClearRequest) returns (ClearResponse) {
        option (atomix.multiraft.v1.operation_type) = COMMAND;
    }

    // Events listens for set change events
    rpc Events (EventsRequest) returns (stream EventsResponse) {
        option (atomix.multiraft.v1.operation_type) = COMMAND;
    }

    // Elements lists all elements in the set
    rpc Elements (ElementsRequest) returns (stream ElementsResponse) {
        option (atomix.multiraft.v1.operation_type) = QUERY;
    }
}

message SizeRequest {
    atomix.multiraft.v1.QueryRequestHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    SizeInput input = 2 [
        (atomix.multiraft.v1.input) = true,
        (gogoproto.embed) = true
    ];
}

message SizeResponse {
    atomix.multiraft.v1.QueryResponseHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    SizeOutput output = 2 [
        (atomix.multiraft.v1.output) = true,
        (gogoproto.embed) = true
    ];
}

message ContainsRequest {
    atomix.multiraft.v1.QueryRequestHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    ContainsInput input = 2 [
        (atomix.multiraft.v1.input) = true,
        (gogoproto.embed) = true
    ];
}

message ContainsResponse {
    atomix.multiraft.v1.QueryResponseHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    ContainsOutput output = 2 [
        (atomix.multiraft.v1.output) = true,
        (gogoproto.embed) = true
    ];
}

message AddRequest {
    atomix.multiraft.v1.CommandRequestHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    AddInput input = 2 [
        (atomix.multiraft.v1.input) = true,
        (gogoproto.embed) = true
    ];
}

message AddResponse {
    atomix.multiraft.v1.CommandResponseHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    AddOutput output = 2 [
        (atomix.multiraft.v1.output) = true,
        (gogoproto.embed) = true
    ];
}

message RemoveRequest {
    atomix.multiraft.v1.CommandRequestHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    RemoveInput input = 2 [
        (atomix.multiraft.v1.input) = true,
        (gogoproto.embed) = true
    ];
}

message RemoveResponse {
    atomix.multiraft.v1.CommandResponseHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    RemoveOutput output = 2 [
        (atomix.multiraft.v1.output) = true,
        (gogoproto.embed) = true
    ];
}

message ClearRequest {
    atomix.multiraft.v1.CommandRequestHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    ClearInput input = 2 [
        (atomix.multiraft.v1.input) = true,
        (gogoproto.embed) = true
    ];
}

message ClearResponse {
    atomix.multiraft.v1.CommandResponseHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    ClearOutput output = 2 [
        (atomix.multiraft.v1.output) = true,
        (gogoproto.embed) = true
    ];
}

message EventsRequest {
    atomix.multiraft.v1.CommandRequestHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    EventsInput input = 2 [
        (atomix.multiraft.v1.input) = true,
        (gogoproto.embed) = true
    ];
}

message EventsResponse {
    atomix.multiraft.v1.CommandResponseHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    EventsOutput output = 2 [
        (atomix.multiraft.v1.output) = true,
        (gogoproto.embed) = true
    ];
}

message ElementsRequest {
    atomix.multiraft.v1.QueryRequestHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    ElementsInput input = 2 [
        (atomix.multiraft.v1.input) = true,
        (gogoproto.embed) = true
    ];
}

message ElementsResponse {
    atomix.multiraft.v1.QueryResponseHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    ElementsOutput output = 2 [
        (atomix.multiraft.v1.output) = true,
        (gogoproto.embed) = true
    ];
}
