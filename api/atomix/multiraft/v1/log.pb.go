// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/multiraft/v1/log.proto

package v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RaftLogEntry struct {
	StreamID StreamId     `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id"`
	Command  CommandInput `protobuf:"bytes,2,opt,name=command,proto3" json:"command"`
}

func (m *RaftLogEntry) Reset()         { *m = RaftLogEntry{} }
func (m *RaftLogEntry) String() string { return proto.CompactTextString(m) }
func (*RaftLogEntry) ProtoMessage()    {}
func (*RaftLogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_528e784dcbf1fd03, []int{0}
}
func (m *RaftLogEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftLogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftLogEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RaftLogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftLogEntry.Merge(m, src)
}
func (m *RaftLogEntry) XXX_Size() int {
	return m.Size()
}
func (m *RaftLogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftLogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_RaftLogEntry proto.InternalMessageInfo

func (m *RaftLogEntry) GetStreamID() StreamId {
	if m != nil {
		return m.StreamID
	}
	return StreamId{}
}

func (m *RaftLogEntry) GetCommand() CommandInput {
	if m != nil {
		return m.Command
	}
	return CommandInput{}
}

type StreamId struct {
	Term        Term        `protobuf:"varint,1,opt,name=term,proto3,casttype=Term" json:"term,omitempty"`
	SequenceNum SequenceNum `protobuf:"varint,2,opt,name=sequence_num,json=sequenceNum,proto3,casttype=SequenceNum" json:"sequence_num,omitempty"`
}

func (m *StreamId) Reset()         { *m = StreamId{} }
func (m *StreamId) String() string { return proto.CompactTextString(m) }
func (*StreamId) ProtoMessage()    {}
func (*StreamId) Descriptor() ([]byte, []int) {
	return fileDescriptor_528e784dcbf1fd03, []int{1}
}
func (m *StreamId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamId.Merge(m, src)
}
func (m *StreamId) XXX_Size() int {
	return m.Size()
}
func (m *StreamId) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamId.DiscardUnknown(m)
}

var xxx_messageInfo_StreamId proto.InternalMessageInfo

func (m *StreamId) GetTerm() Term {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *StreamId) GetSequenceNum() SequenceNum {
	if m != nil {
		return m.SequenceNum
	}
	return 0
}

func init() {
	proto.RegisterType((*RaftLogEntry)(nil), "atomix.multiraft.v1.RaftLogEntry")
	proto.RegisterType((*StreamId)(nil), "atomix.multiraft.v1.StreamId")
}

func init() { proto.RegisterFile("atomix/multiraft/v1/log.proto", fileDescriptor_528e784dcbf1fd03) }

var fileDescriptor_528e784dcbf1fd03 = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4d, 0x2c, 0xc9, 0xcf,
	0xcd, 0xac, 0xd0, 0xcf, 0x2d, 0xcd, 0x29, 0xc9, 0x2c, 0x4a, 0x4c, 0x2b, 0xd1, 0x2f, 0x33, 0xd4,
	0xcf, 0xc9, 0x4f, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x86, 0x48, 0xeb, 0xc1, 0xa5,
	0xf5, 0xca, 0x0c, 0xa5, 0xb0, 0xea, 0x49, 0x2b, 0xce, 0x85, 0xe8, 0x91, 0x12, 0x49, 0xcf, 0x4f,
	0xcf, 0x07, 0x33, 0xf5, 0x41, 0x2c, 0x88, 0xa8, 0xd2, 0x7c, 0x46, 0x2e, 0x9e, 0xa0, 0xc4, 0xb4,
	0x12, 0x9f, 0xfc, 0x74, 0xd7, 0xbc, 0x92, 0xa2, 0x4a, 0x21, 0x1f, 0x2e, 0xce, 0xe2, 0x92, 0xa2,
	0xd4, 0xc4, 0xdc, 0xf8, 0xcc, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x59, 0x3d, 0x2c,
	0xd6, 0xe9, 0x05, 0x83, 0x55, 0x79, 0xa6, 0x38, 0x09, 0x9c, 0xb8, 0x27, 0xcf, 0xf0, 0xe8, 0x9e,
	0x3c, 0x07, 0x54, 0xc4, 0x25, 0x88, 0xa3, 0x18, 0x2a, 0x27, 0xe4, 0xc8, 0xc5, 0x9e, 0x9c, 0x9f,
	0x9b, 0x9b, 0x98, 0x97, 0x22, 0xc1, 0x04, 0x36, 0x4b, 0x11, 0xab, 0x59, 0xce, 0x10, 0x35, 0x9e,
	0x79, 0x05, 0xa5, 0x25, 0x4e, 0x2c, 0x20, 0xf3, 0x82, 0x60, 0xfa, 0x94, 0x62, 0xb8, 0x60, 0x06,
	0xa7, 0x08, 0xc9, 0x70, 0xb1, 0x94, 0xa4, 0x16, 0xe5, 0x82, 0xdd, 0xc5, 0xe2, 0xc4, 0xf1, 0xeb,
	0x9e, 0x3c, 0x4b, 0x48, 0x6a, 0x51, 0x6e, 0x10, 0x58, 0x54, 0xc8, 0x88, 0x8b, 0xa7, 0x38, 0xb5,
	0xb0, 0x34, 0x35, 0x2f, 0x39, 0x35, 0x3e, 0xaf, 0x34, 0x17, 0x6c, 0x23, 0x8b, 0x13, 0xff, 0xaf,
	0x7b, 0xf2, 0xdc, 0xc1, 0x50, 0x71, 0xbf, 0xd2, 0xdc, 0x20, 0xee, 0x62, 0x04, 0xc7, 0x49, 0xe2,
	0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e,
	0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0x92, 0xd8, 0xc0, 0x01, 0x64, 0x0c, 0x08,
	0x00, 0x00, 0xff, 0xff, 0x91, 0xe0, 0x16, 0x2c, 0x8b, 0x01, 0x00, 0x00,
}

func (m *RaftLogEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftLogEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftLogEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Command.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLog(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.StreamID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLog(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StreamId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SequenceNum != 0 {
		i = encodeVarintLog(dAtA, i, uint64(m.SequenceNum))
		i--
		dAtA[i] = 0x10
	}
	if m.Term != 0 {
		i = encodeVarintLog(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLog(dAtA []byte, offset int, v uint64) int {
	offset -= sovLog(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RaftLogEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StreamID.Size()
	n += 1 + l + sovLog(uint64(l))
	l = m.Command.Size()
	n += 1 + l + sovLog(uint64(l))
	return n
}

func (m *StreamId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Term != 0 {
		n += 1 + sovLog(uint64(m.Term))
	}
	if m.SequenceNum != 0 {
		n += 1 + sovLog(uint64(m.SequenceNum))
	}
	return n
}

func sovLog(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLog(x uint64) (n int) {
	return sovLog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RaftLogEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftLogEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftLogEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StreamID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Command.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= Term(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNum", wireType)
			}
			m.SequenceNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNum |= SequenceNum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLog(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLog
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLog
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLog
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLog
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLog        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLog          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLog = fmt.Errorf("proto: unexpected end of group")
)
