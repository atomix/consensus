/*
SPDX-FileCopyrightText: 2022-present Open Networking Foundation <info@opennetworking.org>

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package atomix.multiraft.indexedmap.v1;

import "atomix/multiraft/indexedmap/v1/fsm.proto";
import "atomix/multiraft/v1/descriptor.proto";
import "atomix/multiraft/v1/headers.proto";
import "gogoproto/gogo.proto";

// IndexedMap is a service for an indexed map primitive
service IndexedMap {
    // Size returns the size of the map
    rpc Size (SizeRequest) returns (SizeResponse) {
        option (atomix.multiraft.v1.operation_type) = QUERY;
    }

    // Append appends an entry to the map
    rpc Append (AppendRequest) returns (AppendResponse) {
        option (atomix.multiraft.v1.operation_type) = COMMAND;
    }

    // Update updates an entry in the map
    rpc Update (UpdateRequest) returns (UpdateResponse) {
        option (atomix.multiraft.v1.operation_type) = COMMAND;
    }

    // Remove removes an entry from the map
    rpc Remove (RemoveRequest) returns (RemoveResponse) {
        option (atomix.multiraft.v1.operation_type) = COMMAND;
    }

    // Get gets the entry for a key
    rpc Get (GetRequest) returns (GetResponse) {
        option (atomix.multiraft.v1.operation_type) = QUERY;
    }

    // FirstEntry gets the first entry in the map
    rpc FirstEntry (FirstEntryRequest) returns (FirstEntryResponse) {
        option (atomix.multiraft.v1.operation_type) = QUERY;
    }

    // LastEntry gets the last entry in the map
    rpc LastEntry (LastEntryRequest) returns (LastEntryResponse) {
        option (atomix.multiraft.v1.operation_type) = QUERY;
    }

    // PrevEntry gets the previous entry in the map
    rpc PrevEntry (PrevEntryRequest) returns (PrevEntryResponse) {
        option (atomix.multiraft.v1.operation_type) = QUERY;
    }

    // NextEntry gets the next entry in the map
    rpc NextEntry (NextEntryRequest) returns (NextEntryResponse) {
        option (atomix.multiraft.v1.operation_type) = QUERY;
    }

    // Clear removes all entries from the map
    rpc Clear (ClearRequest) returns (ClearResponse) {
        option (atomix.multiraft.v1.operation_type) = COMMAND;
    }

    // Events listens for change events
    rpc Events (EventsRequest) returns (stream EventsResponse) {
        option (atomix.multiraft.v1.operation_type) = COMMAND;
    }

    // Entries lists all entries in the map
    rpc Entries (EntriesRequest) returns (stream EntriesResponse) {
        option (atomix.multiraft.v1.operation_type) = QUERY;
    }
}

message SizeRequest {
    atomix.multiraft.v1.QueryRequestHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    SizeInput input = 2 [
        (atomix.multiraft.v1.input) = true,
        (gogoproto.embed) = true
    ];
}

message SizeResponse {
    atomix.multiraft.v1.QueryResponseHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    SizeOutput output = 2 [
        (atomix.multiraft.v1.output) = true,
        (gogoproto.embed) = true
    ];
}

message AppendRequest {
    atomix.multiraft.v1.CommandRequestHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    AppendInput input = 2 [
        (atomix.multiraft.v1.input) = true,
        (gogoproto.embed) = true
    ];
}

message AppendResponse {
    atomix.multiraft.v1.CommandResponseHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    AppendOutput output = 2 [
        (atomix.multiraft.v1.output) = true,
        (gogoproto.embed) = true
    ];
}

message UpdateRequest {
    atomix.multiraft.v1.CommandRequestHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    UpdateInput input = 2 [
        (atomix.multiraft.v1.input) = true,
        (gogoproto.embed) = true
    ];
}

message UpdateResponse {
    atomix.multiraft.v1.CommandResponseHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    UpdateOutput output = 2 [
        (atomix.multiraft.v1.output) = true,
        (gogoproto.embed) = true
    ];
}

message GetRequest {
    atomix.multiraft.v1.QueryRequestHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    GetInput input = 2 [
        (atomix.multiraft.v1.input) = true,
        (gogoproto.embed) = true
    ];
}

message GetResponse {
    atomix.multiraft.v1.QueryResponseHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    GetOutput output = 2 [
        (atomix.multiraft.v1.output) = true,
        (gogoproto.embed) = true
    ];
}

message FirstEntryRequest {
    atomix.multiraft.v1.QueryRequestHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    FirstEntryInput input = 2 [
        (atomix.multiraft.v1.input) = true,
        (gogoproto.embed) = true
    ];
}

message FirstEntryResponse {
    atomix.multiraft.v1.QueryResponseHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    FirstEntryOutput output = 2 [
        (atomix.multiraft.v1.output) = true,
        (gogoproto.embed) = true
    ];
}

message LastEntryRequest {
    atomix.multiraft.v1.QueryRequestHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    LastEntryInput input = 2 [
        (atomix.multiraft.v1.input) = true,
        (gogoproto.embed) = true
    ];
}

message LastEntryResponse {
    atomix.multiraft.v1.QueryResponseHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    LastEntryOutput output = 2 [
        (atomix.multiraft.v1.output) = true,
        (gogoproto.embed) = true
    ];
}

message PrevEntryRequest {
    atomix.multiraft.v1.QueryRequestHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    PrevEntryInput input = 2 [
        (atomix.multiraft.v1.input) = true,
        (gogoproto.embed) = true
    ];
}

message PrevEntryResponse {
    atomix.multiraft.v1.QueryResponseHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    PrevEntryOutput output = 2 [
        (atomix.multiraft.v1.output) = true,
        (gogoproto.embed) = true
    ];
}

message NextEntryRequest {
    atomix.multiraft.v1.QueryRequestHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    NextEntryInput input = 2 [
        (atomix.multiraft.v1.input) = true,
        (gogoproto.embed) = true
    ];
}

message NextEntryResponse {
    atomix.multiraft.v1.QueryResponseHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    NextEntryOutput output = 2 [
        (atomix.multiraft.v1.output) = true,
        (gogoproto.embed) = true
    ];
}

message RemoveRequest {
    atomix.multiraft.v1.CommandRequestHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    RemoveInput input = 2 [
        (atomix.multiraft.v1.input) = true,
        (gogoproto.embed) = true
    ];
}

message RemoveResponse {
    atomix.multiraft.v1.CommandResponseHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    RemoveOutput output = 2 [
        (atomix.multiraft.v1.output) = true,
        (gogoproto.embed) = true
    ];
}

message ClearRequest {
    atomix.multiraft.v1.CommandRequestHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    ClearInput input = 2 [
        (atomix.multiraft.v1.input) = true,
        (gogoproto.embed) = true
    ];
}

message ClearResponse {
    atomix.multiraft.v1.CommandResponseHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    ClearOutput output = 2 [
        (atomix.multiraft.v1.output) = true,
        (gogoproto.embed) = true
    ];
}

message EntriesRequest {
    atomix.multiraft.v1.QueryRequestHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    EntriesInput input = 2 [
        (atomix.multiraft.v1.input) = true,
        (gogoproto.embed) = true
    ];
}

message EntriesResponse {
    atomix.multiraft.v1.QueryResponseHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    EntriesOutput output = 2 [
        (atomix.multiraft.v1.output) = true,
        (gogoproto.embed) = true
    ];
}

message EventsRequest {
    atomix.multiraft.v1.CommandRequestHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    EventsInput input = 2 [
        (atomix.multiraft.v1.input) = true,
        (gogoproto.embed) = true
    ];
}

message EventsResponse {
    atomix.multiraft.v1.CommandResponseHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    EventsOutput output = 2 [
        (atomix.multiraft.v1.output) = true,
        (gogoproto.embed) = true
    ];
}
