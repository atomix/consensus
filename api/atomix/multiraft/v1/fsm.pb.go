// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/multiraft/v1/fsm.proto

package v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PartitionInput struct {
	// Types that are valid to be assigned to Payload:
	//	*PartitionInput_OpenSession
	//	*PartitionInput_KeepAlive
	//	*PartitionInput_CloseSession
	//	*PartitionInput_SessionInput
	Payload isPartitionInput_Payload `protobuf_oneof:"payload"`
}

func (m *PartitionInput) Reset()         { *m = PartitionInput{} }
func (m *PartitionInput) String() string { return proto.CompactTextString(m) }
func (*PartitionInput) ProtoMessage()    {}
func (*PartitionInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ab16e7f9ceaca8f, []int{0}
}
func (m *PartitionInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartitionInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartitionInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionInput.Merge(m, src)
}
func (m *PartitionInput) XXX_Size() int {
	return m.Size()
}
func (m *PartitionInput) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionInput.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionInput proto.InternalMessageInfo

type isPartitionInput_Payload interface {
	isPartitionInput_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PartitionInput_OpenSession struct {
	OpenSession *OpenSessionInput `protobuf:"bytes,1,opt,name=open_session,json=openSession,proto3,oneof" json:"open_session,omitempty"`
}
type PartitionInput_KeepAlive struct {
	KeepAlive *KeepAliveInput `protobuf:"bytes,2,opt,name=keep_alive,json=keepAlive,proto3,oneof" json:"keep_alive,omitempty"`
}
type PartitionInput_CloseSession struct {
	CloseSession *CloseSessionInput `protobuf:"bytes,3,opt,name=close_session,json=closeSession,proto3,oneof" json:"close_session,omitempty"`
}
type PartitionInput_SessionInput struct {
	SessionInput *SessionInput `protobuf:"bytes,4,opt,name=session_input,json=sessionInput,proto3,oneof" json:"session_input,omitempty"`
}

func (*PartitionInput_OpenSession) isPartitionInput_Payload()  {}
func (*PartitionInput_KeepAlive) isPartitionInput_Payload()    {}
func (*PartitionInput_CloseSession) isPartitionInput_Payload() {}
func (*PartitionInput_SessionInput) isPartitionInput_Payload() {}

func (m *PartitionInput) GetPayload() isPartitionInput_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *PartitionInput) GetOpenSession() *OpenSessionInput {
	if x, ok := m.GetPayload().(*PartitionInput_OpenSession); ok {
		return x.OpenSession
	}
	return nil
}

func (m *PartitionInput) GetKeepAlive() *KeepAliveInput {
	if x, ok := m.GetPayload().(*PartitionInput_KeepAlive); ok {
		return x.KeepAlive
	}
	return nil
}

func (m *PartitionInput) GetCloseSession() *CloseSessionInput {
	if x, ok := m.GetPayload().(*PartitionInput_CloseSession); ok {
		return x.CloseSession
	}
	return nil
}

func (m *PartitionInput) GetSessionInput() *SessionInput {
	if x, ok := m.GetPayload().(*PartitionInput_SessionInput); ok {
		return x.SessionInput
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PartitionInput) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PartitionInput_OpenSession)(nil),
		(*PartitionInput_KeepAlive)(nil),
		(*PartitionInput_CloseSession)(nil),
		(*PartitionInput_SessionInput)(nil),
	}
}

type PartitionOutput struct {
	// Types that are valid to be assigned to Payload:
	//	*PartitionOutput_OpenSession
	//	*PartitionOutput_KeepAlive
	//	*PartitionOutput_CloseSession
	//	*PartitionOutput_SessionOutput
	Payload isPartitionOutput_Payload `protobuf_oneof:"payload"`
}

func (m *PartitionOutput) Reset()         { *m = PartitionOutput{} }
func (m *PartitionOutput) String() string { return proto.CompactTextString(m) }
func (*PartitionOutput) ProtoMessage()    {}
func (*PartitionOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ab16e7f9ceaca8f, []int{1}
}
func (m *PartitionOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartitionOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartitionOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionOutput.Merge(m, src)
}
func (m *PartitionOutput) XXX_Size() int {
	return m.Size()
}
func (m *PartitionOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionOutput.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionOutput proto.InternalMessageInfo

type isPartitionOutput_Payload interface {
	isPartitionOutput_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PartitionOutput_OpenSession struct {
	OpenSession *OpenSessionOutput `protobuf:"bytes,1,opt,name=open_session,json=openSession,proto3,oneof" json:"open_session,omitempty"`
}
type PartitionOutput_KeepAlive struct {
	KeepAlive *KeepAliveOutput `protobuf:"bytes,2,opt,name=keep_alive,json=keepAlive,proto3,oneof" json:"keep_alive,omitempty"`
}
type PartitionOutput_CloseSession struct {
	CloseSession *CloseSessionOutput `protobuf:"bytes,3,opt,name=close_session,json=closeSession,proto3,oneof" json:"close_session,omitempty"`
}
type PartitionOutput_SessionOutput struct {
	SessionOutput *SessionOutput `protobuf:"bytes,4,opt,name=session_output,json=sessionOutput,proto3,oneof" json:"session_output,omitempty"`
}

func (*PartitionOutput_OpenSession) isPartitionOutput_Payload()   {}
func (*PartitionOutput_KeepAlive) isPartitionOutput_Payload()     {}
func (*PartitionOutput_CloseSession) isPartitionOutput_Payload()  {}
func (*PartitionOutput_SessionOutput) isPartitionOutput_Payload() {}

func (m *PartitionOutput) GetPayload() isPartitionOutput_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *PartitionOutput) GetOpenSession() *OpenSessionOutput {
	if x, ok := m.GetPayload().(*PartitionOutput_OpenSession); ok {
		return x.OpenSession
	}
	return nil
}

func (m *PartitionOutput) GetKeepAlive() *KeepAliveOutput {
	if x, ok := m.GetPayload().(*PartitionOutput_KeepAlive); ok {
		return x.KeepAlive
	}
	return nil
}

func (m *PartitionOutput) GetCloseSession() *CloseSessionOutput {
	if x, ok := m.GetPayload().(*PartitionOutput_CloseSession); ok {
		return x.CloseSession
	}
	return nil
}

func (m *PartitionOutput) GetSessionOutput() *SessionOutput {
	if x, ok := m.GetPayload().(*PartitionOutput_SessionOutput); ok {
		return x.SessionOutput
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PartitionOutput) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PartitionOutput_OpenSession)(nil),
		(*PartitionOutput_KeepAlive)(nil),
		(*PartitionOutput_CloseSession)(nil),
		(*PartitionOutput_SessionOutput)(nil),
	}
}

type SessionInput struct {
	SessionID SessionID `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3,casttype=SessionID" json:"session_id,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*SessionInput_CreateService
	//	*SessionInput_CloseService
	//	*SessionInput_ServiceInput
	Payload isSessionInput_Payload `protobuf_oneof:"payload"`
}

func (m *SessionInput) Reset()         { *m = SessionInput{} }
func (m *SessionInput) String() string { return proto.CompactTextString(m) }
func (*SessionInput) ProtoMessage()    {}
func (*SessionInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ab16e7f9ceaca8f, []int{2}
}
func (m *SessionInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionInput.Merge(m, src)
}
func (m *SessionInput) XXX_Size() int {
	return m.Size()
}
func (m *SessionInput) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionInput.DiscardUnknown(m)
}

var xxx_messageInfo_SessionInput proto.InternalMessageInfo

type isSessionInput_Payload interface {
	isSessionInput_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SessionInput_CreateService struct {
	CreateService *CreateServiceInput `protobuf:"bytes,2,opt,name=create_service,json=createService,proto3,oneof" json:"create_service,omitempty"`
}
type SessionInput_CloseService struct {
	CloseService *CloseServiceInput `protobuf:"bytes,3,opt,name=close_service,json=closeService,proto3,oneof" json:"close_service,omitempty"`
}
type SessionInput_ServiceInput struct {
	ServiceInput *ServiceInput `protobuf:"bytes,4,opt,name=service_input,json=serviceInput,proto3,oneof" json:"service_input,omitempty"`
}

func (*SessionInput_CreateService) isSessionInput_Payload() {}
func (*SessionInput_CloseService) isSessionInput_Payload()  {}
func (*SessionInput_ServiceInput) isSessionInput_Payload()  {}

func (m *SessionInput) GetPayload() isSessionInput_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *SessionInput) GetSessionID() SessionID {
	if m != nil {
		return m.SessionID
	}
	return 0
}

func (m *SessionInput) GetCreateService() *CreateServiceInput {
	if x, ok := m.GetPayload().(*SessionInput_CreateService); ok {
		return x.CreateService
	}
	return nil
}

func (m *SessionInput) GetCloseService() *CloseServiceInput {
	if x, ok := m.GetPayload().(*SessionInput_CloseService); ok {
		return x.CloseService
	}
	return nil
}

func (m *SessionInput) GetServiceInput() *ServiceInput {
	if x, ok := m.GetPayload().(*SessionInput_ServiceInput); ok {
		return x.ServiceInput
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SessionInput) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SessionInput_CreateService)(nil),
		(*SessionInput_CloseService)(nil),
		(*SessionInput_ServiceInput)(nil),
	}
}

type SessionOutput struct {
	// Types that are valid to be assigned to Payload:
	//	*SessionOutput_CreateService
	//	*SessionOutput_CloseService
	//	*SessionOutput_ServiceOutput
	Payload isSessionOutput_Payload `protobuf_oneof:"payload"`
}

func (m *SessionOutput) Reset()         { *m = SessionOutput{} }
func (m *SessionOutput) String() string { return proto.CompactTextString(m) }
func (*SessionOutput) ProtoMessage()    {}
func (*SessionOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ab16e7f9ceaca8f, []int{3}
}
func (m *SessionOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionOutput.Merge(m, src)
}
func (m *SessionOutput) XXX_Size() int {
	return m.Size()
}
func (m *SessionOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionOutput.DiscardUnknown(m)
}

var xxx_messageInfo_SessionOutput proto.InternalMessageInfo

type isSessionOutput_Payload interface {
	isSessionOutput_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SessionOutput_CreateService struct {
	CreateService *CreateServiceOutput `protobuf:"bytes,1,opt,name=create_service,json=createService,proto3,oneof" json:"create_service,omitempty"`
}
type SessionOutput_CloseService struct {
	CloseService *CloseServiceOutput `protobuf:"bytes,2,opt,name=close_service,json=closeService,proto3,oneof" json:"close_service,omitempty"`
}
type SessionOutput_ServiceOutput struct {
	ServiceOutput *ServiceOutput `protobuf:"bytes,3,opt,name=service_output,json=serviceOutput,proto3,oneof" json:"service_output,omitempty"`
}

func (*SessionOutput_CreateService) isSessionOutput_Payload() {}
func (*SessionOutput_CloseService) isSessionOutput_Payload()  {}
func (*SessionOutput_ServiceOutput) isSessionOutput_Payload() {}

func (m *SessionOutput) GetPayload() isSessionOutput_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *SessionOutput) GetCreateService() *CreateServiceOutput {
	if x, ok := m.GetPayload().(*SessionOutput_CreateService); ok {
		return x.CreateService
	}
	return nil
}

func (m *SessionOutput) GetCloseService() *CloseServiceOutput {
	if x, ok := m.GetPayload().(*SessionOutput_CloseService); ok {
		return x.CloseService
	}
	return nil
}

func (m *SessionOutput) GetServiceOutput() *ServiceOutput {
	if x, ok := m.GetPayload().(*SessionOutput_ServiceOutput); ok {
		return x.ServiceOutput
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SessionOutput) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SessionOutput_CreateService)(nil),
		(*SessionOutput_CloseService)(nil),
		(*SessionOutput_ServiceOutput)(nil),
	}
}

type CreateServiceInput struct {
	Service   string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CreateServiceInput) Reset()         { *m = CreateServiceInput{} }
func (m *CreateServiceInput) String() string { return proto.CompactTextString(m) }
func (*CreateServiceInput) ProtoMessage()    {}
func (*CreateServiceInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ab16e7f9ceaca8f, []int{4}
}
func (m *CreateServiceInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateServiceInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateServiceInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateServiceInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateServiceInput.Merge(m, src)
}
func (m *CreateServiceInput) XXX_Size() int {
	return m.Size()
}
func (m *CreateServiceInput) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateServiceInput.DiscardUnknown(m)
}

var xxx_messageInfo_CreateServiceInput proto.InternalMessageInfo

func (m *CreateServiceInput) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *CreateServiceInput) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CreateServiceInput) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateServiceOutput struct {
	ServiceID ServiceID `protobuf:"varint,1,opt,name=service_id,json=serviceId,proto3,casttype=ServiceID" json:"service_id,omitempty"`
}

func (m *CreateServiceOutput) Reset()         { *m = CreateServiceOutput{} }
func (m *CreateServiceOutput) String() string { return proto.CompactTextString(m) }
func (*CreateServiceOutput) ProtoMessage()    {}
func (*CreateServiceOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ab16e7f9ceaca8f, []int{5}
}
func (m *CreateServiceOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateServiceOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateServiceOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateServiceOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateServiceOutput.Merge(m, src)
}
func (m *CreateServiceOutput) XXX_Size() int {
	return m.Size()
}
func (m *CreateServiceOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateServiceOutput.DiscardUnknown(m)
}

var xxx_messageInfo_CreateServiceOutput proto.InternalMessageInfo

func (m *CreateServiceOutput) GetServiceID() ServiceID {
	if m != nil {
		return m.ServiceID
	}
	return 0
}

type CloseServiceInput struct {
}

func (m *CloseServiceInput) Reset()         { *m = CloseServiceInput{} }
func (m *CloseServiceInput) String() string { return proto.CompactTextString(m) }
func (*CloseServiceInput) ProtoMessage()    {}
func (*CloseServiceInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ab16e7f9ceaca8f, []int{6}
}
func (m *CloseServiceInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloseServiceInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloseServiceInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloseServiceInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseServiceInput.Merge(m, src)
}
func (m *CloseServiceInput) XXX_Size() int {
	return m.Size()
}
func (m *CloseServiceInput) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseServiceInput.DiscardUnknown(m)
}

var xxx_messageInfo_CloseServiceInput proto.InternalMessageInfo

type CloseServiceOutput struct {
}

func (m *CloseServiceOutput) Reset()         { *m = CloseServiceOutput{} }
func (m *CloseServiceOutput) String() string { return proto.CompactTextString(m) }
func (*CloseServiceOutput) ProtoMessage()    {}
func (*CloseServiceOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ab16e7f9ceaca8f, []int{7}
}
func (m *CloseServiceOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloseServiceOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloseServiceOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloseServiceOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseServiceOutput.Merge(m, src)
}
func (m *CloseServiceOutput) XXX_Size() int {
	return m.Size()
}
func (m *CloseServiceOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseServiceOutput.DiscardUnknown(m)
}

var xxx_messageInfo_CloseServiceOutput proto.InternalMessageInfo

type ServiceInput struct {
	ServiceID ServiceID `protobuf:"varint,1,opt,name=service_id,json=serviceId,proto3,casttype=ServiceID" json:"service_id,omitempty"`
	Payload   []byte    `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *ServiceInput) Reset()         { *m = ServiceInput{} }
func (m *ServiceInput) String() string { return proto.CompactTextString(m) }
func (*ServiceInput) ProtoMessage()    {}
func (*ServiceInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ab16e7f9ceaca8f, []int{8}
}
func (m *ServiceInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceInput.Merge(m, src)
}
func (m *ServiceInput) XXX_Size() int {
	return m.Size()
}
func (m *ServiceInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceInput.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceInput proto.InternalMessageInfo

func (m *ServiceInput) GetServiceID() ServiceID {
	if m != nil {
		return m.ServiceID
	}
	return 0
}

func (m *ServiceInput) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type ServiceOutput struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *ServiceOutput) Reset()         { *m = ServiceOutput{} }
func (m *ServiceOutput) String() string { return proto.CompactTextString(m) }
func (*ServiceOutput) ProtoMessage()    {}
func (*ServiceOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ab16e7f9ceaca8f, []int{9}
}
func (m *ServiceOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceOutput.Merge(m, src)
}
func (m *ServiceOutput) XXX_Size() int {
	return m.Size()
}
func (m *ServiceOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceOutput.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceOutput proto.InternalMessageInfo

func (m *ServiceOutput) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type OpenSessionInput struct {
}

func (m *OpenSessionInput) Reset()         { *m = OpenSessionInput{} }
func (m *OpenSessionInput) String() string { return proto.CompactTextString(m) }
func (*OpenSessionInput) ProtoMessage()    {}
func (*OpenSessionInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ab16e7f9ceaca8f, []int{10}
}
func (m *OpenSessionInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenSessionInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenSessionInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenSessionInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenSessionInput.Merge(m, src)
}
func (m *OpenSessionInput) XXX_Size() int {
	return m.Size()
}
func (m *OpenSessionInput) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenSessionInput.DiscardUnknown(m)
}

var xxx_messageInfo_OpenSessionInput proto.InternalMessageInfo

type OpenSessionOutput struct {
	SessionID SessionID `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3,casttype=SessionID" json:"session_id,omitempty"`
}

func (m *OpenSessionOutput) Reset()         { *m = OpenSessionOutput{} }
func (m *OpenSessionOutput) String() string { return proto.CompactTextString(m) }
func (*OpenSessionOutput) ProtoMessage()    {}
func (*OpenSessionOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ab16e7f9ceaca8f, []int{11}
}
func (m *OpenSessionOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenSessionOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenSessionOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenSessionOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenSessionOutput.Merge(m, src)
}
func (m *OpenSessionOutput) XXX_Size() int {
	return m.Size()
}
func (m *OpenSessionOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenSessionOutput.DiscardUnknown(m)
}

var xxx_messageInfo_OpenSessionOutput proto.InternalMessageInfo

func (m *OpenSessionOutput) GetSessionID() SessionID {
	if m != nil {
		return m.SessionID
	}
	return 0
}

type KeepAliveInput struct {
	SessionID                SessionID                                `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3,casttype=SessionID" json:"session_id,omitempty"`
	LastCommandSequenceNum   CommandSequenceNum                       `protobuf:"varint,2,opt,name=last_command_sequence_num,json=lastCommandSequenceNum,proto3,casttype=CommandSequenceNum" json:"last_command_sequence_num,omitempty"`
	PendingCommandsFilter    []byte                                   `protobuf:"bytes,3,opt,name=pending_commands_filter,json=pendingCommandsFilter,proto3" json:"pending_commands_filter,omitempty"`
	OutputStreamSequenceNums map[CommandSequenceNum]OutputSequenceNum `protobuf:"bytes,4,rep,name=output_stream_sequence_nums,json=outputStreamSequenceNums,proto3,castkey=CommandSequenceNum,castvalue=OutputSequenceNum" json:"output_stream_sequence_nums,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *KeepAliveInput) Reset()         { *m = KeepAliveInput{} }
func (m *KeepAliveInput) String() string { return proto.CompactTextString(m) }
func (*KeepAliveInput) ProtoMessage()    {}
func (*KeepAliveInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ab16e7f9ceaca8f, []int{12}
}
func (m *KeepAliveInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeepAliveInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeepAliveInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeepAliveInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeepAliveInput.Merge(m, src)
}
func (m *KeepAliveInput) XXX_Size() int {
	return m.Size()
}
func (m *KeepAliveInput) XXX_DiscardUnknown() {
	xxx_messageInfo_KeepAliveInput.DiscardUnknown(m)
}

var xxx_messageInfo_KeepAliveInput proto.InternalMessageInfo

func (m *KeepAliveInput) GetSessionID() SessionID {
	if m != nil {
		return m.SessionID
	}
	return 0
}

func (m *KeepAliveInput) GetLastCommandSequenceNum() CommandSequenceNum {
	if m != nil {
		return m.LastCommandSequenceNum
	}
	return 0
}

func (m *KeepAliveInput) GetPendingCommandsFilter() []byte {
	if m != nil {
		return m.PendingCommandsFilter
	}
	return nil
}

func (m *KeepAliveInput) GetOutputStreamSequenceNums() map[CommandSequenceNum]OutputSequenceNum {
	if m != nil {
		return m.OutputStreamSequenceNums
	}
	return nil
}

type KeepAliveOutput struct {
}

func (m *KeepAliveOutput) Reset()         { *m = KeepAliveOutput{} }
func (m *KeepAliveOutput) String() string { return proto.CompactTextString(m) }
func (*KeepAliveOutput) ProtoMessage()    {}
func (*KeepAliveOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ab16e7f9ceaca8f, []int{13}
}
func (m *KeepAliveOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeepAliveOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeepAliveOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeepAliveOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeepAliveOutput.Merge(m, src)
}
func (m *KeepAliveOutput) XXX_Size() int {
	return m.Size()
}
func (m *KeepAliveOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_KeepAliveOutput.DiscardUnknown(m)
}

var xxx_messageInfo_KeepAliveOutput proto.InternalMessageInfo

type CloseSessionInput struct {
	SessionID SessionID `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3,casttype=SessionID" json:"session_id,omitempty"`
}

func (m *CloseSessionInput) Reset()         { *m = CloseSessionInput{} }
func (m *CloseSessionInput) String() string { return proto.CompactTextString(m) }
func (*CloseSessionInput) ProtoMessage()    {}
func (*CloseSessionInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ab16e7f9ceaca8f, []int{14}
}
func (m *CloseSessionInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloseSessionInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloseSessionInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloseSessionInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseSessionInput.Merge(m, src)
}
func (m *CloseSessionInput) XXX_Size() int {
	return m.Size()
}
func (m *CloseSessionInput) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseSessionInput.DiscardUnknown(m)
}

var xxx_messageInfo_CloseSessionInput proto.InternalMessageInfo

func (m *CloseSessionInput) GetSessionID() SessionID {
	if m != nil {
		return m.SessionID
	}
	return 0
}

type CloseSessionOutput struct {
}

func (m *CloseSessionOutput) Reset()         { *m = CloseSessionOutput{} }
func (m *CloseSessionOutput) String() string { return proto.CompactTextString(m) }
func (*CloseSessionOutput) ProtoMessage()    {}
func (*CloseSessionOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ab16e7f9ceaca8f, []int{15}
}
func (m *CloseSessionOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloseSessionOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloseSessionOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloseSessionOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseSessionOutput.Merge(m, src)
}
func (m *CloseSessionOutput) XXX_Size() int {
	return m.Size()
}
func (m *CloseSessionOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseSessionOutput.DiscardUnknown(m)
}

var xxx_messageInfo_CloseSessionOutput proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PartitionInput)(nil), "atomix.multiraft.v1.PartitionInput")
	proto.RegisterType((*PartitionOutput)(nil), "atomix.multiraft.v1.PartitionOutput")
	proto.RegisterType((*SessionInput)(nil), "atomix.multiraft.v1.SessionInput")
	proto.RegisterType((*SessionOutput)(nil), "atomix.multiraft.v1.SessionOutput")
	proto.RegisterType((*CreateServiceInput)(nil), "atomix.multiraft.v1.CreateServiceInput")
	proto.RegisterType((*CreateServiceOutput)(nil), "atomix.multiraft.v1.CreateServiceOutput")
	proto.RegisterType((*CloseServiceInput)(nil), "atomix.multiraft.v1.CloseServiceInput")
	proto.RegisterType((*CloseServiceOutput)(nil), "atomix.multiraft.v1.CloseServiceOutput")
	proto.RegisterType((*ServiceInput)(nil), "atomix.multiraft.v1.ServiceInput")
	proto.RegisterType((*ServiceOutput)(nil), "atomix.multiraft.v1.ServiceOutput")
	proto.RegisterType((*OpenSessionInput)(nil), "atomix.multiraft.v1.OpenSessionInput")
	proto.RegisterType((*OpenSessionOutput)(nil), "atomix.multiraft.v1.OpenSessionOutput")
	proto.RegisterType((*KeepAliveInput)(nil), "atomix.multiraft.v1.KeepAliveInput")
	proto.RegisterMapType((map[CommandSequenceNum]OutputSequenceNum)(nil), "atomix.multiraft.v1.KeepAliveInput.OutputStreamSequenceNumsEntry")
	proto.RegisterType((*KeepAliveOutput)(nil), "atomix.multiraft.v1.KeepAliveOutput")
	proto.RegisterType((*CloseSessionInput)(nil), "atomix.multiraft.v1.CloseSessionInput")
	proto.RegisterType((*CloseSessionOutput)(nil), "atomix.multiraft.v1.CloseSessionOutput")
}

func init() { proto.RegisterFile("atomix/multiraft/v1/fsm.proto", fileDescriptor_9ab16e7f9ceaca8f) }

var fileDescriptor_9ab16e7f9ceaca8f = []byte{
	// 791 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x96, 0xcf, 0x4e, 0xdb, 0x4a,
	0x14, 0xc6, 0xe3, 0x24, 0xf7, 0x22, 0x1f, 0x92, 0x40, 0x06, 0x2e, 0x37, 0x97, 0x5b, 0x02, 0x75,
	0x5b, 0x4a, 0x55, 0x29, 0x11, 0x54, 0xaa, 0xda, 0xee, 0x08, 0x50, 0xd1, 0x46, 0x0d, 0xe0, 0x3c,
	0x80, 0xeb, 0x3a, 0x03, 0xb2, 0x88, 0xff, 0xd4, 0xe3, 0x44, 0x65, 0xdb, 0x25, 0xab, 0xbe, 0x48,
	0x9f, 0xa1, 0xbb, 0xaa, 0x9b, 0x4a, 0x48, 0xdd, 0x74, 0x05, 0x55, 0x78, 0x0b, 0x56, 0xd5, 0xcc,
	0xd8, 0xce, 0xd8, 0x31, 0x09, 0x2a, 0xbb, 0x99, 0x33, 0x67, 0xbe, 0xcc, 0xf9, 0x9d, 0x6f, 0x3c,
	0x81, 0x25, 0xdd, 0x77, 0x2c, 0xf3, 0x43, 0xdd, 0xea, 0x75, 0x7d, 0xd3, 0xd3, 0x0f, 0xfd, 0x7a,
	0x7f, 0xbd, 0x7e, 0x48, 0xac, 0x9a, 0xeb, 0x39, 0xbe, 0x83, 0xe6, 0xf8, 0x72, 0x2d, 0x5a, 0xae,
	0xf5, 0xd7, 0x17, 0xe7, 0x8f, 0x9c, 0x23, 0x87, 0xad, 0xd7, 0xe9, 0x88, 0xa7, 0x2a, 0x5f, 0xb3,
	0x50, 0xda, 0xd7, 0x3d, 0xdf, 0xf4, 0x4d, 0xc7, 0x7e, 0x65, 0xbb, 0x3d, 0x1f, 0xbd, 0x86, 0x82,
	0xe3, 0x62, 0x5b, 0x23, 0x98, 0x10, 0xd3, 0xb1, 0x2b, 0xd2, 0x8a, 0xb4, 0x36, 0xbd, 0xf1, 0xa0,
	0x96, 0x22, 0x5a, 0xdb, 0x73, 0xb1, 0xdd, 0xe6, 0x79, 0x6c, 0xf3, 0x6e, 0x46, 0x9d, 0x76, 0x86,
	0x31, 0xb4, 0x0d, 0x70, 0x8c, 0xb1, 0xab, 0xe9, 0x5d, 0xb3, 0x8f, 0x2b, 0x59, 0xa6, 0x74, 0x2f,
	0x55, 0xa9, 0x89, 0xb1, 0xbb, 0x49, 0xb3, 0x42, 0x1d, 0xf9, 0x38, 0x8c, 0xa0, 0x37, 0x50, 0x34,
	0xba, 0x0e, 0xc1, 0xd1, 0x91, 0x72, 0x4c, 0x68, 0x35, 0x55, 0x68, 0x8b, 0x66, 0x26, 0xce, 0x54,
	0x30, 0x84, 0x20, 0xda, 0x85, 0x62, 0x20, 0xa4, 0x99, 0x34, 0xa1, 0x92, 0x67, 0x72, 0x77, 0x53,
	0xe5, 0x92, 0x4a, 0x44, 0x98, 0x37, 0x64, 0x98, 0x72, 0xf5, 0x93, 0xae, 0xa3, 0x77, 0x94, 0xef,
	0x59, 0x98, 0x89, 0x40, 0xee, 0xf5, 0x7c, 0x4a, 0xb2, 0x99, 0x4a, 0x72, 0x75, 0x12, 0x49, 0xbe,
	0x3b, 0x89, 0x72, 0x27, 0x05, 0xe5, 0xfd, 0xf1, 0x28, 0x23, 0x21, 0x81, 0x65, 0x2b, 0x9d, 0xe5,
	0xc3, 0x89, 0x2c, 0x23, 0xb1, 0x38, 0xcc, 0x26, 0x94, 0x42, 0x98, 0x0e, 0xcb, 0x08, 0x68, 0x2a,
	0xe3, 0x68, 0x46, 0x5a, 0x61, 0x23, 0x78, 0x40, 0xe4, 0xf9, 0x25, 0x0b, 0x05, 0x91, 0x3d, 0x7a,
	0x0e, 0x10, 0x75, 0xad, 0xc3, 0x50, 0xe6, 0x1b, 0x8b, 0x83, 0xf3, 0x65, 0x39, 0xcc, 0xda, 0xbe,
	0x12, 0x27, 0xaa, 0x1c, 0x76, 0xaa, 0x83, 0xf6, 0xa1, 0x64, 0x78, 0x58, 0xf7, 0x69, 0xd1, 0x5e,
	0xdf, 0x34, 0x42, 0x7c, 0xd7, 0x14, 0xcd, 0x52, 0xdb, 0x3c, 0x33, 0xec, 0x7b, 0xd1, 0x10, 0xa3,
	0xa2, 0x23, 0xb9, 0xe0, 0x0d, 0x1c, 0x19, 0xd3, 0x0b, 0x21, 0x72, 0x39, 0xe6, 0x48, 0x36, 0xbc,
	0x91, 0x23, 0xe3, 0x4a, 0x44, 0x98, 0x8b, 0x04, 0x4f, 0xb3, 0x50, 0x8c, 0xf1, 0x46, 0x07, 0x23,
	0x1c, 0xb8, 0x23, 0xd7, 0x26, 0x73, 0x18, 0x76, 0x2c, 0x0e, 0xa2, 0x95, 0x04, 0x91, 0x9d, 0x6c,
	0xa7, 0xb8, 0x60, 0x9c, 0x04, 0xb3, 0x13, 0x27, 0x11, 0xd8, 0x29, 0x37, 0xd6, 0x4e, 0x89, 0xc3,
	0x11, 0x31, 0x20, 0xc2, 0x78, 0x0b, 0x68, 0xb4, 0xaf, 0xa8, 0x02, 0x53, 0x22, 0x09, 0x59, 0x0d,
	0xa7, 0xe8, 0x0e, 0xc8, 0xb6, 0x6e, 0x61, 0xe2, 0xea, 0x41, 0x4d, 0xb2, 0x3a, 0x0c, 0x20, 0x04,
	0x79, 0x3a, 0x61, 0x67, 0x93, 0x55, 0x36, 0x56, 0xf6, 0x61, 0x2e, 0x85, 0x18, 0xb7, 0x6d, 0xd0,
	0xda, 0x84, 0x6d, 0xf9, 0x41, 0x02, 0xdb, 0x06, 0x13, 0x6a, 0x5b, 0x3e, 0xec, 0x28, 0x73, 0x50,
	0x1e, 0xb1, 0x8e, 0x32, 0x0f, 0x68, 0x14, 0xa3, 0x62, 0xd0, 0xcb, 0x22, 0x14, 0xf6, 0xe7, 0xbf,
	0x4a, 0x99, 0x04, 0xd0, 0x58, 0xdd, 0x05, 0x35, 0x62, 0xf8, 0x88, 0xfa, 0x49, 0xac, 0x4d, 0x48,
	0x95, 0xe2, 0xa9, 0x08, 0x66, 0x93, 0x4f, 0x83, 0xd2, 0x82, 0xf2, 0xc8, 0x47, 0xee, 0x16, 0xb7,
	0x5a, 0xf9, 0x91, 0x83, 0x52, 0xfc, 0xd5, 0xb8, 0xcd, 0x37, 0xe2, 0x00, 0xfe, 0xeb, 0xea, 0xc4,
	0xd7, 0x0c, 0xc7, 0xb2, 0x74, 0xbb, 0xa3, 0x11, 0xfc, 0xbe, 0x87, 0x6d, 0x03, 0x6b, 0x76, 0xcf,
	0x62, 0x20, 0xf2, 0x8d, 0x85, 0xab, 0xf3, 0x65, 0xb4, 0xc5, 0xd7, 0xdb, 0xc1, 0x72, 0xab, 0x67,
	0xa9, 0x0b, 0x74, 0xe3, 0x68, 0x1c, 0x3d, 0x85, 0x7f, 0x5d, 0x6c, 0x77, 0x4c, 0xfb, 0x28, 0x54,
	0x25, 0xda, 0xa1, 0xd9, 0xf5, 0xb1, 0xc7, 0x8c, 0x53, 0x50, 0xff, 0x09, 0x96, 0x83, 0xbd, 0xe4,
	0x25, 0x5b, 0x44, 0x9f, 0x25, 0xf8, 0x9f, 0x9b, 0x5f, 0x23, 0xbe, 0x87, 0x75, 0x2b, 0x76, 0x18,
	0x52, 0xc9, 0xaf, 0xe4, 0xd6, 0xa6, 0x37, 0x36, 0x6f, 0xf0, 0x8c, 0xd6, 0x38, 0xe5, 0x36, 0x53,
	0x11, 0x8e, 0x46, 0x76, 0x6c, 0xdf, 0x3b, 0x69, 0x3c, 0xfe, 0x78, 0x91, 0x56, 0xd0, 0xe9, 0xc5,
	0x72, 0x39, 0xd8, 0x28, 0x54, 0x59, 0x71, 0xae, 0xd1, 0x5a, 0x6c, 0xc2, 0xd2, 0xd8, 0xdf, 0x41,
	0xb3, 0x90, 0x3b, 0xc6, 0x27, 0xbc, 0x1f, 0x2a, 0x1d, 0xa2, 0x79, 0xf8, 0xab, 0xaf, 0x77, 0x7b,
	0xfc, 0x6a, 0xe5, 0x55, 0x3e, 0x79, 0x91, 0x7d, 0x26, 0x29, 0x65, 0x98, 0x49, 0xbc, 0x5f, 0xd4,
	0x38, 0x23, 0x8f, 0xfa, 0x6d, 0x8c, 0x33, 0xbc, 0x42, 0xe2, 0xdb, 0x53, 0xf9, 0x36, 0xa8, 0x4a,
	0x67, 0x83, 0xaa, 0xf4, 0x6b, 0x50, 0x95, 0x3e, 0x5d, 0x56, 0x33, 0x67, 0x97, 0xd5, 0xcc, 0xcf,
	0xcb, 0x6a, 0xe6, 0xdd, 0xdf, 0xec, 0xaf, 0xd2, 0x93, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7a,
	0x85, 0x68, 0xae, 0x76, 0x09, 0x00, 0x00,
}

func (m *PartitionInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PartitionInput_OpenSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionInput_OpenSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OpenSession != nil {
		{
			size, err := m.OpenSession.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *PartitionInput_KeepAlive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionInput_KeepAlive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.KeepAlive != nil {
		{
			size, err := m.KeepAlive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PartitionInput_CloseSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionInput_CloseSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CloseSession != nil {
		{
			size, err := m.CloseSession.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *PartitionInput_SessionInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionInput_SessionInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SessionInput != nil {
		{
			size, err := m.SessionInput.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *PartitionOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PartitionOutput_OpenSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionOutput_OpenSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OpenSession != nil {
		{
			size, err := m.OpenSession.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *PartitionOutput_KeepAlive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionOutput_KeepAlive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.KeepAlive != nil {
		{
			size, err := m.KeepAlive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PartitionOutput_CloseSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionOutput_CloseSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CloseSession != nil {
		{
			size, err := m.CloseSession.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *PartitionOutput_SessionOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionOutput_SessionOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SessionOutput != nil {
		{
			size, err := m.SessionOutput.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *SessionInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SessionID != 0 {
		i = encodeVarintFsm(dAtA, i, uint64(m.SessionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SessionInput_CreateService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionInput_CreateService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CreateService != nil {
		{
			size, err := m.CreateService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SessionInput_CloseService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionInput_CloseService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CloseService != nil {
		{
			size, err := m.CloseService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SessionInput_ServiceInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionInput_ServiceInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServiceInput != nil {
		{
			size, err := m.ServiceInput.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *SessionOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SessionOutput_CreateService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionOutput_CreateService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CreateService != nil {
		{
			size, err := m.CreateService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *SessionOutput_CloseService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionOutput_CloseService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CloseService != nil {
		{
			size, err := m.CloseService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SessionOutput_ServiceOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionOutput_ServiceOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServiceOutput != nil {
		{
			size, err := m.ServiceOutput.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CreateServiceInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateServiceInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateServiceInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFsm(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintFsm(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintFsm(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateServiceOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateServiceOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateServiceOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServiceID != 0 {
		i = encodeVarintFsm(dAtA, i, uint64(m.ServiceID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CloseServiceInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseServiceInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloseServiceInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CloseServiceOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseServiceOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloseServiceOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ServiceInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintFsm(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if m.ServiceID != 0 {
		i = encodeVarintFsm(dAtA, i, uint64(m.ServiceID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ServiceOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintFsm(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OpenSessionInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenSessionInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenSessionInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *OpenSessionOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenSessionOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenSessionOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SessionID != 0 {
		i = encodeVarintFsm(dAtA, i, uint64(m.SessionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *KeepAliveInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeepAliveInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeepAliveInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutputStreamSequenceNums) > 0 {
		for k := range m.OutputStreamSequenceNums {
			v := m.OutputStreamSequenceNums[k]
			baseI := i
			i = encodeVarintFsm(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintFsm(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintFsm(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.PendingCommandsFilter) > 0 {
		i -= len(m.PendingCommandsFilter)
		copy(dAtA[i:], m.PendingCommandsFilter)
		i = encodeVarintFsm(dAtA, i, uint64(len(m.PendingCommandsFilter)))
		i--
		dAtA[i] = 0x1a
	}
	if m.LastCommandSequenceNum != 0 {
		i = encodeVarintFsm(dAtA, i, uint64(m.LastCommandSequenceNum))
		i--
		dAtA[i] = 0x10
	}
	if m.SessionID != 0 {
		i = encodeVarintFsm(dAtA, i, uint64(m.SessionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *KeepAliveOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeepAliveOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeepAliveOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CloseSessionInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseSessionInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloseSessionInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SessionID != 0 {
		i = encodeVarintFsm(dAtA, i, uint64(m.SessionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CloseSessionOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseSessionOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloseSessionOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintFsm(dAtA []byte, offset int, v uint64) int {
	offset -= sovFsm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PartitionInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *PartitionInput_OpenSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OpenSession != nil {
		l = m.OpenSession.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *PartitionInput_KeepAlive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeepAlive != nil {
		l = m.KeepAlive.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *PartitionInput_CloseSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloseSession != nil {
		l = m.CloseSession.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *PartitionInput_SessionInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionInput != nil {
		l = m.SessionInput.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *PartitionOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *PartitionOutput_OpenSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OpenSession != nil {
		l = m.OpenSession.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *PartitionOutput_KeepAlive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeepAlive != nil {
		l = m.KeepAlive.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *PartitionOutput_CloseSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloseSession != nil {
		l = m.CloseSession.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *PartitionOutput_SessionOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionOutput != nil {
		l = m.SessionOutput.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *SessionInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionID != 0 {
		n += 1 + sovFsm(uint64(m.SessionID))
	}
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *SessionInput_CreateService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateService != nil {
		l = m.CreateService.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *SessionInput_CloseService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloseService != nil {
		l = m.CloseService.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *SessionInput_ServiceInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceInput != nil {
		l = m.ServiceInput.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *SessionOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *SessionOutput_CreateService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateService != nil {
		l = m.CreateService.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *SessionOutput_CloseService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloseService != nil {
		l = m.CloseService.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *SessionOutput_ServiceOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceOutput != nil {
		l = m.ServiceOutput.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *CreateServiceInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovFsm(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovFsm(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}

func (m *CreateServiceOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceID != 0 {
		n += 1 + sovFsm(uint64(m.ServiceID))
	}
	return n
}

func (m *CloseServiceInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CloseServiceOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ServiceInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceID != 0 {
		n += 1 + sovFsm(uint64(m.ServiceID))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}

func (m *ServiceOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}

func (m *OpenSessionInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *OpenSessionOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionID != 0 {
		n += 1 + sovFsm(uint64(m.SessionID))
	}
	return n
}

func (m *KeepAliveInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionID != 0 {
		n += 1 + sovFsm(uint64(m.SessionID))
	}
	if m.LastCommandSequenceNum != 0 {
		n += 1 + sovFsm(uint64(m.LastCommandSequenceNum))
	}
	l = len(m.PendingCommandsFilter)
	if l > 0 {
		n += 1 + l + sovFsm(uint64(l))
	}
	if len(m.OutputStreamSequenceNums) > 0 {
		for k, v := range m.OutputStreamSequenceNums {
			_ = k
			_ = v
			mapEntrySize := 1 + sovFsm(uint64(k)) + 1 + sovFsm(uint64(v))
			n += mapEntrySize + 1 + sovFsm(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *KeepAliveOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CloseSessionInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionID != 0 {
		n += 1 + sovFsm(uint64(m.SessionID))
	}
	return n
}

func (m *CloseSessionOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovFsm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFsm(x uint64) (n int) {
	return sovFsm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PartitionInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenSession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OpenSessionInput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &PartitionInput_OpenSession{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeepAlive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KeepAliveInput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &PartitionInput_KeepAlive{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseSession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CloseSessionInput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &PartitionInput_CloseSession{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionInput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SessionInput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &PartitionInput_SessionInput{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenSession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OpenSessionOutput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &PartitionOutput_OpenSession{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeepAlive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KeepAliveOutput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &PartitionOutput_KeepAlive{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseSession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CloseSessionOutput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &PartitionOutput_CloseSession{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionOutput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SessionOutput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &PartitionOutput_SessionOutput{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			m.SessionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionID |= SessionID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CreateServiceInput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &SessionInput_CreateService{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CloseServiceInput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &SessionInput_CloseService{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceInput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceInput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &SessionInput_ServiceInput{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CreateServiceOutput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &SessionOutput_CreateService{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CloseServiceOutput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &SessionOutput_CloseService{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceOutput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceOutput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &SessionOutput_ServiceOutput{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateServiceInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateServiceInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateServiceInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateServiceOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateServiceOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateServiceOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceID", wireType)
			}
			m.ServiceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceID |= ServiceID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseServiceInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseServiceInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseServiceInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseServiceOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseServiceOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseServiceOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceID", wireType)
			}
			m.ServiceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceID |= ServiceID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenSessionInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenSessionInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenSessionInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenSessionOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenSessionOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenSessionOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			m.SessionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionID |= SessionID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeepAliveInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeepAliveInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeepAliveInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			m.SessionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionID |= SessionID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCommandSequenceNum", wireType)
			}
			m.LastCommandSequenceNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastCommandSequenceNum |= CommandSequenceNum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingCommandsFilter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingCommandsFilter = append(m.PendingCommandsFilter[:0], dAtA[iNdEx:postIndex]...)
			if m.PendingCommandsFilter == nil {
				m.PendingCommandsFilter = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputStreamSequenceNums", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutputStreamSequenceNums == nil {
				m.OutputStreamSequenceNums = make(map[CommandSequenceNum]OutputSequenceNum)
			}
			var mapkey uint64
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFsm
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFsm
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFsm
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFsm(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthFsm
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.OutputStreamSequenceNums[CommandSequenceNum(mapkey)] = ((OutputSequenceNum)(mapvalue))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeepAliveOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeepAliveOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeepAliveOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseSessionInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseSessionInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseSessionInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			m.SessionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionID |= SessionID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseSessionOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseSessionOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseSessionOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFsm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFsm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFsm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFsm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFsm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFsm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFsm = fmt.Errorf("proto: unexpected end of group")
)
