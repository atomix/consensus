// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/multiraft/v1/headers.proto

package v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OperationResponseHeaders_Status int32

const (
	OperationResponseHeaders_OK             OperationResponseHeaders_Status = 0
	OperationResponseHeaders_ERROR          OperationResponseHeaders_Status = 1
	OperationResponseHeaders_UNKNOWN        OperationResponseHeaders_Status = 2
	OperationResponseHeaders_CANCELED       OperationResponseHeaders_Status = 3
	OperationResponseHeaders_NOT_FOUND      OperationResponseHeaders_Status = 4
	OperationResponseHeaders_ALREADY_EXISTS OperationResponseHeaders_Status = 5
	OperationResponseHeaders_UNAUTHORIZED   OperationResponseHeaders_Status = 6
	OperationResponseHeaders_FORBIDDEN      OperationResponseHeaders_Status = 7
	OperationResponseHeaders_CONFLICT       OperationResponseHeaders_Status = 8
	OperationResponseHeaders_INVALID        OperationResponseHeaders_Status = 9
	OperationResponseHeaders_UNAVAILABLE    OperationResponseHeaders_Status = 10
	OperationResponseHeaders_NOT_SUPPORTED  OperationResponseHeaders_Status = 11
	OperationResponseHeaders_TIMEOUT        OperationResponseHeaders_Status = 12
	OperationResponseHeaders_INTERNAL       OperationResponseHeaders_Status = 13
	OperationResponseHeaders_FAULT          OperationResponseHeaders_Status = 14
)

var OperationResponseHeaders_Status_name = map[int32]string{
	0:  "OK",
	1:  "ERROR",
	2:  "UNKNOWN",
	3:  "CANCELED",
	4:  "NOT_FOUND",
	5:  "ALREADY_EXISTS",
	6:  "UNAUTHORIZED",
	7:  "FORBIDDEN",
	8:  "CONFLICT",
	9:  "INVALID",
	10: "UNAVAILABLE",
	11: "NOT_SUPPORTED",
	12: "TIMEOUT",
	13: "INTERNAL",
	14: "FAULT",
}

var OperationResponseHeaders_Status_value = map[string]int32{
	"OK":             0,
	"ERROR":          1,
	"UNKNOWN":        2,
	"CANCELED":       3,
	"NOT_FOUND":      4,
	"ALREADY_EXISTS": 5,
	"UNAUTHORIZED":   6,
	"FORBIDDEN":      7,
	"CONFLICT":       8,
	"INVALID":        9,
	"UNAVAILABLE":    10,
	"NOT_SUPPORTED":  11,
	"TIMEOUT":        12,
	"INTERNAL":       13,
	"FAULT":          14,
}

func (x OperationResponseHeaders_Status) String() string {
	return proto.EnumName(OperationResponseHeaders_Status_name, int32(x))
}

func (OperationResponseHeaders_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_aa41837c4ac4528c, []int{7, 0}
}

type PartitionRequestHeaders struct {
	PartitionID PartitionID `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3,casttype=PartitionID" json:"partition_id,omitempty"`
}

func (m *PartitionRequestHeaders) Reset()         { *m = PartitionRequestHeaders{} }
func (m *PartitionRequestHeaders) String() string { return proto.CompactTextString(m) }
func (*PartitionRequestHeaders) ProtoMessage()    {}
func (*PartitionRequestHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa41837c4ac4528c, []int{0}
}
func (m *PartitionRequestHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionRequestHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartitionRequestHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartitionRequestHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionRequestHeaders.Merge(m, src)
}
func (m *PartitionRequestHeaders) XXX_Size() int {
	return m.Size()
}
func (m *PartitionRequestHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionRequestHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionRequestHeaders proto.InternalMessageInfo

func (m *PartitionRequestHeaders) GetPartitionID() PartitionID {
	if m != nil {
		return m.PartitionID
	}
	return 0
}

type PartitionResponseHeaders struct {
	Index Index `protobuf:"varint,1,opt,name=index,proto3,casttype=Index" json:"index,omitempty"`
}

func (m *PartitionResponseHeaders) Reset()         { *m = PartitionResponseHeaders{} }
func (m *PartitionResponseHeaders) String() string { return proto.CompactTextString(m) }
func (*PartitionResponseHeaders) ProtoMessage()    {}
func (*PartitionResponseHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa41837c4ac4528c, []int{1}
}
func (m *PartitionResponseHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionResponseHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartitionResponseHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartitionResponseHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionResponseHeaders.Merge(m, src)
}
func (m *PartitionResponseHeaders) XXX_Size() int {
	return m.Size()
}
func (m *PartitionResponseHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionResponseHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionResponseHeaders proto.InternalMessageInfo

func (m *PartitionResponseHeaders) GetIndex() Index {
	if m != nil {
		return m.Index
	}
	return 0
}

type SessionRequestHeaders struct {
	PartitionRequestHeaders `protobuf:"bytes,1,opt,name=partition,proto3,embedded=partition" json:"partition"`
	SessionID               SessionID `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3,casttype=SessionID" json:"session_id,omitempty"`
}

func (m *SessionRequestHeaders) Reset()         { *m = SessionRequestHeaders{} }
func (m *SessionRequestHeaders) String() string { return proto.CompactTextString(m) }
func (*SessionRequestHeaders) ProtoMessage()    {}
func (*SessionRequestHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa41837c4ac4528c, []int{2}
}
func (m *SessionRequestHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionRequestHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionRequestHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionRequestHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionRequestHeaders.Merge(m, src)
}
func (m *SessionRequestHeaders) XXX_Size() int {
	return m.Size()
}
func (m *SessionRequestHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionRequestHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_SessionRequestHeaders proto.InternalMessageInfo

func (m *SessionRequestHeaders) GetSessionID() SessionID {
	if m != nil {
		return m.SessionID
	}
	return 0
}

type SessionResponseHeaders struct {
	PartitionResponseHeaders `protobuf:"bytes,1,opt,name=partition,proto3,embedded=partition" json:"partition"`
}

func (m *SessionResponseHeaders) Reset()         { *m = SessionResponseHeaders{} }
func (m *SessionResponseHeaders) String() string { return proto.CompactTextString(m) }
func (*SessionResponseHeaders) ProtoMessage()    {}
func (*SessionResponseHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa41837c4ac4528c, []int{3}
}
func (m *SessionResponseHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionResponseHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionResponseHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionResponseHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionResponseHeaders.Merge(m, src)
}
func (m *SessionResponseHeaders) XXX_Size() int {
	return m.Size()
}
func (m *SessionResponseHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionResponseHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_SessionResponseHeaders proto.InternalMessageInfo

type PrimitiveRequestHeaders struct {
	SessionRequestHeaders `protobuf:"bytes,1,opt,name=session,proto3,embedded=session" json:"session"`
	PrimitiveID           PrimitiveID `protobuf:"varint,2,opt,name=primitive_id,json=primitiveId,proto3,casttype=PrimitiveID" json:"primitive_id,omitempty"`
}

func (m *PrimitiveRequestHeaders) Reset()         { *m = PrimitiveRequestHeaders{} }
func (m *PrimitiveRequestHeaders) String() string { return proto.CompactTextString(m) }
func (*PrimitiveRequestHeaders) ProtoMessage()    {}
func (*PrimitiveRequestHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa41837c4ac4528c, []int{4}
}
func (m *PrimitiveRequestHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrimitiveRequestHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrimitiveRequestHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrimitiveRequestHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimitiveRequestHeaders.Merge(m, src)
}
func (m *PrimitiveRequestHeaders) XXX_Size() int {
	return m.Size()
}
func (m *PrimitiveRequestHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimitiveRequestHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_PrimitiveRequestHeaders proto.InternalMessageInfo

func (m *PrimitiveRequestHeaders) GetPrimitiveID() PrimitiveID {
	if m != nil {
		return m.PrimitiveID
	}
	return 0
}

type PrimitiveResponseHeaders struct {
	SessionResponseHeaders `protobuf:"bytes,1,opt,name=session,proto3,embedded=session" json:"session"`
}

func (m *PrimitiveResponseHeaders) Reset()         { *m = PrimitiveResponseHeaders{} }
func (m *PrimitiveResponseHeaders) String() string { return proto.CompactTextString(m) }
func (*PrimitiveResponseHeaders) ProtoMessage()    {}
func (*PrimitiveResponseHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa41837c4ac4528c, []int{5}
}
func (m *PrimitiveResponseHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrimitiveResponseHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrimitiveResponseHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrimitiveResponseHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimitiveResponseHeaders.Merge(m, src)
}
func (m *PrimitiveResponseHeaders) XXX_Size() int {
	return m.Size()
}
func (m *PrimitiveResponseHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimitiveResponseHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_PrimitiveResponseHeaders proto.InternalMessageInfo

type OperationRequestHeaders struct {
	PrimitiveRequestHeaders `protobuf:"bytes,1,opt,name=session,proto3,embedded=session" json:"session"`
}

func (m *OperationRequestHeaders) Reset()         { *m = OperationRequestHeaders{} }
func (m *OperationRequestHeaders) String() string { return proto.CompactTextString(m) }
func (*OperationRequestHeaders) ProtoMessage()    {}
func (*OperationRequestHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa41837c4ac4528c, []int{6}
}
func (m *OperationRequestHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationRequestHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperationRequestHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperationRequestHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationRequestHeaders.Merge(m, src)
}
func (m *OperationRequestHeaders) XXX_Size() int {
	return m.Size()
}
func (m *OperationRequestHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationRequestHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_OperationRequestHeaders proto.InternalMessageInfo

type OperationResponseHeaders struct {
	PrimitiveResponseHeaders `protobuf:"bytes,1,opt,name=session,proto3,embedded=session" json:"session"`
	Status                   OperationResponseHeaders_Status `protobuf:"varint,2,opt,name=status,proto3,enum=atomix.multiraft.v1.OperationResponseHeaders_Status" json:"status,omitempty"`
	Message                  string                          `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *OperationResponseHeaders) Reset()         { *m = OperationResponseHeaders{} }
func (m *OperationResponseHeaders) String() string { return proto.CompactTextString(m) }
func (*OperationResponseHeaders) ProtoMessage()    {}
func (*OperationResponseHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa41837c4ac4528c, []int{7}
}
func (m *OperationResponseHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationResponseHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperationResponseHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperationResponseHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationResponseHeaders.Merge(m, src)
}
func (m *OperationResponseHeaders) XXX_Size() int {
	return m.Size()
}
func (m *OperationResponseHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationResponseHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_OperationResponseHeaders proto.InternalMessageInfo

func (m *OperationResponseHeaders) GetStatus() OperationResponseHeaders_Status {
	if m != nil {
		return m.Status
	}
	return OperationResponseHeaders_OK
}

func (m *OperationResponseHeaders) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CommandRequestHeaders struct {
	OperationRequestHeaders `protobuf:"bytes,1,opt,name=operation,proto3,embedded=operation" json:"operation"`
	SequenceNum             SequenceNum `protobuf:"varint,2,opt,name=sequence_num,json=sequenceNum,proto3,casttype=SequenceNum" json:"sequence_num,omitempty"`
}

func (m *CommandRequestHeaders) Reset()         { *m = CommandRequestHeaders{} }
func (m *CommandRequestHeaders) String() string { return proto.CompactTextString(m) }
func (*CommandRequestHeaders) ProtoMessage()    {}
func (*CommandRequestHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa41837c4ac4528c, []int{8}
}
func (m *CommandRequestHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandRequestHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandRequestHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandRequestHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandRequestHeaders.Merge(m, src)
}
func (m *CommandRequestHeaders) XXX_Size() int {
	return m.Size()
}
func (m *CommandRequestHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandRequestHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_CommandRequestHeaders proto.InternalMessageInfo

func (m *CommandRequestHeaders) GetSequenceNum() SequenceNum {
	if m != nil {
		return m.SequenceNum
	}
	return 0
}

type CommandResponseHeaders struct {
	OperationResponseHeaders `protobuf:"bytes,1,opt,name=operation,proto3,embedded=operation" json:"operation"`
	OutputSequenceNum        SequenceNum `protobuf:"varint,2,opt,name=output_sequence_num,json=outputSequenceNum,proto3,casttype=SequenceNum" json:"output_sequence_num,omitempty"`
}

func (m *CommandResponseHeaders) Reset()         { *m = CommandResponseHeaders{} }
func (m *CommandResponseHeaders) String() string { return proto.CompactTextString(m) }
func (*CommandResponseHeaders) ProtoMessage()    {}
func (*CommandResponseHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa41837c4ac4528c, []int{9}
}
func (m *CommandResponseHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandResponseHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandResponseHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandResponseHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandResponseHeaders.Merge(m, src)
}
func (m *CommandResponseHeaders) XXX_Size() int {
	return m.Size()
}
func (m *CommandResponseHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandResponseHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_CommandResponseHeaders proto.InternalMessageInfo

func (m *CommandResponseHeaders) GetOutputSequenceNum() SequenceNum {
	if m != nil {
		return m.OutputSequenceNum
	}
	return 0
}

type QueryRequestHeaders struct {
	OperationRequestHeaders `protobuf:"bytes,1,opt,name=operation,proto3,embedded=operation" json:"operation"`
	SequenceNum             SequenceNum `protobuf:"varint,2,opt,name=sequence_num,json=sequenceNum,proto3,casttype=SequenceNum" json:"sequence_num,omitempty"`
	MaxReceivedIndex        Index       `protobuf:"varint,3,opt,name=max_received_index,json=maxReceivedIndex,proto3,casttype=Index" json:"max_received_index,omitempty"`
}

func (m *QueryRequestHeaders) Reset()         { *m = QueryRequestHeaders{} }
func (m *QueryRequestHeaders) String() string { return proto.CompactTextString(m) }
func (*QueryRequestHeaders) ProtoMessage()    {}
func (*QueryRequestHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa41837c4ac4528c, []int{10}
}
func (m *QueryRequestHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRequestHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRequestHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRequestHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequestHeaders.Merge(m, src)
}
func (m *QueryRequestHeaders) XXX_Size() int {
	return m.Size()
}
func (m *QueryRequestHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequestHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequestHeaders proto.InternalMessageInfo

func (m *QueryRequestHeaders) GetSequenceNum() SequenceNum {
	if m != nil {
		return m.SequenceNum
	}
	return 0
}

func (m *QueryRequestHeaders) GetMaxReceivedIndex() Index {
	if m != nil {
		return m.MaxReceivedIndex
	}
	return 0
}

type QueryResponseHeaders struct {
	OperationResponseHeaders `protobuf:"bytes,1,opt,name=operation,proto3,embedded=operation" json:"operation"`
}

func (m *QueryResponseHeaders) Reset()         { *m = QueryResponseHeaders{} }
func (m *QueryResponseHeaders) String() string { return proto.CompactTextString(m) }
func (*QueryResponseHeaders) ProtoMessage()    {}
func (*QueryResponseHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa41837c4ac4528c, []int{11}
}
func (m *QueryResponseHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResponseHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResponseHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryResponseHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResponseHeaders.Merge(m, src)
}
func (m *QueryResponseHeaders) XXX_Size() int {
	return m.Size()
}
func (m *QueryResponseHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResponseHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResponseHeaders proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("atomix.multiraft.v1.OperationResponseHeaders_Status", OperationResponseHeaders_Status_name, OperationResponseHeaders_Status_value)
	proto.RegisterType((*PartitionRequestHeaders)(nil), "atomix.multiraft.v1.PartitionRequestHeaders")
	proto.RegisterType((*PartitionResponseHeaders)(nil), "atomix.multiraft.v1.PartitionResponseHeaders")
	proto.RegisterType((*SessionRequestHeaders)(nil), "atomix.multiraft.v1.SessionRequestHeaders")
	proto.RegisterType((*SessionResponseHeaders)(nil), "atomix.multiraft.v1.SessionResponseHeaders")
	proto.RegisterType((*PrimitiveRequestHeaders)(nil), "atomix.multiraft.v1.PrimitiveRequestHeaders")
	proto.RegisterType((*PrimitiveResponseHeaders)(nil), "atomix.multiraft.v1.PrimitiveResponseHeaders")
	proto.RegisterType((*OperationRequestHeaders)(nil), "atomix.multiraft.v1.OperationRequestHeaders")
	proto.RegisterType((*OperationResponseHeaders)(nil), "atomix.multiraft.v1.OperationResponseHeaders")
	proto.RegisterType((*CommandRequestHeaders)(nil), "atomix.multiraft.v1.CommandRequestHeaders")
	proto.RegisterType((*CommandResponseHeaders)(nil), "atomix.multiraft.v1.CommandResponseHeaders")
	proto.RegisterType((*QueryRequestHeaders)(nil), "atomix.multiraft.v1.QueryRequestHeaders")
	proto.RegisterType((*QueryResponseHeaders)(nil), "atomix.multiraft.v1.QueryResponseHeaders")
}

func init() { proto.RegisterFile("atomix/multiraft/v1/headers.proto", fileDescriptor_aa41837c4ac4528c) }

var fileDescriptor_aa41837c4ac4528c = []byte{
	// 779 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0x4b, 0x8f, 0xdb, 0x54,
	0x14, 0x8e, 0x27, 0x4d, 0x32, 0x3e, 0x4e, 0xa6, 0xb7, 0x77, 0xda, 0x4e, 0xd4, 0x45, 0x52, 0xbc,
	0xaa, 0x80, 0x49, 0xd4, 0x01, 0x09, 0x21, 0x16, 0xc8, 0x89, 0x1d, 0xd5, 0xaa, 0xb1, 0xd3, 0x1b,
	0xbb, 0x3c, 0x84, 0x14, 0x99, 0xfa, 0x32, 0x58, 0xc5, 0x71, 0xf0, 0x23, 0x0a, 0xff, 0x82, 0xbf,
	0xc0, 0x8e, 0x05, 0x0b, 0x76, 0xfc, 0x85, 0x59, 0xce, 0x72, 0x56, 0x01, 0x65, 0xfe, 0xc5, 0xac,
	0x90, 0x9f, 0x79, 0x39, 0x33, 0xb0, 0x41, 0xdd, 0xf9, 0x1c, 0x9f, 0xf3, 0x3d, 0x8e, 0xcf, 0xf5,
	0x85, 0xf7, 0xcc, 0xc0, 0x75, 0xec, 0x79, 0xd7, 0x09, 0x7f, 0x0c, 0x6c, 0xcf, 0xfc, 0x3e, 0xe8,
	0xce, 0x9e, 0x77, 0x7f, 0xa0, 0xa6, 0x45, 0x3d, 0xbf, 0x33, 0xf5, 0xdc, 0xc0, 0xc5, 0xc7, 0x49,
	0x49, 0x27, 0x2f, 0xe9, 0xcc, 0x9e, 0x3f, 0x79, 0x78, 0xee, 0x9e, 0xbb, 0xf1, 0xfb, 0x6e, 0xf4,
	0x94, 0x94, 0xf2, 0xdf, 0xc2, 0xc9, 0xd0, 0xf4, 0x02, 0x3b, 0xb0, 0xdd, 0x09, 0xa1, 0x3f, 0x85,
	0xd4, 0x0f, 0x5e, 0x24, 0x58, 0x58, 0x80, 0xfa, 0x34, 0x7b, 0x35, 0xb6, 0xad, 0x26, 0xf3, 0x94,
	0x79, 0xd6, 0xe8, 0xb5, 0x96, 0x8b, 0x36, 0x97, 0xb7, 0xc8, 0xe2, 0xcd, 0x66, 0x48, 0xb8, 0xbc,
	0x47, 0xb6, 0xf8, 0xcf, 0xa0, 0xb9, 0x86, 0xee, 0x4f, 0xdd, 0x89, 0x4f, 0x33, 0xf8, 0x36, 0x54,
	0xec, 0x89, 0x45, 0xe7, 0x31, 0xee, 0xbd, 0x1e, 0x7b, 0xb3, 0x68, 0x57, 0xe4, 0x28, 0x41, 0x92,
	0x3c, 0xff, 0x1b, 0x03, 0x8f, 0x46, 0xd4, 0xf7, 0x77, 0x95, 0xe9, 0xc0, 0xe6, 0x2c, 0x71, 0x3b,
	0x77, 0xf6, 0x61, 0xa7, 0xc0, 0x73, 0x67, 0x8f, 0xb5, 0xde, 0xe1, 0xc5, 0xa2, 0x5d, 0xba, 0x5c,
	0xb4, 0x19, 0xb2, 0x02, 0xc2, 0x9f, 0x02, 0xf8, 0x09, 0x5d, 0xe4, 0xf6, 0x20, 0x56, 0xf5, 0x64,
	0xb9, 0x68, 0xb3, 0xa9, 0x88, 0xd8, 0xeb, 0x2a, 0x20, 0x6c, 0x5a, 0x2d, 0x5b, 0xbc, 0x0b, 0x8f,
	0x73, 0xa5, 0x9b, 0x2e, 0x8d, 0x5d, 0xa9, 0xa7, 0x77, 0x49, 0xdd, 0x40, 0x28, 0xd4, 0xca, 0xff,
	0xce, 0xc0, 0xc9, 0xd0, 0xb3, 0x1d, 0x3b, 0xb0, 0x67, 0x74, 0x6b, 0x3a, 0x2a, 0xd4, 0x52, 0x65,
	0x29, 0xe1, 0xfb, 0x85, 0x84, 0x85, 0xa3, 0x5d, 0x63, 0xcb, 0x40, 0xe2, 0x3d, 0xc8, 0xa8, 0x56,
	0x93, 0x49, 0xf6, 0x20, 0xcb, 0xa7, 0x7b, 0xb0, 0x0a, 0x09, 0x97, 0xf7, 0xc8, 0x16, 0xff, 0x16,
	0x9a, 0x6b, 0x6a, 0x37, 0x27, 0xa4, 0x6d, 0xcb, 0xfd, 0xe0, 0x76, 0xb9, 0xfb, 0xa6, 0x93, 0xa1,
	0xf0, 0x6f, 0xe1, 0x44, 0x9b, 0x52, 0xcf, 0x2c, 0x58, 0xe9, 0xe1, 0x36, 0xd7, 0x9e, 0xb5, 0x29,
	0x9e, 0x6c, 0x11, 0xd9, 0x9f, 0x65, 0x68, 0xae, 0xb1, 0x6d, 0x5a, 0x7b, 0xb5, 0x4d, 0x77, 0x7a,
	0x17, 0xdd, 0x5d, 0xe6, 0xb0, 0x02, 0x55, 0x3f, 0x30, 0x83, 0xd0, 0x8f, 0x3f, 0xc3, 0xd1, 0xd9,
	0xc7, 0x85, 0x88, 0xfb, 0x14, 0x75, 0x46, 0x71, 0x2f, 0x49, 0x31, 0x70, 0x13, 0x6a, 0x0e, 0xf5,
	0x7d, 0xf3, 0x9c, 0x36, 0xcb, 0x4f, 0x99, 0x67, 0x2c, 0xc9, 0x42, 0xfe, 0x2f, 0x06, 0xaa, 0x49,
	0x31, 0xae, 0xc2, 0x81, 0xf6, 0x12, 0x95, 0x30, 0x0b, 0x15, 0x89, 0x10, 0x8d, 0x20, 0x06, 0x73,
	0x50, 0x33, 0xd4, 0x97, 0xaa, 0xf6, 0xa5, 0x8a, 0x0e, 0x70, 0x1d, 0x0e, 0xfb, 0x82, 0xda, 0x97,
	0x14, 0x49, 0x44, 0x65, 0xdc, 0x00, 0x56, 0xd5, 0xf4, 0xf1, 0x40, 0x33, 0x54, 0x11, 0xdd, 0xc3,
	0x18, 0x8e, 0x04, 0x85, 0x48, 0x82, 0xf8, 0xf5, 0x58, 0xfa, 0x4a, 0x1e, 0xe9, 0x23, 0x54, 0xc1,
	0x08, 0xea, 0x86, 0x2a, 0x18, 0xfa, 0x0b, 0x8d, 0xc8, 0xdf, 0x48, 0x22, 0xaa, 0x46, 0x4d, 0x03,
	0x8d, 0xf4, 0x64, 0x51, 0x94, 0x54, 0x54, 0x8b, 0x11, 0x35, 0x75, 0xa0, 0xc8, 0x7d, 0x1d, 0x1d,
	0x46, 0x64, 0xb2, 0xfa, 0x5a, 0x50, 0x64, 0x11, 0xb1, 0xf8, 0x3e, 0x70, 0x86, 0x2a, 0xbc, 0x16,
	0x64, 0x45, 0xe8, 0x29, 0x12, 0x02, 0xfc, 0x00, 0x1a, 0x11, 0xdf, 0xc8, 0x18, 0x0e, 0x35, 0xa2,
	0x4b, 0x22, 0xe2, 0xa2, 0x06, 0x5d, 0xfe, 0x42, 0xd2, 0x0c, 0x1d, 0xd5, 0x23, 0x2c, 0x59, 0xd5,
	0x25, 0xa2, 0x0a, 0x0a, 0x6a, 0x44, 0x1e, 0x06, 0x82, 0xa1, 0xe8, 0xe8, 0x88, 0xff, 0x95, 0x81,
	0x47, 0x7d, 0xd7, 0x71, 0xcc, 0x89, 0xb5, 0xfb, 0x7b, 0x71, 0xb3, 0x01, 0xde, 0xba, 0x27, 0x7b,
	0xd6, 0x6c, 0xfd, 0xc8, 0xe6, 0x40, 0xf8, 0x0c, 0xea, 0x7e, 0x54, 0x36, 0x79, 0x43, 0xc7, 0x93,
	0xd0, 0x49, 0x8f, 0xd1, 0xfd, 0xe8, 0xdc, 0x8c, 0xd2, 0xbc, 0x1a, 0x3a, 0x84, 0xf3, 0x57, 0x01,
	0xff, 0x07, 0x03, 0x8f, 0x73, 0x8d, 0x3b, 0x3f, 0x96, 0x6d, 0x91, 0xa7, 0xff, 0x69, 0x17, 0x8a,
	0x55, 0x7e, 0x0e, 0xc7, 0x6e, 0x18, 0x4c, 0xc3, 0x60, 0xfc, 0x6f, 0xc4, 0x3e, 0x48, 0x6a, 0xd7,
	0x52, 0xfc, 0x15, 0x03, 0xc7, 0xaf, 0x42, 0xea, 0xfd, 0xfc, 0xae, 0x0e, 0x15, 0x7f, 0x02, 0xd8,
	0x31, 0xe7, 0x63, 0x8f, 0xbe, 0xa1, 0xf6, 0x8c, 0x5a, 0xe3, 0xe4, 0x16, 0x2a, 0x6f, 0xdf, 0x42,
	0xc8, 0x31, 0xe7, 0x24, 0xad, 0x89, 0x33, 0xbc, 0x03, 0x0f, 0x53, 0x67, 0xff, 0xc7, 0xa7, 0xe8,
	0x35, 0x2f, 0x96, 0x2d, 0xe6, 0x72, 0xd9, 0x62, 0xfe, 0x5e, 0xb6, 0x98, 0x5f, 0xae, 0x5b, 0xa5,
	0xcb, 0xeb, 0x56, 0xe9, 0xea, 0xba, 0x55, 0xfa, 0xae, 0x1a, 0xdf, 0xdd, 0x1f, 0xfd, 0x13, 0x00,
	0x00, 0xff, 0xff, 0xe8, 0x8e, 0x7c, 0x2e, 0x0b, 0x08, 0x00, 0x00,
}

func (m *PartitionRequestHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionRequestHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionRequestHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PartitionID != 0 {
		i = encodeVarintHeaders(dAtA, i, uint64(m.PartitionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PartitionResponseHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionResponseHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionResponseHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintHeaders(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SessionRequestHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionRequestHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionRequestHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SessionID != 0 {
		i = encodeVarintHeaders(dAtA, i, uint64(m.SessionID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.PartitionRequestHeaders.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHeaders(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SessionResponseHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionResponseHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionResponseHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PartitionResponseHeaders.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHeaders(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PrimitiveRequestHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimitiveRequestHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimitiveRequestHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PrimitiveID != 0 {
		i = encodeVarintHeaders(dAtA, i, uint64(m.PrimitiveID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.SessionRequestHeaders.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHeaders(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PrimitiveResponseHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimitiveResponseHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimitiveResponseHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SessionResponseHeaders.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHeaders(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *OperationRequestHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationRequestHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationRequestHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PrimitiveRequestHeaders.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHeaders(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *OperationResponseHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationResponseHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationResponseHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintHeaders(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintHeaders(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.PrimitiveResponseHeaders.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHeaders(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CommandRequestHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandRequestHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommandRequestHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SequenceNum != 0 {
		i = encodeVarintHeaders(dAtA, i, uint64(m.SequenceNum))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.OperationRequestHeaders.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHeaders(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CommandResponseHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandResponseHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommandResponseHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutputSequenceNum != 0 {
		i = encodeVarintHeaders(dAtA, i, uint64(m.OutputSequenceNum))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.OperationResponseHeaders.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHeaders(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRequestHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequestHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRequestHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxReceivedIndex != 0 {
		i = encodeVarintHeaders(dAtA, i, uint64(m.MaxReceivedIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.SequenceNum != 0 {
		i = encodeVarintHeaders(dAtA, i, uint64(m.SequenceNum))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.OperationRequestHeaders.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHeaders(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryResponseHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResponseHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResponseHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OperationResponseHeaders.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHeaders(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintHeaders(dAtA []byte, offset int, v uint64) int {
	offset -= sovHeaders(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PartitionRequestHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartitionID != 0 {
		n += 1 + sovHeaders(uint64(m.PartitionID))
	}
	return n
}

func (m *PartitionResponseHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovHeaders(uint64(m.Index))
	}
	return n
}

func (m *SessionRequestHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PartitionRequestHeaders.Size()
	n += 1 + l + sovHeaders(uint64(l))
	if m.SessionID != 0 {
		n += 1 + sovHeaders(uint64(m.SessionID))
	}
	return n
}

func (m *SessionResponseHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PartitionResponseHeaders.Size()
	n += 1 + l + sovHeaders(uint64(l))
	return n
}

func (m *PrimitiveRequestHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SessionRequestHeaders.Size()
	n += 1 + l + sovHeaders(uint64(l))
	if m.PrimitiveID != 0 {
		n += 1 + sovHeaders(uint64(m.PrimitiveID))
	}
	return n
}

func (m *PrimitiveResponseHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SessionResponseHeaders.Size()
	n += 1 + l + sovHeaders(uint64(l))
	return n
}

func (m *OperationRequestHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PrimitiveRequestHeaders.Size()
	n += 1 + l + sovHeaders(uint64(l))
	return n
}

func (m *OperationResponseHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PrimitiveResponseHeaders.Size()
	n += 1 + l + sovHeaders(uint64(l))
	if m.Status != 0 {
		n += 1 + sovHeaders(uint64(m.Status))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovHeaders(uint64(l))
	}
	return n
}

func (m *CommandRequestHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OperationRequestHeaders.Size()
	n += 1 + l + sovHeaders(uint64(l))
	if m.SequenceNum != 0 {
		n += 1 + sovHeaders(uint64(m.SequenceNum))
	}
	return n
}

func (m *CommandResponseHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OperationResponseHeaders.Size()
	n += 1 + l + sovHeaders(uint64(l))
	if m.OutputSequenceNum != 0 {
		n += 1 + sovHeaders(uint64(m.OutputSequenceNum))
	}
	return n
}

func (m *QueryRequestHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OperationRequestHeaders.Size()
	n += 1 + l + sovHeaders(uint64(l))
	if m.SequenceNum != 0 {
		n += 1 + sovHeaders(uint64(m.SequenceNum))
	}
	if m.MaxReceivedIndex != 0 {
		n += 1 + sovHeaders(uint64(m.MaxReceivedIndex))
	}
	return n
}

func (m *QueryResponseHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OperationResponseHeaders.Size()
	n += 1 + l + sovHeaders(uint64(l))
	return n
}

func sovHeaders(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHeaders(x uint64) (n int) {
	return sovHeaders(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PartitionRequestHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeaders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionRequestHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionRequestHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionID", wireType)
			}
			m.PartitionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionID |= PartitionID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeaders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeaders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionResponseHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeaders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionResponseHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionResponseHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeaders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeaders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionRequestHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeaders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionRequestHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionRequestHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionRequestHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeaders
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeaders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PartitionRequestHeaders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			m.SessionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionID |= SessionID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeaders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeaders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionResponseHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeaders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionResponseHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionResponseHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionResponseHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeaders
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeaders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PartitionResponseHeaders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeaders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeaders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrimitiveRequestHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeaders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimitiveRequestHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimitiveRequestHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionRequestHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeaders
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeaders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SessionRequestHeaders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimitiveID", wireType)
			}
			m.PrimitiveID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimitiveID |= PrimitiveID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeaders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeaders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrimitiveResponseHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeaders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimitiveResponseHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimitiveResponseHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionResponseHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeaders
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeaders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SessionResponseHeaders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeaders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeaders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationRequestHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeaders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationRequestHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationRequestHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimitiveRequestHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeaders
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeaders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrimitiveRequestHeaders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeaders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeaders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationResponseHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeaders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationResponseHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationResponseHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimitiveResponseHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeaders
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeaders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrimitiveResponseHeaders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= OperationResponseHeaders_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeaders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeaders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeaders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeaders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandRequestHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeaders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandRequestHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandRequestHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationRequestHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeaders
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeaders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OperationRequestHeaders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNum", wireType)
			}
			m.SequenceNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNum |= SequenceNum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeaders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeaders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandResponseHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeaders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandResponseHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandResponseHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationResponseHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeaders
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeaders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OperationResponseHeaders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputSequenceNum", wireType)
			}
			m.OutputSequenceNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputSequenceNum |= SequenceNum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeaders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeaders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRequestHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeaders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequestHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequestHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationRequestHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeaders
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeaders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OperationRequestHeaders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNum", wireType)
			}
			m.SequenceNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNum |= SequenceNum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReceivedIndex", wireType)
			}
			m.MaxReceivedIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxReceivedIndex |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeaders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeaders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResponseHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeaders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResponseHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResponseHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationResponseHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeaders
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeaders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OperationResponseHeaders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeaders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeaders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHeaders(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHeaders
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHeaders
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHeaders
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHeaders
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHeaders        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHeaders          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHeaders = fmt.Errorf("proto: unexpected end of group")
)
