// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/multiraft/v1/node.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type JoinPartitionRequest struct {
	PartitionID PartitionID `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3,casttype=PartitionID" json:"partition_id,omitempty"`
}

func (m *JoinPartitionRequest) Reset()         { *m = JoinPartitionRequest{} }
func (m *JoinPartitionRequest) String() string { return proto.CompactTextString(m) }
func (*JoinPartitionRequest) ProtoMessage()    {}
func (*JoinPartitionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a174c3980109d8, []int{0}
}
func (m *JoinPartitionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinPartitionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinPartitionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoinPartitionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinPartitionRequest.Merge(m, src)
}
func (m *JoinPartitionRequest) XXX_Size() int {
	return m.Size()
}
func (m *JoinPartitionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinPartitionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JoinPartitionRequest proto.InternalMessageInfo

func (m *JoinPartitionRequest) GetPartitionID() PartitionID {
	if m != nil {
		return m.PartitionID
	}
	return 0
}

type JoinPartitionResponse struct {
}

func (m *JoinPartitionResponse) Reset()         { *m = JoinPartitionResponse{} }
func (m *JoinPartitionResponse) String() string { return proto.CompactTextString(m) }
func (*JoinPartitionResponse) ProtoMessage()    {}
func (*JoinPartitionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a174c3980109d8, []int{1}
}
func (m *JoinPartitionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinPartitionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinPartitionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoinPartitionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinPartitionResponse.Merge(m, src)
}
func (m *JoinPartitionResponse) XXX_Size() int {
	return m.Size()
}
func (m *JoinPartitionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinPartitionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JoinPartitionResponse proto.InternalMessageInfo

type LeavePartitionRequest struct {
	PartitionID PartitionID `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3,casttype=PartitionID" json:"partition_id,omitempty"`
}

func (m *LeavePartitionRequest) Reset()         { *m = LeavePartitionRequest{} }
func (m *LeavePartitionRequest) String() string { return proto.CompactTextString(m) }
func (*LeavePartitionRequest) ProtoMessage()    {}
func (*LeavePartitionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a174c3980109d8, []int{2}
}
func (m *LeavePartitionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeavePartitionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeavePartitionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeavePartitionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeavePartitionRequest.Merge(m, src)
}
func (m *LeavePartitionRequest) XXX_Size() int {
	return m.Size()
}
func (m *LeavePartitionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LeavePartitionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LeavePartitionRequest proto.InternalMessageInfo

func (m *LeavePartitionRequest) GetPartitionID() PartitionID {
	if m != nil {
		return m.PartitionID
	}
	return 0
}

type LeavePartitionResponse struct {
}

func (m *LeavePartitionResponse) Reset()         { *m = LeavePartitionResponse{} }
func (m *LeavePartitionResponse) String() string { return proto.CompactTextString(m) }
func (*LeavePartitionResponse) ProtoMessage()    {}
func (*LeavePartitionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65a174c3980109d8, []int{3}
}
func (m *LeavePartitionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeavePartitionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeavePartitionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeavePartitionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeavePartitionResponse.Merge(m, src)
}
func (m *LeavePartitionResponse) XXX_Size() int {
	return m.Size()
}
func (m *LeavePartitionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LeavePartitionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LeavePartitionResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*JoinPartitionRequest)(nil), "atomix.multiraft.v1.JoinPartitionRequest")
	proto.RegisterType((*JoinPartitionResponse)(nil), "atomix.multiraft.v1.JoinPartitionResponse")
	proto.RegisterType((*LeavePartitionRequest)(nil), "atomix.multiraft.v1.LeavePartitionRequest")
	proto.RegisterType((*LeavePartitionResponse)(nil), "atomix.multiraft.v1.LeavePartitionResponse")
}

func init() { proto.RegisterFile("atomix/multiraft/v1/node.proto", fileDescriptor_65a174c3980109d8) }

var fileDescriptor_65a174c3980109d8 = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4b, 0x2c, 0xc9, 0xcf,
	0xcd, 0xac, 0xd0, 0xcf, 0x2d, 0xcd, 0x29, 0xc9, 0x2c, 0x4a, 0x4c, 0x2b, 0xd1, 0x2f, 0x33, 0xd4,
	0xcf, 0xcb, 0x4f, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x86, 0xc8, 0xeb, 0xc1,
	0xe5, 0xf5, 0xca, 0x0c, 0xa5, 0x44, 0xd2, 0xf3, 0xd3, 0xf3, 0xc1, 0xf2, 0xfa, 0x20, 0x16, 0x44,
	0xa9, 0x94, 0x22, 0x36, 0xa3, 0x32, 0x52, 0x13, 0x53, 0x52, 0x8b, 0x8a, 0xa1, 0x4a, 0x64, 0xb1,
	0x29, 0x49, 0x2b, 0xce, 0x85, 0x48, 0x2b, 0x45, 0x72, 0x89, 0x78, 0xe5, 0x67, 0xe6, 0x05, 0x24,
	0x16, 0x95, 0x64, 0x96, 0x64, 0xe6, 0xe7, 0x05, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x39,
	0x72, 0xf1, 0x14, 0xc0, 0xc4, 0xe2, 0x33, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x78, 0x9d, 0xe4,
	0x1e, 0xdd, 0x93, 0xe7, 0x86, 0xab, 0xf5, 0x74, 0xf9, 0x85, 0xca, 0x0d, 0xe2, 0x86, 0xeb, 0xf1,
	0x4c, 0x51, 0x12, 0xe7, 0x12, 0x45, 0x33, 0xba, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x29, 0x8a,
	0x4b, 0xd4, 0x27, 0x35, 0xb1, 0x2c, 0x95, 0x16, 0x96, 0x4a, 0x70, 0x89, 0xa1, 0x9b, 0x0d, 0xb1,
	0xd5, 0xe8, 0x26, 0x23, 0x17, 0x8b, 0x5f, 0x7e, 0x4a, 0xaa, 0x50, 0x1a, 0x17, 0x2f, 0x8a, 0xbb,
	0x84, 0x34, 0xf5, 0xb0, 0x84, 0xb8, 0x1e, 0xb6, 0x60, 0x91, 0xd2, 0x22, 0x46, 0x29, 0xc4, 0x42,
	0xa1, 0x4c, 0x2e, 0x3e, 0x54, 0xa7, 0x08, 0x61, 0xd7, 0x8d, 0x35, 0x2c, 0xa4, 0xb4, 0x89, 0x52,
	0x0b, 0xb1, 0xca, 0x49, 0xe2, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92,
	0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0x92, 0xd8,
	0xc0, 0xd1, 0x6c, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x16, 0x8c, 0xca, 0x75, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeClient interface {
	JoinPartition(ctx context.Context, in *JoinPartitionRequest, opts ...grpc.CallOption) (*JoinPartitionResponse, error)
	LeavePartition(ctx context.Context, in *LeavePartitionRequest, opts ...grpc.CallOption) (*LeavePartitionResponse, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) JoinPartition(ctx context.Context, in *JoinPartitionRequest, opts ...grpc.CallOption) (*JoinPartitionResponse, error) {
	out := new(JoinPartitionResponse)
	err := c.cc.Invoke(ctx, "/atomix.multiraft.v1.Node/JoinPartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) LeavePartition(ctx context.Context, in *LeavePartitionRequest, opts ...grpc.CallOption) (*LeavePartitionResponse, error) {
	out := new(LeavePartitionResponse)
	err := c.cc.Invoke(ctx, "/atomix.multiraft.v1.Node/LeavePartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
type NodeServer interface {
	JoinPartition(context.Context, *JoinPartitionRequest) (*JoinPartitionResponse, error)
	LeavePartition(context.Context, *LeavePartitionRequest) (*LeavePartitionResponse, error)
}

// UnimplementedNodeServer can be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (*UnimplementedNodeServer) JoinPartition(ctx context.Context, req *JoinPartitionRequest) (*JoinPartitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinPartition not implemented")
}
func (*UnimplementedNodeServer) LeavePartition(ctx context.Context, req *LeavePartitionRequest) (*LeavePartitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeavePartition not implemented")
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_JoinPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinPartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).JoinPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.multiraft.v1.Node/JoinPartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).JoinPartition(ctx, req.(*JoinPartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_LeavePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeavePartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).LeavePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.multiraft.v1.Node/LeavePartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).LeavePartition(ctx, req.(*LeavePartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "atomix.multiraft.v1.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinPartition",
			Handler:    _Node_JoinPartition_Handler,
		},
		{
			MethodName: "LeavePartition",
			Handler:    _Node_LeavePartition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "atomix/multiraft/v1/node.proto",
}

func (m *JoinPartitionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinPartitionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinPartitionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PartitionID != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.PartitionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *JoinPartitionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinPartitionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinPartitionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LeavePartitionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeavePartitionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeavePartitionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PartitionID != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.PartitionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LeavePartitionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeavePartitionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeavePartitionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintNode(dAtA []byte, offset int, v uint64) int {
	offset -= sovNode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *JoinPartitionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartitionID != 0 {
		n += 1 + sovNode(uint64(m.PartitionID))
	}
	return n
}

func (m *JoinPartitionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LeavePartitionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartitionID != 0 {
		n += 1 + sovNode(uint64(m.PartitionID))
	}
	return n
}

func (m *LeavePartitionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovNode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNode(x uint64) (n int) {
	return sovNode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *JoinPartitionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinPartitionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinPartitionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionID", wireType)
			}
			m.PartitionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionID |= PartitionID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinPartitionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinPartitionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinPartitionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeavePartitionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeavePartitionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeavePartitionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionID", wireType)
			}
			m.PartitionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionID |= PartitionID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeavePartitionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeavePartitionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeavePartitionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNode = fmt.Errorf("proto: unexpected end of group")
)
