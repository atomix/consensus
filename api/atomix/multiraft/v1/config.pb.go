// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/multiraft/v1/config.proto

package v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MemberConfig_Role int32

const (
	MemberConfig_UNKNOWN  MemberConfig_Role = 0
	MemberConfig_MEMBER   MemberConfig_Role = 1
	MemberConfig_OBSERVER MemberConfig_Role = 2
	MemberConfig_WITNESS  MemberConfig_Role = 3
)

var MemberConfig_Role_name = map[int32]string{
	0: "UNKNOWN",
	1: "MEMBER",
	2: "OBSERVER",
	3: "WITNESS",
}

var MemberConfig_Role_value = map[string]int32{
	"UNKNOWN":  0,
	"MEMBER":   1,
	"OBSERVER": 2,
	"WITNESS":  3,
}

func (x MemberConfig_Role) String() string {
	return proto.EnumName(MemberConfig_Role_name, int32(x))
}

func (MemberConfig_Role) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_74a583683aac86e1, []int{3, 0}
}

type MultiRaftConfig struct {
	HeartbeatPeriod         *time.Duration `protobuf:"bytes,1,opt,name=heartbeat_period,json=heartbeatPeriod,proto3,stdduration" json:"heartbeat_period,omitempty"`
	ElectionTimeout         *time.Duration `protobuf:"bytes,2,opt,name=election_timeout,json=electionTimeout,proto3,stdduration" json:"election_timeout,omitempty"`
	SnapshotEntryThreshold  uint64         `protobuf:"varint,3,opt,name=snapshot_entry_threshold,json=snapshotEntryThreshold,proto3" json:"snapshot_entry_threshold,omitempty"`
	CompactionRetainEntries uint64         `protobuf:"varint,4,opt,name=compaction_retain_entries,json=compactionRetainEntries,proto3" json:"compaction_retain_entries,omitempty"`
}

func (m *MultiRaftConfig) Reset()         { *m = MultiRaftConfig{} }
func (m *MultiRaftConfig) String() string { return proto.CompactTextString(m) }
func (*MultiRaftConfig) ProtoMessage()    {}
func (*MultiRaftConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_74a583683aac86e1, []int{0}
}
func (m *MultiRaftConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiRaftConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiRaftConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiRaftConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiRaftConfig.Merge(m, src)
}
func (m *MultiRaftConfig) XXX_Size() int {
	return m.Size()
}
func (m *MultiRaftConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiRaftConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MultiRaftConfig proto.InternalMessageInfo

func (m *MultiRaftConfig) GetHeartbeatPeriod() *time.Duration {
	if m != nil {
		return m.HeartbeatPeriod
	}
	return nil
}

func (m *MultiRaftConfig) GetElectionTimeout() *time.Duration {
	if m != nil {
		return m.ElectionTimeout
	}
	return nil
}

func (m *MultiRaftConfig) GetSnapshotEntryThreshold() uint64 {
	if m != nil {
		return m.SnapshotEntryThreshold
	}
	return 0
}

func (m *MultiRaftConfig) GetCompactionRetainEntries() uint64 {
	if m != nil {
		return m.CompactionRetainEntries
	}
	return 0
}

type ClusterConfig struct {
	Partitions []PartitionConfig `protobuf:"bytes,1,rep,name=partitions,proto3" json:"partitions"`
}

func (m *ClusterConfig) Reset()         { *m = ClusterConfig{} }
func (m *ClusterConfig) String() string { return proto.CompactTextString(m) }
func (*ClusterConfig) ProtoMessage()    {}
func (*ClusterConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_74a583683aac86e1, []int{1}
}
func (m *ClusterConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterConfig.Merge(m, src)
}
func (m *ClusterConfig) XXX_Size() int {
	return m.Size()
}
func (m *ClusterConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterConfig proto.InternalMessageInfo

func (m *ClusterConfig) GetPartitions() []PartitionConfig {
	if m != nil {
		return m.Partitions
	}
	return nil
}

type PartitionConfig struct {
	PartitionID PartitionID    `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3,casttype=PartitionID" json:"partition_id,omitempty"`
	Members     []MemberConfig `protobuf:"bytes,2,rep,name=members,proto3" json:"members"`
}

func (m *PartitionConfig) Reset()         { *m = PartitionConfig{} }
func (m *PartitionConfig) String() string { return proto.CompactTextString(m) }
func (*PartitionConfig) ProtoMessage()    {}
func (*PartitionConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_74a583683aac86e1, []int{2}
}
func (m *PartitionConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartitionConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartitionConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionConfig.Merge(m, src)
}
func (m *PartitionConfig) XXX_Size() int {
	return m.Size()
}
func (m *PartitionConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionConfig proto.InternalMessageInfo

func (m *PartitionConfig) GetPartitionID() PartitionID {
	if m != nil {
		return m.PartitionID
	}
	return 0
}

func (m *PartitionConfig) GetMembers() []MemberConfig {
	if m != nil {
		return m.Members
	}
	return nil
}

type MemberConfig struct {
	NodeID NodeID            `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3,casttype=NodeID" json:"node_id,omitempty"`
	Host   string            `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port   int32             `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Role   MemberConfig_Role `protobuf:"varint,4,opt,name=role,proto3,enum=atomix.multiraft.v1.MemberConfig_Role" json:"role,omitempty"`
}

func (m *MemberConfig) Reset()         { *m = MemberConfig{} }
func (m *MemberConfig) String() string { return proto.CompactTextString(m) }
func (*MemberConfig) ProtoMessage()    {}
func (*MemberConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_74a583683aac86e1, []int{3}
}
func (m *MemberConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemberConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemberConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemberConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberConfig.Merge(m, src)
}
func (m *MemberConfig) XXX_Size() int {
	return m.Size()
}
func (m *MemberConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MemberConfig proto.InternalMessageInfo

func (m *MemberConfig) GetNodeID() NodeID {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *MemberConfig) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *MemberConfig) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *MemberConfig) GetRole() MemberConfig_Role {
	if m != nil {
		return m.Role
	}
	return MemberConfig_UNKNOWN
}

func init() {
	proto.RegisterEnum("atomix.multiraft.v1.MemberConfig_Role", MemberConfig_Role_name, MemberConfig_Role_value)
	proto.RegisterType((*MultiRaftConfig)(nil), "atomix.multiraft.v1.MultiRaftConfig")
	proto.RegisterType((*ClusterConfig)(nil), "atomix.multiraft.v1.ClusterConfig")
	proto.RegisterType((*PartitionConfig)(nil), "atomix.multiraft.v1.PartitionConfig")
	proto.RegisterType((*MemberConfig)(nil), "atomix.multiraft.v1.MemberConfig")
}

func init() { proto.RegisterFile("atomix/multiraft/v1/config.proto", fileDescriptor_74a583683aac86e1) }

var fileDescriptor_74a583683aac86e1 = []byte{
	// 531 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x73, 0xa9, 0x49, 0xe0, 0x92, 0x92, 0xe8, 0xa8, 0xc0, 0xed, 0xe0, 0x84, 0x08, 0xa1,
	0x2c, 0xd8, 0x6a, 0x58, 0x50, 0xb6, 0xba, 0xf5, 0x10, 0x50, 0xd2, 0xea, 0x12, 0xe8, 0xc0, 0x10,
	0x39, 0xf1, 0x25, 0xb1, 0x64, 0xfb, 0x59, 0xe7, 0x4b, 0x05, 0xdf, 0x82, 0x0d, 0x36, 0xbe, 0x4e,
	0xc7, 0x8e, 0x2c, 0x04, 0xe4, 0x7c, 0x0b, 0x26, 0xe4, 0xbb, 0xda, 0xb4, 0xa8, 0x12, 0x6c, 0xef,
	0xee, 0xff, 0xfb, 0xbf, 0xf7, 0xd7, 0xbd, 0xc3, 0x6d, 0x57, 0x40, 0xe8, 0x7f, 0xb0, 0xc2, 0x75,
	0x20, 0x7c, 0xee, 0x2e, 0x84, 0x75, 0x71, 0x68, 0xcd, 0x21, 0x5a, 0xf8, 0x4b, 0x33, 0xe6, 0x20,
	0x80, 0x3c, 0x52, 0x84, 0x59, 0x10, 0xe6, 0xc5, 0xe1, 0x81, 0xb1, 0x04, 0x58, 0x06, 0xcc, 0x92,
	0xc8, 0x6c, 0xbd, 0xb0, 0xbc, 0x35, 0x77, 0x85, 0x0f, 0x91, 0x32, 0x1d, 0xec, 0x2d, 0x61, 0x09,
	0xb2, 0xb4, 0xb2, 0x4a, 0xdd, 0x76, 0xbe, 0x96, 0x71, 0x63, 0x98, 0xb5, 0xa1, 0xee, 0x42, 0x1c,
	0xcb, 0x21, 0xe4, 0x35, 0x6e, 0xae, 0x98, 0xcb, 0xc5, 0x8c, 0xb9, 0x62, 0x1a, 0x33, 0xee, 0x83,
	0xa7, 0xa3, 0x36, 0xea, 0xd6, 0x7a, 0xfb, 0xa6, 0x1a, 0x62, 0xe6, 0x43, 0xcc, 0x93, 0xeb, 0x21,
	0xb6, 0xf6, 0xe5, 0x47, 0x0b, 0xd1, 0x46, 0x61, 0x3c, 0x93, 0xbe, 0xac, 0x17, 0x0b, 0xd8, 0x3c,
	0x43, 0xa6, 0xc2, 0x0f, 0x19, 0xac, 0x85, 0x5e, 0xfe, 0xcf, 0x5e, 0xb9, 0x71, 0xa2, 0x7c, 0xe4,
	0x15, 0xd6, 0x93, 0xc8, 0x8d, 0x93, 0x15, 0x88, 0x29, 0x8b, 0x04, 0xff, 0x38, 0x15, 0x2b, 0xce,
	0x92, 0x15, 0x04, 0x9e, 0xbe, 0xd3, 0x46, 0x5d, 0x8d, 0x3e, 0xce, 0x75, 0x27, 0x93, 0x27, 0xb9,
	0x4a, 0xfa, 0x78, 0x7f, 0x0e, 0x61, 0xec, 0xaa, 0x1c, 0x9c, 0x09, 0xd7, 0x8f, 0x64, 0x0b, 0x9f,
	0x25, 0xba, 0x26, 0xad, 0x4f, 0xfe, 0x00, 0x54, 0xea, 0x8e, 0x92, 0x3b, 0xef, 0xf1, 0xee, 0x71,
	0xb0, 0x4e, 0x04, 0xe3, 0xc5, 0xf3, 0xe0, 0xd8, 0xe5, 0xc2, 0xcf, 0xd0, 0x44, 0x47, 0xed, 0x9d,
	0x6e, 0xad, 0xf7, 0xcc, 0xbc, 0x63, 0x25, 0xe6, 0x59, 0x8e, 0x29, 0xa7, 0xad, 0x5d, 0x6e, 0x5a,
	0x25, 0x7a, 0xc3, 0xdd, 0xf9, 0x8c, 0x70, 0xe3, 0x2f, 0x8a, 0x1c, 0xe1, 0x7a, 0x41, 0x4c, 0x7d,
	0xf5, 0xf4, 0xbb, 0xb6, 0x91, 0x6e, 0x5a, 0xb5, 0x02, 0x1d, 0x9c, 0xfc, 0xba, 0x7d, 0xa4, 0xb5,
	0xc2, 0x33, 0xf0, 0xc8, 0x11, 0xae, 0x86, 0x2c, 0x9c, 0x31, 0x9e, 0xe8, 0x65, 0x99, 0xef, 0xe9,
	0x9d, 0xf9, 0x86, 0x92, 0xb9, 0x15, 0x2e, 0xf7, 0x75, 0xbe, 0x23, 0x5c, 0xbf, 0xa9, 0x93, 0x17,
	0xb8, 0x1a, 0x81, 0xc7, 0xf2, 0x44, 0x9a, 0xbd, 0x97, 0x6e, 0x5a, 0x95, 0x11, 0x78, 0x4c, 0x86,
	0xb9, 0xae, 0x68, 0x25, 0x83, 0x06, 0x1e, 0x21, 0x58, 0x5b, 0x41, 0xa2, 0x96, 0xfd, 0x80, 0xca,
	0x3a, 0xbb, 0x8b, 0x81, 0x0b, 0xb9, 0xac, 0x7b, 0x54, 0xd6, 0xa4, 0x8f, 0x35, 0x0e, 0x01, 0x93,
	0x5b, 0x78, 0xd8, 0x7b, 0xfe, 0xcf, 0x9c, 0x26, 0x85, 0x80, 0x51, 0xe9, 0xe9, 0xf4, 0xb1, 0x96,
	0x9d, 0x48, 0x0d, 0x57, 0xdf, 0x8e, 0xde, 0x8c, 0x4e, 0xcf, 0x47, 0xcd, 0x12, 0xc1, 0xb8, 0x32,
	0x74, 0x86, 0xb6, 0x43, 0x9b, 0x88, 0xd4, 0xf1, 0xfd, 0x53, 0x7b, 0xec, 0xd0, 0x77, 0x0e, 0x6d,
	0x96, 0x33, 0xec, 0x7c, 0x30, 0x19, 0x39, 0xe3, 0x71, 0x73, 0xc7, 0xd6, 0x2f, 0x53, 0x03, 0x5d,
	0xa5, 0x06, 0xfa, 0x99, 0x1a, 0xe8, 0xd3, 0xd6, 0x28, 0x5d, 0x6d, 0x8d, 0xd2, 0xb7, 0xad, 0x51,
	0x9a, 0x55, 0xe4, 0x87, 0x7c, 0xf9, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x49, 0xea, 0xbd, 0x88,
	0x03, 0x00, 0x00,
}

func (m *MultiRaftConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiRaftConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiRaftConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CompactionRetainEntries != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.CompactionRetainEntries))
		i--
		dAtA[i] = 0x20
	}
	if m.SnapshotEntryThreshold != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.SnapshotEntryThreshold))
		i--
		dAtA[i] = 0x18
	}
	if m.ElectionTimeout != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.ElectionTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ElectionTimeout):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintConfig(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x12
	}
	if m.HeartbeatPeriod != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.HeartbeatPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.HeartbeatPeriod):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintConfig(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClusterConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Partitions) > 0 {
		for iNdEx := len(m.Partitions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Partitions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConfig(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PartitionConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConfig(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.PartitionID != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.PartitionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MemberConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemberConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Role != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x20
	}
	if m.Port != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0x12
	}
	if m.NodeID != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MultiRaftConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HeartbeatPeriod != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.HeartbeatPeriod)
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.ElectionTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ElectionTimeout)
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.SnapshotEntryThreshold != 0 {
		n += 1 + sovConfig(uint64(m.SnapshotEntryThreshold))
	}
	if m.CompactionRetainEntries != 0 {
		n += 1 + sovConfig(uint64(m.CompactionRetainEntries))
	}
	return n
}

func (m *ClusterConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Partitions) > 0 {
		for _, e := range m.Partitions {
			l = e.Size()
			n += 1 + l + sovConfig(uint64(l))
		}
	}
	return n
}

func (m *PartitionConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartitionID != 0 {
		n += 1 + sovConfig(uint64(m.PartitionID))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovConfig(uint64(l))
		}
	}
	return n
}

func (m *MemberConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovConfig(uint64(m.NodeID))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovConfig(uint64(m.Port))
	}
	if m.Role != 0 {
		n += 1 + sovConfig(uint64(m.Role))
	}
	return n
}

func sovConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MultiRaftConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiRaftConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiRaftConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeartbeatPeriod == nil {
				m.HeartbeatPeriod = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.HeartbeatPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElectionTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ElectionTimeout == nil {
				m.ElectionTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.ElectionTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotEntryThreshold", wireType)
			}
			m.SnapshotEntryThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnapshotEntryThreshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompactionRetainEntries", wireType)
			}
			m.CompactionRetainEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompactionRetainEntries |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Partitions = append(m.Partitions, PartitionConfig{})
			if err := m.Partitions[len(m.Partitions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionID", wireType)
			}
			m.PartitionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionID |= PartitionID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, MemberConfig{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= NodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= MemberConfig_Role(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConfig = fmt.Errorf("proto: unexpected end of group")
)
