// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/atomix/multi-raft-storage/node/pkg/statemachine/session (interfaces: PrimitiveManager,Context,CreatePrimitiveProposal,ClosePrimitiveProposal,PrimitiveProposal,PrimitiveQuery)

// Package session is a generated GoMock package.
package session

import (
	v1 "github.com/atomix/multi-raft-storage/api/atomix/multiraft/v1"
	statemachine "github.com/atomix/multi-raft-storage/node/pkg/statemachine"
	snapshot "github.com/atomix/multi-raft-storage/node/pkg/statemachine/snapshot"
	logging "github.com/atomix/runtime/sdk/pkg/logging"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockPrimitiveManager is a mock of PrimitiveManager interface.
type MockPrimitiveManager struct {
	ctrl     *gomock.Controller
	recorder *MockPrimitiveManagerMockRecorder
}

// MockPrimitiveManagerMockRecorder is the mock recorder for MockPrimitiveManager.
type MockPrimitiveManagerMockRecorder struct {
	mock *MockPrimitiveManager
}

// NewMockPrimitiveManager creates a new mock instance.
func NewMockPrimitiveManager(ctrl *gomock.Controller) *MockPrimitiveManager {
	mock := &MockPrimitiveManager{ctrl: ctrl}
	mock.recorder = &MockPrimitiveManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrimitiveManager) EXPECT() *MockPrimitiveManagerMockRecorder {
	return m.recorder
}

// ClosePrimitive mocks base method.
func (m *MockPrimitiveManager) ClosePrimitive(arg0 ClosePrimitiveProposal) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClosePrimitive", arg0)
}

// ClosePrimitive indicates an expected call of ClosePrimitive.
func (mr *MockPrimitiveManagerMockRecorder) ClosePrimitive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClosePrimitive", reflect.TypeOf((*MockPrimitiveManager)(nil).ClosePrimitive), arg0)
}

// CreatePrimitive mocks base method.
func (m *MockPrimitiveManager) CreatePrimitive(arg0 CreatePrimitiveProposal) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreatePrimitive", arg0)
}

// CreatePrimitive indicates an expected call of CreatePrimitive.
func (mr *MockPrimitiveManagerMockRecorder) CreatePrimitive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrimitive", reflect.TypeOf((*MockPrimitiveManager)(nil).CreatePrimitive), arg0)
}

// Propose mocks base method.
func (m *MockPrimitiveManager) Propose(arg0 PrimitiveProposal) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Propose", arg0)
}

// Propose indicates an expected call of Propose.
func (mr *MockPrimitiveManagerMockRecorder) Propose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Propose", reflect.TypeOf((*MockPrimitiveManager)(nil).Propose), arg0)
}

// Query mocks base method.
func (m *MockPrimitiveManager) Query(arg0 PrimitiveQuery) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Query", arg0)
}

// Query indicates an expected call of Query.
func (mr *MockPrimitiveManagerMockRecorder) Query(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockPrimitiveManager)(nil).Query), arg0)
}

// Recover mocks base method.
func (m *MockPrimitiveManager) Recover(arg0 *snapshot.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recover", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Recover indicates an expected call of Recover.
func (mr *MockPrimitiveManagerMockRecorder) Recover(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recover", reflect.TypeOf((*MockPrimitiveManager)(nil).Recover), arg0)
}

// Snapshot mocks base method.
func (m *MockPrimitiveManager) Snapshot(arg0 *snapshot.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockPrimitiveManagerMockRecorder) Snapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockPrimitiveManager)(nil).Snapshot), arg0)
}

// MockContext is a mock of Context interface.
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext.
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance.
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// Index mocks base method.
func (m *MockContext) Index() statemachine.Index {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index")
	ret0, _ := ret[0].(statemachine.Index)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockContextMockRecorder) Index() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockContext)(nil).Index))
}

// Log mocks base method.
func (m *MockContext) Log() logging.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// Log indicates an expected call of Log.
func (mr *MockContextMockRecorder) Log() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockContext)(nil).Log))
}

// Proposals mocks base method.
func (m *MockContext) Proposals() Proposals {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Proposals")
	ret0, _ := ret[0].(Proposals)
	return ret0
}

// Proposals indicates an expected call of Proposals.
func (mr *MockContextMockRecorder) Proposals() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proposals", reflect.TypeOf((*MockContext)(nil).Proposals))
}

// Scheduler mocks base method.
func (m *MockContext) Scheduler() statemachine.Scheduler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scheduler")
	ret0, _ := ret[0].(statemachine.Scheduler)
	return ret0
}

// Scheduler indicates an expected call of Scheduler.
func (mr *MockContextMockRecorder) Scheduler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scheduler", reflect.TypeOf((*MockContext)(nil).Scheduler))
}

// Sessions mocks base method.
func (m *MockContext) Sessions() Sessions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sessions")
	ret0, _ := ret[0].(Sessions)
	return ret0
}

// Sessions indicates an expected call of Sessions.
func (mr *MockContextMockRecorder) Sessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sessions", reflect.TypeOf((*MockContext)(nil).Sessions))
}

// Time mocks base method.
func (m *MockContext) Time() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Time")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Time indicates an expected call of Time.
func (mr *MockContextMockRecorder) Time() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Time", reflect.TypeOf((*MockContext)(nil).Time))
}

// MockCreatePrimitiveProposal is a mock of CreatePrimitiveProposal interface.
type MockCreatePrimitiveProposal struct {
	ctrl     *gomock.Controller
	recorder *MockCreatePrimitiveProposalMockRecorder
}

// MockCreatePrimitiveProposalMockRecorder is the mock recorder for MockCreatePrimitiveProposal.
type MockCreatePrimitiveProposalMockRecorder struct {
	mock *MockCreatePrimitiveProposal
}

// NewMockCreatePrimitiveProposal creates a new mock instance.
func NewMockCreatePrimitiveProposal(ctrl *gomock.Controller) *MockCreatePrimitiveProposal {
	mock := &MockCreatePrimitiveProposal{ctrl: ctrl}
	mock.recorder = &MockCreatePrimitiveProposalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreatePrimitiveProposal) EXPECT() *MockCreatePrimitiveProposalMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockCreatePrimitiveProposal) Cancel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cancel")
}

// Cancel indicates an expected call of Cancel.
func (mr *MockCreatePrimitiveProposalMockRecorder) Cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockCreatePrimitiveProposal)(nil).Cancel))
}

// Close mocks base method.
func (m *MockCreatePrimitiveProposal) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockCreatePrimitiveProposalMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCreatePrimitiveProposal)(nil).Close))
}

// Error mocks base method.
func (m *MockCreatePrimitiveProposal) Error(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", arg0)
}

// Error indicates an expected call of Error.
func (mr *MockCreatePrimitiveProposalMockRecorder) Error(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockCreatePrimitiveProposal)(nil).Error), arg0)
}

// ID mocks base method.
func (m *MockCreatePrimitiveProposal) ID() statemachine.ProposalID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(statemachine.ProposalID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockCreatePrimitiveProposalMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockCreatePrimitiveProposal)(nil).ID))
}

// Input mocks base method.
func (m *MockCreatePrimitiveProposal) Input() *v1.CreatePrimitiveInput {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Input")
	ret0, _ := ret[0].(*v1.CreatePrimitiveInput)
	return ret0
}

// Input indicates an expected call of Input.
func (mr *MockCreatePrimitiveProposalMockRecorder) Input() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Input", reflect.TypeOf((*MockCreatePrimitiveProposal)(nil).Input))
}

// Log mocks base method.
func (m *MockCreatePrimitiveProposal) Log() logging.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// Log indicates an expected call of Log.
func (mr *MockCreatePrimitiveProposalMockRecorder) Log() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockCreatePrimitiveProposal)(nil).Log))
}

// Output mocks base method.
func (m *MockCreatePrimitiveProposal) Output(arg0 *v1.CreatePrimitiveOutput) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Output", arg0)
}

// Output indicates an expected call of Output.
func (mr *MockCreatePrimitiveProposalMockRecorder) Output(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Output", reflect.TypeOf((*MockCreatePrimitiveProposal)(nil).Output), arg0)
}

// Session mocks base method.
func (m *MockCreatePrimitiveProposal) Session() Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session")
	ret0, _ := ret[0].(Session)
	return ret0
}

// Session indicates an expected call of Session.
func (mr *MockCreatePrimitiveProposalMockRecorder) Session() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockCreatePrimitiveProposal)(nil).Session))
}

// Watch mocks base method.
func (m *MockCreatePrimitiveProposal) Watch(arg0 statemachine.WatchFunc[statemachine.Phase]) statemachine.CancelFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0)
	ret0, _ := ret[0].(statemachine.CancelFunc)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockCreatePrimitiveProposalMockRecorder) Watch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockCreatePrimitiveProposal)(nil).Watch), arg0)
}

// MockClosePrimitiveProposal is a mock of ClosePrimitiveProposal interface.
type MockClosePrimitiveProposal struct {
	ctrl     *gomock.Controller
	recorder *MockClosePrimitiveProposalMockRecorder
}

// MockClosePrimitiveProposalMockRecorder is the mock recorder for MockClosePrimitiveProposal.
type MockClosePrimitiveProposalMockRecorder struct {
	mock *MockClosePrimitiveProposal
}

// NewMockClosePrimitiveProposal creates a new mock instance.
func NewMockClosePrimitiveProposal(ctrl *gomock.Controller) *MockClosePrimitiveProposal {
	mock := &MockClosePrimitiveProposal{ctrl: ctrl}
	mock.recorder = &MockClosePrimitiveProposalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClosePrimitiveProposal) EXPECT() *MockClosePrimitiveProposalMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockClosePrimitiveProposal) Cancel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cancel")
}

// Cancel indicates an expected call of Cancel.
func (mr *MockClosePrimitiveProposalMockRecorder) Cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockClosePrimitiveProposal)(nil).Cancel))
}

// Close mocks base method.
func (m *MockClosePrimitiveProposal) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClosePrimitiveProposalMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClosePrimitiveProposal)(nil).Close))
}

// Error mocks base method.
func (m *MockClosePrimitiveProposal) Error(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", arg0)
}

// Error indicates an expected call of Error.
func (mr *MockClosePrimitiveProposalMockRecorder) Error(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockClosePrimitiveProposal)(nil).Error), arg0)
}

// ID mocks base method.
func (m *MockClosePrimitiveProposal) ID() statemachine.ProposalID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(statemachine.ProposalID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockClosePrimitiveProposalMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockClosePrimitiveProposal)(nil).ID))
}

// Input mocks base method.
func (m *MockClosePrimitiveProposal) Input() *v1.ClosePrimitiveInput {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Input")
	ret0, _ := ret[0].(*v1.ClosePrimitiveInput)
	return ret0
}

// Input indicates an expected call of Input.
func (mr *MockClosePrimitiveProposalMockRecorder) Input() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Input", reflect.TypeOf((*MockClosePrimitiveProposal)(nil).Input))
}

// Log mocks base method.
func (m *MockClosePrimitiveProposal) Log() logging.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// Log indicates an expected call of Log.
func (mr *MockClosePrimitiveProposalMockRecorder) Log() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockClosePrimitiveProposal)(nil).Log))
}

// Output mocks base method.
func (m *MockClosePrimitiveProposal) Output(arg0 *v1.ClosePrimitiveOutput) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Output", arg0)
}

// Output indicates an expected call of Output.
func (mr *MockClosePrimitiveProposalMockRecorder) Output(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Output", reflect.TypeOf((*MockClosePrimitiveProposal)(nil).Output), arg0)
}

// Session mocks base method.
func (m *MockClosePrimitiveProposal) Session() Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session")
	ret0, _ := ret[0].(Session)
	return ret0
}

// Session indicates an expected call of Session.
func (mr *MockClosePrimitiveProposalMockRecorder) Session() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockClosePrimitiveProposal)(nil).Session))
}

// Watch mocks base method.
func (m *MockClosePrimitiveProposal) Watch(arg0 statemachine.WatchFunc[statemachine.Phase]) statemachine.CancelFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0)
	ret0, _ := ret[0].(statemachine.CancelFunc)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockClosePrimitiveProposalMockRecorder) Watch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockClosePrimitiveProposal)(nil).Watch), arg0)
}

// MockPrimitiveProposal is a mock of PrimitiveProposal interface.
type MockPrimitiveProposal struct {
	ctrl     *gomock.Controller
	recorder *MockPrimitiveProposalMockRecorder
}

// MockPrimitiveProposalMockRecorder is the mock recorder for MockPrimitiveProposal.
type MockPrimitiveProposalMockRecorder struct {
	mock *MockPrimitiveProposal
}

// NewMockPrimitiveProposal creates a new mock instance.
func NewMockPrimitiveProposal(ctrl *gomock.Controller) *MockPrimitiveProposal {
	mock := &MockPrimitiveProposal{ctrl: ctrl}
	mock.recorder = &MockPrimitiveProposalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrimitiveProposal) EXPECT() *MockPrimitiveProposalMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockPrimitiveProposal) Cancel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cancel")
}

// Cancel indicates an expected call of Cancel.
func (mr *MockPrimitiveProposalMockRecorder) Cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockPrimitiveProposal)(nil).Cancel))
}

// Close mocks base method.
func (m *MockPrimitiveProposal) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockPrimitiveProposalMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPrimitiveProposal)(nil).Close))
}

// Error mocks base method.
func (m *MockPrimitiveProposal) Error(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", arg0)
}

// Error indicates an expected call of Error.
func (mr *MockPrimitiveProposalMockRecorder) Error(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockPrimitiveProposal)(nil).Error), arg0)
}

// ID mocks base method.
func (m *MockPrimitiveProposal) ID() statemachine.ProposalID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(statemachine.ProposalID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockPrimitiveProposalMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockPrimitiveProposal)(nil).ID))
}

// Input mocks base method.
func (m *MockPrimitiveProposal) Input() *v1.PrimitiveProposalInput {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Input")
	ret0, _ := ret[0].(*v1.PrimitiveProposalInput)
	return ret0
}

// Input indicates an expected call of Input.
func (mr *MockPrimitiveProposalMockRecorder) Input() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Input", reflect.TypeOf((*MockPrimitiveProposal)(nil).Input))
}

// Log mocks base method.
func (m *MockPrimitiveProposal) Log() logging.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// Log indicates an expected call of Log.
func (mr *MockPrimitiveProposalMockRecorder) Log() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockPrimitiveProposal)(nil).Log))
}

// Output mocks base method.
func (m *MockPrimitiveProposal) Output(arg0 *v1.PrimitiveProposalOutput) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Output", arg0)
}

// Output indicates an expected call of Output.
func (mr *MockPrimitiveProposalMockRecorder) Output(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Output", reflect.TypeOf((*MockPrimitiveProposal)(nil).Output), arg0)
}

// Session mocks base method.
func (m *MockPrimitiveProposal) Session() Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session")
	ret0, _ := ret[0].(Session)
	return ret0
}

// Session indicates an expected call of Session.
func (mr *MockPrimitiveProposalMockRecorder) Session() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockPrimitiveProposal)(nil).Session))
}

// Watch mocks base method.
func (m *MockPrimitiveProposal) Watch(arg0 statemachine.WatchFunc[statemachine.Phase]) statemachine.CancelFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0)
	ret0, _ := ret[0].(statemachine.CancelFunc)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockPrimitiveProposalMockRecorder) Watch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockPrimitiveProposal)(nil).Watch), arg0)
}

// MockPrimitiveQuery is a mock of PrimitiveQuery interface.
type MockPrimitiveQuery struct {
	ctrl     *gomock.Controller
	recorder *MockPrimitiveQueryMockRecorder
}

// MockPrimitiveQueryMockRecorder is the mock recorder for MockPrimitiveQuery.
type MockPrimitiveQueryMockRecorder struct {
	mock *MockPrimitiveQuery
}

// NewMockPrimitiveQuery creates a new mock instance.
func NewMockPrimitiveQuery(ctrl *gomock.Controller) *MockPrimitiveQuery {
	mock := &MockPrimitiveQuery{ctrl: ctrl}
	mock.recorder = &MockPrimitiveQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrimitiveQuery) EXPECT() *MockPrimitiveQueryMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockPrimitiveQuery) Cancel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cancel")
}

// Cancel indicates an expected call of Cancel.
func (mr *MockPrimitiveQueryMockRecorder) Cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockPrimitiveQuery)(nil).Cancel))
}

// Close mocks base method.
func (m *MockPrimitiveQuery) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockPrimitiveQueryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPrimitiveQuery)(nil).Close))
}

// Error mocks base method.
func (m *MockPrimitiveQuery) Error(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", arg0)
}

// Error indicates an expected call of Error.
func (mr *MockPrimitiveQueryMockRecorder) Error(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockPrimitiveQuery)(nil).Error), arg0)
}

// ID mocks base method.
func (m *MockPrimitiveQuery) ID() statemachine.QueryID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(statemachine.QueryID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockPrimitiveQueryMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockPrimitiveQuery)(nil).ID))
}

// Input mocks base method.
func (m *MockPrimitiveQuery) Input() *v1.PrimitiveQueryInput {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Input")
	ret0, _ := ret[0].(*v1.PrimitiveQueryInput)
	return ret0
}

// Input indicates an expected call of Input.
func (mr *MockPrimitiveQueryMockRecorder) Input() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Input", reflect.TypeOf((*MockPrimitiveQuery)(nil).Input))
}

// Log mocks base method.
func (m *MockPrimitiveQuery) Log() logging.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// Log indicates an expected call of Log.
func (mr *MockPrimitiveQueryMockRecorder) Log() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockPrimitiveQuery)(nil).Log))
}

// Output mocks base method.
func (m *MockPrimitiveQuery) Output(arg0 *v1.PrimitiveQueryOutput) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Output", arg0)
}

// Output indicates an expected call of Output.
func (mr *MockPrimitiveQueryMockRecorder) Output(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Output", reflect.TypeOf((*MockPrimitiveQuery)(nil).Output), arg0)
}

// Session mocks base method.
func (m *MockPrimitiveQuery) Session() Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session")
	ret0, _ := ret[0].(Session)
	return ret0
}

// Session indicates an expected call of Session.
func (mr *MockPrimitiveQueryMockRecorder) Session() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockPrimitiveQuery)(nil).Session))
}

// Watch mocks base method.
func (m *MockPrimitiveQuery) Watch(arg0 statemachine.WatchFunc[statemachine.Phase]) statemachine.CancelFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0)
	ret0, _ := ret[0].(statemachine.CancelFunc)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockPrimitiveQueryMockRecorder) Watch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockPrimitiveQuery)(nil).Watch), arg0)
}

// MockSessions is a mock of Sessions interface.
type MockSessions struct {
	ctrl     *gomock.Controller
	recorder *MockSessionsMockRecorder
}

// MockSessionsMockRecorder is the mock recorder for MockSessions.
type MockSessionsMockRecorder struct {
	mock *MockSessions
}

// NewMockSessions creates a new mock instance.
func NewMockSessions(ctrl *gomock.Controller) *MockSessions {
	mock := &MockSessions{ctrl: ctrl}
	mock.recorder = &MockSessionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessions) EXPECT() *MockSessionsMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSessions) Get(arg0 ID) (Session, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(Session)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSessionsMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSessions)(nil).Get), arg0)
}

// List mocks base method.
func (m *MockSessions) List() []Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]Session)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockSessionsMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSessions)(nil).List))
}

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockSession) ID() ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(ID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockSessionMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockSession)(nil).ID))
}

// Log mocks base method.
func (m *MockSession) Log() logging.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// Log indicates an expected call of Log.
func (mr *MockSessionMockRecorder) Log() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockSession)(nil).Log))
}

// Proposals mocks base method.
func (m *MockSession) Proposals() Proposals {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Proposals")
	ret0, _ := ret[0].(Proposals)
	return ret0
}

// Proposals indicates an expected call of Proposals.
func (mr *MockSessionMockRecorder) Proposals() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proposals", reflect.TypeOf((*MockSession)(nil).Proposals))
}

// State mocks base method.
func (m *MockSession) State() State {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(State)
	return ret0
}

// State indicates an expected call of State.
func (mr *MockSessionMockRecorder) State() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockSession)(nil).State))
}

// Watch mocks base method.
func (m *MockSession) Watch(arg0 statemachine.WatchFunc[State]) statemachine.CancelFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0)
	ret0, _ := ret[0].(statemachine.CancelFunc)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockSessionMockRecorder) Watch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockSession)(nil).Watch), arg0)
}
