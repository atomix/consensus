// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/multiraft/v1/config.proto

package v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MultiRaftConfig struct {
	HeartbeatPeriod         *time.Duration `protobuf:"bytes,1,opt,name=heartbeat_period,json=heartbeatPeriod,proto3,stdduration" json:"heartbeat_period,omitempty"`
	ElectionTimeout         *time.Duration `protobuf:"bytes,2,opt,name=election_timeout,json=electionTimeout,proto3,stdduration" json:"election_timeout,omitempty"`
	SnapshotEntryThreshold  uint64         `protobuf:"varint,3,opt,name=snapshot_entry_threshold,json=snapshotEntryThreshold,proto3" json:"snapshot_entry_threshold,omitempty"`
	CompactionRetainEntries uint64         `protobuf:"varint,4,opt,name=compaction_retain_entries,json=compactionRetainEntries,proto3" json:"compaction_retain_entries,omitempty"`
}

func (m *MultiRaftConfig) Reset()         { *m = MultiRaftConfig{} }
func (m *MultiRaftConfig) String() string { return proto.CompactTextString(m) }
func (*MultiRaftConfig) ProtoMessage()    {}
func (*MultiRaftConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_74a583683aac86e1, []int{0}
}
func (m *MultiRaftConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiRaftConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiRaftConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiRaftConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiRaftConfig.Merge(m, src)
}
func (m *MultiRaftConfig) XXX_Size() int {
	return m.Size()
}
func (m *MultiRaftConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiRaftConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MultiRaftConfig proto.InternalMessageInfo

func (m *MultiRaftConfig) GetHeartbeatPeriod() *time.Duration {
	if m != nil {
		return m.HeartbeatPeriod
	}
	return nil
}

func (m *MultiRaftConfig) GetElectionTimeout() *time.Duration {
	if m != nil {
		return m.ElectionTimeout
	}
	return nil
}

func (m *MultiRaftConfig) GetSnapshotEntryThreshold() uint64 {
	if m != nil {
		return m.SnapshotEntryThreshold
	}
	return 0
}

func (m *MultiRaftConfig) GetCompactionRetainEntries() uint64 {
	if m != nil {
		return m.CompactionRetainEntries
	}
	return 0
}

type PartitionConfig struct {
	PartitionID PartitionID       `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3,casttype=PartitionID" json:"partition_id,omitempty"`
	Members     map[uint64]string `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *PartitionConfig) Reset()         { *m = PartitionConfig{} }
func (m *PartitionConfig) String() string { return proto.CompactTextString(m) }
func (*PartitionConfig) ProtoMessage()    {}
func (*PartitionConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_74a583683aac86e1, []int{1}
}
func (m *PartitionConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartitionConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartitionConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionConfig.Merge(m, src)
}
func (m *PartitionConfig) XXX_Size() int {
	return m.Size()
}
func (m *PartitionConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionConfig proto.InternalMessageInfo

func (m *PartitionConfig) GetPartitionID() PartitionID {
	if m != nil {
		return m.PartitionID
	}
	return 0
}

func (m *PartitionConfig) GetMembers() map[uint64]string {
	if m != nil {
		return m.Members
	}
	return nil
}

func init() {
	proto.RegisterType((*MultiRaftConfig)(nil), "atomix.multiraft.v1.MultiRaftConfig")
	proto.RegisterType((*PartitionConfig)(nil), "atomix.multiraft.v1.PartitionConfig")
	proto.RegisterMapType((map[uint64]string)(nil), "atomix.multiraft.v1.PartitionConfig.MembersEntry")
}

func init() { proto.RegisterFile("atomix/multiraft/v1/config.proto", fileDescriptor_74a583683aac86e1) }

var fileDescriptor_74a583683aac86e1 = []byte{
	// 410 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0x3f, 0x8f, 0xd3, 0x30,
	0x14, 0xaf, 0xd3, 0x00, 0xc2, 0x39, 0xd4, 0x53, 0x38, 0x41, 0xae, 0x83, 0x2f, 0xba, 0xa9, 0x93,
	0xa3, 0x1e, 0xcb, 0xa9, 0x1b, 0xe5, 0x6e, 0x38, 0xd0, 0x49, 0x95, 0xd5, 0x3d, 0x72, 0x1a, 0x27,
	0xb1, 0x48, 0xe2, 0xc8, 0x71, 0x2a, 0xfa, 0x2d, 0x18, 0xd9, 0xf8, 0x3a, 0x8c, 0x1d, 0x59, 0xf8,
	0xa3, 0xf4, 0x5b, 0x30, 0xa1, 0xd8, 0x4d, 0xf8, 0x23, 0x06, 0xb6, 0xe7, 0xf7, 0xfb, 0xf7, 0xfc,
	0x1e, 0xf4, 0xa9, 0x12, 0x05, 0x7f, 0x17, 0x14, 0x4d, 0xae, 0xb8, 0xa4, 0x89, 0x0a, 0xb6, 0xf3,
	0x60, 0x23, 0xca, 0x84, 0xa7, 0xb8, 0x92, 0x42, 0x09, 0xf7, 0xa9, 0x61, 0xe0, 0x81, 0x81, 0xb7,
	0xf3, 0x29, 0x4a, 0x85, 0x48, 0x73, 0x16, 0x68, 0x4a, 0xd4, 0x24, 0x41, 0xdc, 0x48, 0xaa, 0xb8,
	0x28, 0x8d, 0x68, 0x7a, 0x96, 0x8a, 0x54, 0xe8, 0x32, 0xe8, 0x2a, 0xd3, 0xbd, 0xfc, 0x68, 0xc1,
	0xc9, 0x7d, 0x67, 0x43, 0x68, 0xa2, 0x5e, 0xe9, 0x10, 0xf7, 0x35, 0x3c, 0xcd, 0x18, 0x95, 0x2a,
	0x62, 0x54, 0x85, 0x15, 0x93, 0x5c, 0xc4, 0x1e, 0xf0, 0xc1, 0xcc, 0xb9, 0x3a, 0xc7, 0x26, 0x04,
	0xf7, 0x21, 0xf8, 0xe6, 0x18, 0xb2, 0xb4, 0x3f, 0x7c, 0xbb, 0x00, 0x64, 0x32, 0x08, 0x57, 0x5a,
	0xd7, 0x79, 0xb1, 0x9c, 0x6d, 0x3a, 0x4a, 0xa8, 0x78, 0xc1, 0x44, 0xa3, 0x3c, 0xeb, 0x3f, 0xbd,
	0x7a, 0xe1, 0xda, 0xe8, 0xdc, 0x6b, 0xe8, 0xd5, 0x25, 0xad, 0xea, 0x4c, 0xa8, 0x90, 0x95, 0x4a,
	0xee, 0x42, 0x95, 0x49, 0x56, 0x67, 0x22, 0x8f, 0xbd, 0xb1, 0x0f, 0x66, 0x36, 0x79, 0xd6, 0xe3,
	0xb7, 0x1d, 0xbc, 0xee, 0x51, 0x77, 0x01, 0xcf, 0x37, 0xa2, 0xa8, 0xa8, 0x99, 0x43, 0x32, 0x45,
	0x79, 0xa9, 0x2d, 0x38, 0xab, 0x3d, 0x5b, 0x4b, 0x9f, 0xff, 0x22, 0x10, 0x8d, 0xdf, 0x1a, 0xf8,
	0xf2, 0x0b, 0x80, 0x93, 0x15, 0x95, 0x8a, 0x77, 0xd0, 0x71, 0x43, 0x2f, 0xe1, 0x49, 0xd5, 0xb7,
	0x42, 0x6e, 0xb6, 0xf3, 0x64, 0x89, 0xda, 0xaf, 0x17, 0xce, 0x40, 0xbd, 0xbb, 0xf9, 0xf1, 0xe7,
	0x93, 0x38, 0x83, 0xe6, 0x2e, 0x76, 0xdf, 0xc0, 0x47, 0x05, 0x2b, 0x22, 0x26, 0x6b, 0xcf, 0xf2,
	0xc7, 0x33, 0xe7, 0x6a, 0x8e, 0xff, 0x71, 0x55, 0xfc, 0x57, 0x32, 0xbe, 0x37, 0x1a, 0xfd, 0x3f,
	0xd2, 0x3b, 0x4c, 0x17, 0xf0, 0xe4, 0x77, 0xc0, 0x3d, 0x85, 0xe3, 0xb7, 0x6c, 0xa7, 0xc7, 0xb2,
	0x49, 0x57, 0xba, 0x67, 0xf0, 0xc1, 0x96, 0xe6, 0x0d, 0xd3, 0xcb, 0x7f, 0x4c, 0xcc, 0x63, 0x61,
	0x5d, 0x83, 0xa5, 0xf7, 0xa9, 0x45, 0x60, 0xdf, 0x22, 0xf0, 0xbd, 0x45, 0xe0, 0xfd, 0x01, 0x8d,
	0xf6, 0x07, 0x34, 0xfa, 0x7c, 0x40, 0xa3, 0xe8, 0xa1, 0xbe, 0xcc, 0x8b, 0x9f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xc6, 0x79, 0x96, 0x29, 0x91, 0x02, 0x00, 0x00,
}

func (m *MultiRaftConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiRaftConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiRaftConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CompactionRetainEntries != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.CompactionRetainEntries))
		i--
		dAtA[i] = 0x20
	}
	if m.SnapshotEntryThreshold != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.SnapshotEntryThreshold))
		i--
		dAtA[i] = 0x18
	}
	if m.ElectionTimeout != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.ElectionTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ElectionTimeout):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintConfig(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x12
	}
	if m.HeartbeatPeriod != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.HeartbeatPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.HeartbeatPeriod):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintConfig(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PartitionConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for k := range m.Members {
			v := m.Members[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintConfig(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintConfig(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintConfig(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.PartitionID != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.PartitionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MultiRaftConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HeartbeatPeriod != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.HeartbeatPeriod)
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.ElectionTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ElectionTimeout)
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.SnapshotEntryThreshold != 0 {
		n += 1 + sovConfig(uint64(m.SnapshotEntryThreshold))
	}
	if m.CompactionRetainEntries != 0 {
		n += 1 + sovConfig(uint64(m.CompactionRetainEntries))
	}
	return n
}

func (m *PartitionConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartitionID != 0 {
		n += 1 + sovConfig(uint64(m.PartitionID))
	}
	if len(m.Members) > 0 {
		for k, v := range m.Members {
			_ = k
			_ = v
			mapEntrySize := 1 + sovConfig(uint64(k)) + 1 + len(v) + sovConfig(uint64(len(v)))
			n += mapEntrySize + 1 + sovConfig(uint64(mapEntrySize))
		}
	}
	return n
}

func sovConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MultiRaftConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiRaftConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiRaftConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeartbeatPeriod == nil {
				m.HeartbeatPeriod = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.HeartbeatPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElectionTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ElectionTimeout == nil {
				m.ElectionTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.ElectionTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotEntryThreshold", wireType)
			}
			m.SnapshotEntryThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnapshotEntryThreshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompactionRetainEntries", wireType)
			}
			m.CompactionRetainEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompactionRetainEntries |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionID", wireType)
			}
			m.PartitionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionID |= PartitionID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Members == nil {
				m.Members = make(map[uint64]string)
			}
			var mapkey uint64
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConfig
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConfig
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthConfig
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthConfig
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipConfig(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthConfig
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Members[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConfig = fmt.Errorf("proto: unexpected end of group")
)
