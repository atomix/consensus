// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/multiraft/election/v1/fsm.proto

package v1

import (
	fmt "fmt"
	github_com_atomix_multi_raft_storage_api_atomix_multiraft_v1 "github.com/atomix/multi-raft-storage/api/atomix/multiraft/v1"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LeaderElectionSnapshot struct {
	Term       github_com_atomix_multi_raft_storage_api_atomix_multiraft_v1.Index `protobuf:"varint,1,opt,name=term,proto3,casttype=github.com/atomix/multi-raft-storage/api/atomix/multiraft/v1.Index" json:"term,omitempty"`
	Leader     *LeaderElectionCandidate                                           `protobuf:"bytes,2,opt,name=leader,proto3" json:"leader,omitempty"`
	Candidates []LeaderElectionCandidate                                          `protobuf:"bytes,3,rep,name=candidates,proto3" json:"candidates"`
}

func (m *LeaderElectionSnapshot) Reset()         { *m = LeaderElectionSnapshot{} }
func (m *LeaderElectionSnapshot) String() string { return proto.CompactTextString(m) }
func (*LeaderElectionSnapshot) ProtoMessage()    {}
func (*LeaderElectionSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_81052ad2c4b6f51c, []int{0}
}
func (m *LeaderElectionSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaderElectionSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaderElectionSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaderElectionSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaderElectionSnapshot.Merge(m, src)
}
func (m *LeaderElectionSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *LeaderElectionSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaderElectionSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_LeaderElectionSnapshot proto.InternalMessageInfo

func (m *LeaderElectionSnapshot) GetTerm() github_com_atomix_multi_raft_storage_api_atomix_multiraft_v1.Index {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *LeaderElectionSnapshot) GetLeader() *LeaderElectionCandidate {
	if m != nil {
		return m.Leader
	}
	return nil
}

func (m *LeaderElectionSnapshot) GetCandidates() []LeaderElectionCandidate {
	if m != nil {
		return m.Candidates
	}
	return nil
}

type LeaderElectionCandidate struct {
	Name      string                                                                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SessionID github_com_atomix_multi_raft_storage_api_atomix_multiraft_v1.SessionID `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3,casttype=github.com/atomix/multi-raft-storage/api/atomix/multiraft/v1.SessionID" json:"session_id,omitempty"`
}

func (m *LeaderElectionCandidate) Reset()         { *m = LeaderElectionCandidate{} }
func (m *LeaderElectionCandidate) String() string { return proto.CompactTextString(m) }
func (*LeaderElectionCandidate) ProtoMessage()    {}
func (*LeaderElectionCandidate) Descriptor() ([]byte, []int) {
	return fileDescriptor_81052ad2c4b6f51c, []int{1}
}
func (m *LeaderElectionCandidate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaderElectionCandidate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaderElectionCandidate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaderElectionCandidate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaderElectionCandidate.Merge(m, src)
}
func (m *LeaderElectionCandidate) XXX_Size() int {
	return m.Size()
}
func (m *LeaderElectionCandidate) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaderElectionCandidate.DiscardUnknown(m)
}

var xxx_messageInfo_LeaderElectionCandidate proto.InternalMessageInfo

func (m *LeaderElectionCandidate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LeaderElectionCandidate) GetSessionID() github_com_atomix_multi_raft_storage_api_atomix_multiraft_v1.SessionID {
	if m != nil {
		return m.SessionID
	}
	return 0
}

type LeaderElectionInput struct {
	// Types that are valid to be assigned to Input:
	//	*LeaderElectionInput_Enter
	//	*LeaderElectionInput_Withdraw
	//	*LeaderElectionInput_Anoint
	//	*LeaderElectionInput_Promote
	//	*LeaderElectionInput_Demote
	//	*LeaderElectionInput_Evict
	//	*LeaderElectionInput_GetTerm
	//	*LeaderElectionInput_Watch
	Input isLeaderElectionInput_Input `protobuf_oneof:"input"`
}

func (m *LeaderElectionInput) Reset()         { *m = LeaderElectionInput{} }
func (m *LeaderElectionInput) String() string { return proto.CompactTextString(m) }
func (*LeaderElectionInput) ProtoMessage()    {}
func (*LeaderElectionInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_81052ad2c4b6f51c, []int{2}
}
func (m *LeaderElectionInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaderElectionInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaderElectionInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaderElectionInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaderElectionInput.Merge(m, src)
}
func (m *LeaderElectionInput) XXX_Size() int {
	return m.Size()
}
func (m *LeaderElectionInput) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaderElectionInput.DiscardUnknown(m)
}

var xxx_messageInfo_LeaderElectionInput proto.InternalMessageInfo

type isLeaderElectionInput_Input interface {
	isLeaderElectionInput_Input()
	MarshalTo([]byte) (int, error)
	Size() int
}

type LeaderElectionInput_Enter struct {
	Enter *EnterInput `protobuf:"bytes,1,opt,name=enter,proto3,oneof" json:"enter,omitempty"`
}
type LeaderElectionInput_Withdraw struct {
	Withdraw *WithdrawInput `protobuf:"bytes,2,opt,name=withdraw,proto3,oneof" json:"withdraw,omitempty"`
}
type LeaderElectionInput_Anoint struct {
	Anoint *AnointInput `protobuf:"bytes,3,opt,name=anoint,proto3,oneof" json:"anoint,omitempty"`
}
type LeaderElectionInput_Promote struct {
	Promote *PromoteInput `protobuf:"bytes,4,opt,name=promote,proto3,oneof" json:"promote,omitempty"`
}
type LeaderElectionInput_Demote struct {
	Demote *DemoteInput `protobuf:"bytes,8,opt,name=demote,proto3,oneof" json:"demote,omitempty"`
}
type LeaderElectionInput_Evict struct {
	Evict *EvictInput `protobuf:"bytes,5,opt,name=evict,proto3,oneof" json:"evict,omitempty"`
}
type LeaderElectionInput_GetTerm struct {
	GetTerm *GetTermInput `protobuf:"bytes,6,opt,name=get_term,json=getTerm,proto3,oneof" json:"get_term,omitempty"`
}
type LeaderElectionInput_Watch struct {
	Watch *WatchInput `protobuf:"bytes,7,opt,name=watch,proto3,oneof" json:"watch,omitempty"`
}

func (*LeaderElectionInput_Enter) isLeaderElectionInput_Input()    {}
func (*LeaderElectionInput_Withdraw) isLeaderElectionInput_Input() {}
func (*LeaderElectionInput_Anoint) isLeaderElectionInput_Input()   {}
func (*LeaderElectionInput_Promote) isLeaderElectionInput_Input()  {}
func (*LeaderElectionInput_Demote) isLeaderElectionInput_Input()   {}
func (*LeaderElectionInput_Evict) isLeaderElectionInput_Input()    {}
func (*LeaderElectionInput_GetTerm) isLeaderElectionInput_Input()  {}
func (*LeaderElectionInput_Watch) isLeaderElectionInput_Input()    {}

func (m *LeaderElectionInput) GetInput() isLeaderElectionInput_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *LeaderElectionInput) GetEnter() *EnterInput {
	if x, ok := m.GetInput().(*LeaderElectionInput_Enter); ok {
		return x.Enter
	}
	return nil
}

func (m *LeaderElectionInput) GetWithdraw() *WithdrawInput {
	if x, ok := m.GetInput().(*LeaderElectionInput_Withdraw); ok {
		return x.Withdraw
	}
	return nil
}

func (m *LeaderElectionInput) GetAnoint() *AnointInput {
	if x, ok := m.GetInput().(*LeaderElectionInput_Anoint); ok {
		return x.Anoint
	}
	return nil
}

func (m *LeaderElectionInput) GetPromote() *PromoteInput {
	if x, ok := m.GetInput().(*LeaderElectionInput_Promote); ok {
		return x.Promote
	}
	return nil
}

func (m *LeaderElectionInput) GetDemote() *DemoteInput {
	if x, ok := m.GetInput().(*LeaderElectionInput_Demote); ok {
		return x.Demote
	}
	return nil
}

func (m *LeaderElectionInput) GetEvict() *EvictInput {
	if x, ok := m.GetInput().(*LeaderElectionInput_Evict); ok {
		return x.Evict
	}
	return nil
}

func (m *LeaderElectionInput) GetGetTerm() *GetTermInput {
	if x, ok := m.GetInput().(*LeaderElectionInput_GetTerm); ok {
		return x.GetTerm
	}
	return nil
}

func (m *LeaderElectionInput) GetWatch() *WatchInput {
	if x, ok := m.GetInput().(*LeaderElectionInput_Watch); ok {
		return x.Watch
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*LeaderElectionInput) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*LeaderElectionInput_Enter)(nil),
		(*LeaderElectionInput_Withdraw)(nil),
		(*LeaderElectionInput_Anoint)(nil),
		(*LeaderElectionInput_Promote)(nil),
		(*LeaderElectionInput_Demote)(nil),
		(*LeaderElectionInput_Evict)(nil),
		(*LeaderElectionInput_GetTerm)(nil),
		(*LeaderElectionInput_Watch)(nil),
	}
}

type LeaderElectionOutput struct {
	// Types that are valid to be assigned to Output:
	//	*LeaderElectionOutput_Enter
	//	*LeaderElectionOutput_Withdraw
	//	*LeaderElectionOutput_Anoint
	//	*LeaderElectionOutput_Promote
	//	*LeaderElectionOutput_Demote
	//	*LeaderElectionOutput_Evict
	//	*LeaderElectionOutput_GetTerm
	//	*LeaderElectionOutput_Watch
	Output isLeaderElectionOutput_Output `protobuf_oneof:"output"`
}

func (m *LeaderElectionOutput) Reset()         { *m = LeaderElectionOutput{} }
func (m *LeaderElectionOutput) String() string { return proto.CompactTextString(m) }
func (*LeaderElectionOutput) ProtoMessage()    {}
func (*LeaderElectionOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_81052ad2c4b6f51c, []int{3}
}
func (m *LeaderElectionOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaderElectionOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaderElectionOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaderElectionOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaderElectionOutput.Merge(m, src)
}
func (m *LeaderElectionOutput) XXX_Size() int {
	return m.Size()
}
func (m *LeaderElectionOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaderElectionOutput.DiscardUnknown(m)
}

var xxx_messageInfo_LeaderElectionOutput proto.InternalMessageInfo

type isLeaderElectionOutput_Output interface {
	isLeaderElectionOutput_Output()
	MarshalTo([]byte) (int, error)
	Size() int
}

type LeaderElectionOutput_Enter struct {
	Enter *EnterOutput `protobuf:"bytes,1,opt,name=enter,proto3,oneof" json:"enter,omitempty"`
}
type LeaderElectionOutput_Withdraw struct {
	Withdraw *WithdrawOutput `protobuf:"bytes,2,opt,name=withdraw,proto3,oneof" json:"withdraw,omitempty"`
}
type LeaderElectionOutput_Anoint struct {
	Anoint *AnointOutput `protobuf:"bytes,3,opt,name=anoint,proto3,oneof" json:"anoint,omitempty"`
}
type LeaderElectionOutput_Promote struct {
	Promote *PromoteOutput `protobuf:"bytes,4,opt,name=promote,proto3,oneof" json:"promote,omitempty"`
}
type LeaderElectionOutput_Demote struct {
	Demote *DemoteOutput `protobuf:"bytes,8,opt,name=demote,proto3,oneof" json:"demote,omitempty"`
}
type LeaderElectionOutput_Evict struct {
	Evict *EvictOutput `protobuf:"bytes,5,opt,name=evict,proto3,oneof" json:"evict,omitempty"`
}
type LeaderElectionOutput_GetTerm struct {
	GetTerm *GetTermOutput `protobuf:"bytes,6,opt,name=get_term,json=getTerm,proto3,oneof" json:"get_term,omitempty"`
}
type LeaderElectionOutput_Watch struct {
	Watch *WatchOutput `protobuf:"bytes,7,opt,name=watch,proto3,oneof" json:"watch,omitempty"`
}

func (*LeaderElectionOutput_Enter) isLeaderElectionOutput_Output()    {}
func (*LeaderElectionOutput_Withdraw) isLeaderElectionOutput_Output() {}
func (*LeaderElectionOutput_Anoint) isLeaderElectionOutput_Output()   {}
func (*LeaderElectionOutput_Promote) isLeaderElectionOutput_Output()  {}
func (*LeaderElectionOutput_Demote) isLeaderElectionOutput_Output()   {}
func (*LeaderElectionOutput_Evict) isLeaderElectionOutput_Output()    {}
func (*LeaderElectionOutput_GetTerm) isLeaderElectionOutput_Output()  {}
func (*LeaderElectionOutput_Watch) isLeaderElectionOutput_Output()    {}

func (m *LeaderElectionOutput) GetOutput() isLeaderElectionOutput_Output {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *LeaderElectionOutput) GetEnter() *EnterOutput {
	if x, ok := m.GetOutput().(*LeaderElectionOutput_Enter); ok {
		return x.Enter
	}
	return nil
}

func (m *LeaderElectionOutput) GetWithdraw() *WithdrawOutput {
	if x, ok := m.GetOutput().(*LeaderElectionOutput_Withdraw); ok {
		return x.Withdraw
	}
	return nil
}

func (m *LeaderElectionOutput) GetAnoint() *AnointOutput {
	if x, ok := m.GetOutput().(*LeaderElectionOutput_Anoint); ok {
		return x.Anoint
	}
	return nil
}

func (m *LeaderElectionOutput) GetPromote() *PromoteOutput {
	if x, ok := m.GetOutput().(*LeaderElectionOutput_Promote); ok {
		return x.Promote
	}
	return nil
}

func (m *LeaderElectionOutput) GetDemote() *DemoteOutput {
	if x, ok := m.GetOutput().(*LeaderElectionOutput_Demote); ok {
		return x.Demote
	}
	return nil
}

func (m *LeaderElectionOutput) GetEvict() *EvictOutput {
	if x, ok := m.GetOutput().(*LeaderElectionOutput_Evict); ok {
		return x.Evict
	}
	return nil
}

func (m *LeaderElectionOutput) GetGetTerm() *GetTermOutput {
	if x, ok := m.GetOutput().(*LeaderElectionOutput_GetTerm); ok {
		return x.GetTerm
	}
	return nil
}

func (m *LeaderElectionOutput) GetWatch() *WatchOutput {
	if x, ok := m.GetOutput().(*LeaderElectionOutput_Watch); ok {
		return x.Watch
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*LeaderElectionOutput) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*LeaderElectionOutput_Enter)(nil),
		(*LeaderElectionOutput_Withdraw)(nil),
		(*LeaderElectionOutput_Anoint)(nil),
		(*LeaderElectionOutput_Promote)(nil),
		(*LeaderElectionOutput_Demote)(nil),
		(*LeaderElectionOutput_Evict)(nil),
		(*LeaderElectionOutput_GetTerm)(nil),
		(*LeaderElectionOutput_Watch)(nil),
	}
}

type EnterInput struct {
	Candidate string `protobuf:"bytes,1,opt,name=candidate,proto3" json:"candidate,omitempty"`
}

func (m *EnterInput) Reset()         { *m = EnterInput{} }
func (m *EnterInput) String() string { return proto.CompactTextString(m) }
func (*EnterInput) ProtoMessage()    {}
func (*EnterInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_81052ad2c4b6f51c, []int{4}
}
func (m *EnterInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnterInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnterInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnterInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnterInput.Merge(m, src)
}
func (m *EnterInput) XXX_Size() int {
	return m.Size()
}
func (m *EnterInput) XXX_DiscardUnknown() {
	xxx_messageInfo_EnterInput.DiscardUnknown(m)
}

var xxx_messageInfo_EnterInput proto.InternalMessageInfo

func (m *EnterInput) GetCandidate() string {
	if m != nil {
		return m.Candidate
	}
	return ""
}

type EnterOutput struct {
	Term Term `protobuf:"bytes,1,opt,name=term,proto3" json:"term"`
}

func (m *EnterOutput) Reset()         { *m = EnterOutput{} }
func (m *EnterOutput) String() string { return proto.CompactTextString(m) }
func (*EnterOutput) ProtoMessage()    {}
func (*EnterOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_81052ad2c4b6f51c, []int{5}
}
func (m *EnterOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnterOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnterOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnterOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnterOutput.Merge(m, src)
}
func (m *EnterOutput) XXX_Size() int {
	return m.Size()
}
func (m *EnterOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_EnterOutput.DiscardUnknown(m)
}

var xxx_messageInfo_EnterOutput proto.InternalMessageInfo

func (m *EnterOutput) GetTerm() Term {
	if m != nil {
		return m.Term
	}
	return Term{}
}

type WithdrawInput struct {
	Candidate string `protobuf:"bytes,1,opt,name=candidate,proto3" json:"candidate,omitempty"`
}

func (m *WithdrawInput) Reset()         { *m = WithdrawInput{} }
func (m *WithdrawInput) String() string { return proto.CompactTextString(m) }
func (*WithdrawInput) ProtoMessage()    {}
func (*WithdrawInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_81052ad2c4b6f51c, []int{6}
}
func (m *WithdrawInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawInput.Merge(m, src)
}
func (m *WithdrawInput) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawInput) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawInput.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawInput proto.InternalMessageInfo

func (m *WithdrawInput) GetCandidate() string {
	if m != nil {
		return m.Candidate
	}
	return ""
}

type WithdrawOutput struct {
	Term Term `protobuf:"bytes,1,opt,name=term,proto3" json:"term"`
}

func (m *WithdrawOutput) Reset()         { *m = WithdrawOutput{} }
func (m *WithdrawOutput) String() string { return proto.CompactTextString(m) }
func (*WithdrawOutput) ProtoMessage()    {}
func (*WithdrawOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_81052ad2c4b6f51c, []int{7}
}
func (m *WithdrawOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawOutput.Merge(m, src)
}
func (m *WithdrawOutput) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawOutput.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawOutput proto.InternalMessageInfo

func (m *WithdrawOutput) GetTerm() Term {
	if m != nil {
		return m.Term
	}
	return Term{}
}

type AnointInput struct {
	Candidate string `protobuf:"bytes,1,opt,name=candidate,proto3" json:"candidate,omitempty"`
}

func (m *AnointInput) Reset()         { *m = AnointInput{} }
func (m *AnointInput) String() string { return proto.CompactTextString(m) }
func (*AnointInput) ProtoMessage()    {}
func (*AnointInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_81052ad2c4b6f51c, []int{8}
}
func (m *AnointInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnointInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnointInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnointInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnointInput.Merge(m, src)
}
func (m *AnointInput) XXX_Size() int {
	return m.Size()
}
func (m *AnointInput) XXX_DiscardUnknown() {
	xxx_messageInfo_AnointInput.DiscardUnknown(m)
}

var xxx_messageInfo_AnointInput proto.InternalMessageInfo

func (m *AnointInput) GetCandidate() string {
	if m != nil {
		return m.Candidate
	}
	return ""
}

type AnointOutput struct {
	Term Term `protobuf:"bytes,1,opt,name=term,proto3" json:"term"`
}

func (m *AnointOutput) Reset()         { *m = AnointOutput{} }
func (m *AnointOutput) String() string { return proto.CompactTextString(m) }
func (*AnointOutput) ProtoMessage()    {}
func (*AnointOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_81052ad2c4b6f51c, []int{9}
}
func (m *AnointOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnointOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnointOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnointOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnointOutput.Merge(m, src)
}
func (m *AnointOutput) XXX_Size() int {
	return m.Size()
}
func (m *AnointOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_AnointOutput.DiscardUnknown(m)
}

var xxx_messageInfo_AnointOutput proto.InternalMessageInfo

func (m *AnointOutput) GetTerm() Term {
	if m != nil {
		return m.Term
	}
	return Term{}
}

type PromoteInput struct {
	Candidate string `protobuf:"bytes,2,opt,name=candidate,proto3" json:"candidate,omitempty"`
}

func (m *PromoteInput) Reset()         { *m = PromoteInput{} }
func (m *PromoteInput) String() string { return proto.CompactTextString(m) }
func (*PromoteInput) ProtoMessage()    {}
func (*PromoteInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_81052ad2c4b6f51c, []int{10}
}
func (m *PromoteInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromoteInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PromoteInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PromoteInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromoteInput.Merge(m, src)
}
func (m *PromoteInput) XXX_Size() int {
	return m.Size()
}
func (m *PromoteInput) XXX_DiscardUnknown() {
	xxx_messageInfo_PromoteInput.DiscardUnknown(m)
}

var xxx_messageInfo_PromoteInput proto.InternalMessageInfo

func (m *PromoteInput) GetCandidate() string {
	if m != nil {
		return m.Candidate
	}
	return ""
}

type PromoteOutput struct {
	Term Term `protobuf:"bytes,1,opt,name=term,proto3" json:"term"`
}

func (m *PromoteOutput) Reset()         { *m = PromoteOutput{} }
func (m *PromoteOutput) String() string { return proto.CompactTextString(m) }
func (*PromoteOutput) ProtoMessage()    {}
func (*PromoteOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_81052ad2c4b6f51c, []int{11}
}
func (m *PromoteOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromoteOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PromoteOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PromoteOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromoteOutput.Merge(m, src)
}
func (m *PromoteOutput) XXX_Size() int {
	return m.Size()
}
func (m *PromoteOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_PromoteOutput.DiscardUnknown(m)
}

var xxx_messageInfo_PromoteOutput proto.InternalMessageInfo

func (m *PromoteOutput) GetTerm() Term {
	if m != nil {
		return m.Term
	}
	return Term{}
}

type DemoteInput struct {
	Candidate string `protobuf:"bytes,2,opt,name=candidate,proto3" json:"candidate,omitempty"`
}

func (m *DemoteInput) Reset()         { *m = DemoteInput{} }
func (m *DemoteInput) String() string { return proto.CompactTextString(m) }
func (*DemoteInput) ProtoMessage()    {}
func (*DemoteInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_81052ad2c4b6f51c, []int{12}
}
func (m *DemoteInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DemoteInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DemoteInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DemoteInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DemoteInput.Merge(m, src)
}
func (m *DemoteInput) XXX_Size() int {
	return m.Size()
}
func (m *DemoteInput) XXX_DiscardUnknown() {
	xxx_messageInfo_DemoteInput.DiscardUnknown(m)
}

var xxx_messageInfo_DemoteInput proto.InternalMessageInfo

func (m *DemoteInput) GetCandidate() string {
	if m != nil {
		return m.Candidate
	}
	return ""
}

type DemoteOutput struct {
	Term Term `protobuf:"bytes,1,opt,name=term,proto3" json:"term"`
}

func (m *DemoteOutput) Reset()         { *m = DemoteOutput{} }
func (m *DemoteOutput) String() string { return proto.CompactTextString(m) }
func (*DemoteOutput) ProtoMessage()    {}
func (*DemoteOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_81052ad2c4b6f51c, []int{13}
}
func (m *DemoteOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DemoteOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DemoteOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DemoteOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DemoteOutput.Merge(m, src)
}
func (m *DemoteOutput) XXX_Size() int {
	return m.Size()
}
func (m *DemoteOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_DemoteOutput.DiscardUnknown(m)
}

var xxx_messageInfo_DemoteOutput proto.InternalMessageInfo

func (m *DemoteOutput) GetTerm() Term {
	if m != nil {
		return m.Term
	}
	return Term{}
}

type EvictInput struct {
	Candidate string `protobuf:"bytes,1,opt,name=candidate,proto3" json:"candidate,omitempty"`
}

func (m *EvictInput) Reset()         { *m = EvictInput{} }
func (m *EvictInput) String() string { return proto.CompactTextString(m) }
func (*EvictInput) ProtoMessage()    {}
func (*EvictInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_81052ad2c4b6f51c, []int{14}
}
func (m *EvictInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvictInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvictInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvictInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvictInput.Merge(m, src)
}
func (m *EvictInput) XXX_Size() int {
	return m.Size()
}
func (m *EvictInput) XXX_DiscardUnknown() {
	xxx_messageInfo_EvictInput.DiscardUnknown(m)
}

var xxx_messageInfo_EvictInput proto.InternalMessageInfo

func (m *EvictInput) GetCandidate() string {
	if m != nil {
		return m.Candidate
	}
	return ""
}

type EvictOutput struct {
	Term Term `protobuf:"bytes,1,opt,name=term,proto3" json:"term"`
}

func (m *EvictOutput) Reset()         { *m = EvictOutput{} }
func (m *EvictOutput) String() string { return proto.CompactTextString(m) }
func (*EvictOutput) ProtoMessage()    {}
func (*EvictOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_81052ad2c4b6f51c, []int{15}
}
func (m *EvictOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvictOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvictOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvictOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvictOutput.Merge(m, src)
}
func (m *EvictOutput) XXX_Size() int {
	return m.Size()
}
func (m *EvictOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_EvictOutput.DiscardUnknown(m)
}

var xxx_messageInfo_EvictOutput proto.InternalMessageInfo

func (m *EvictOutput) GetTerm() Term {
	if m != nil {
		return m.Term
	}
	return Term{}
}

type GetTermInput struct {
}

func (m *GetTermInput) Reset()         { *m = GetTermInput{} }
func (m *GetTermInput) String() string { return proto.CompactTextString(m) }
func (*GetTermInput) ProtoMessage()    {}
func (*GetTermInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_81052ad2c4b6f51c, []int{16}
}
func (m *GetTermInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTermInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTermInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTermInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTermInput.Merge(m, src)
}
func (m *GetTermInput) XXX_Size() int {
	return m.Size()
}
func (m *GetTermInput) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTermInput.DiscardUnknown(m)
}

var xxx_messageInfo_GetTermInput proto.InternalMessageInfo

type GetTermOutput struct {
	Term Term `protobuf:"bytes,1,opt,name=term,proto3" json:"term"`
}

func (m *GetTermOutput) Reset()         { *m = GetTermOutput{} }
func (m *GetTermOutput) String() string { return proto.CompactTextString(m) }
func (*GetTermOutput) ProtoMessage()    {}
func (*GetTermOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_81052ad2c4b6f51c, []int{17}
}
func (m *GetTermOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTermOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTermOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTermOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTermOutput.Merge(m, src)
}
func (m *GetTermOutput) XXX_Size() int {
	return m.Size()
}
func (m *GetTermOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTermOutput.DiscardUnknown(m)
}

var xxx_messageInfo_GetTermOutput proto.InternalMessageInfo

func (m *GetTermOutput) GetTerm() Term {
	if m != nil {
		return m.Term
	}
	return Term{}
}

type WatchInput struct {
}

func (m *WatchInput) Reset()         { *m = WatchInput{} }
func (m *WatchInput) String() string { return proto.CompactTextString(m) }
func (*WatchInput) ProtoMessage()    {}
func (*WatchInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_81052ad2c4b6f51c, []int{18}
}
func (m *WatchInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchInput.Merge(m, src)
}
func (m *WatchInput) XXX_Size() int {
	return m.Size()
}
func (m *WatchInput) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchInput.DiscardUnknown(m)
}

var xxx_messageInfo_WatchInput proto.InternalMessageInfo

type WatchOutput struct {
	Term Term `protobuf:"bytes,1,opt,name=term,proto3" json:"term"`
}

func (m *WatchOutput) Reset()         { *m = WatchOutput{} }
func (m *WatchOutput) String() string { return proto.CompactTextString(m) }
func (*WatchOutput) ProtoMessage()    {}
func (*WatchOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_81052ad2c4b6f51c, []int{19}
}
func (m *WatchOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchOutput.Merge(m, src)
}
func (m *WatchOutput) XXX_Size() int {
	return m.Size()
}
func (m *WatchOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchOutput.DiscardUnknown(m)
}

var xxx_messageInfo_WatchOutput proto.InternalMessageInfo

func (m *WatchOutput) GetTerm() Term {
	if m != nil {
		return m.Term
	}
	return Term{}
}

type Term struct {
	Leader     string                                                             `protobuf:"bytes,1,opt,name=leader,proto3" json:"leader,omitempty"`
	Candidates []string                                                           `protobuf:"bytes,2,rep,name=candidates,proto3" json:"candidates,omitempty"`
	Index      github_com_atomix_multi_raft_storage_api_atomix_multiraft_v1.Index `protobuf:"varint,3,opt,name=index,proto3,casttype=github.com/atomix/multi-raft-storage/api/atomix/multiraft/v1.Index" json:"index,omitempty"`
}

func (m *Term) Reset()         { *m = Term{} }
func (m *Term) String() string { return proto.CompactTextString(m) }
func (*Term) ProtoMessage()    {}
func (*Term) Descriptor() ([]byte, []int) {
	return fileDescriptor_81052ad2c4b6f51c, []int{20}
}
func (m *Term) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Term) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Term.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Term) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Term.Merge(m, src)
}
func (m *Term) XXX_Size() int {
	return m.Size()
}
func (m *Term) XXX_DiscardUnknown() {
	xxx_messageInfo_Term.DiscardUnknown(m)
}

var xxx_messageInfo_Term proto.InternalMessageInfo

func (m *Term) GetLeader() string {
	if m != nil {
		return m.Leader
	}
	return ""
}

func (m *Term) GetCandidates() []string {
	if m != nil {
		return m.Candidates
	}
	return nil
}

func (m *Term) GetIndex() github_com_atomix_multi_raft_storage_api_atomix_multiraft_v1.Index {
	if m != nil {
		return m.Index
	}
	return 0
}

func init() {
	proto.RegisterType((*LeaderElectionSnapshot)(nil), "atomix.multiraft.election.v1.LeaderElectionSnapshot")
	proto.RegisterType((*LeaderElectionCandidate)(nil), "atomix.multiraft.election.v1.LeaderElectionCandidate")
	proto.RegisterType((*LeaderElectionInput)(nil), "atomix.multiraft.election.v1.LeaderElectionInput")
	proto.RegisterType((*LeaderElectionOutput)(nil), "atomix.multiraft.election.v1.LeaderElectionOutput")
	proto.RegisterType((*EnterInput)(nil), "atomix.multiraft.election.v1.EnterInput")
	proto.RegisterType((*EnterOutput)(nil), "atomix.multiraft.election.v1.EnterOutput")
	proto.RegisterType((*WithdrawInput)(nil), "atomix.multiraft.election.v1.WithdrawInput")
	proto.RegisterType((*WithdrawOutput)(nil), "atomix.multiraft.election.v1.WithdrawOutput")
	proto.RegisterType((*AnointInput)(nil), "atomix.multiraft.election.v1.AnointInput")
	proto.RegisterType((*AnointOutput)(nil), "atomix.multiraft.election.v1.AnointOutput")
	proto.RegisterType((*PromoteInput)(nil), "atomix.multiraft.election.v1.PromoteInput")
	proto.RegisterType((*PromoteOutput)(nil), "atomix.multiraft.election.v1.PromoteOutput")
	proto.RegisterType((*DemoteInput)(nil), "atomix.multiraft.election.v1.DemoteInput")
	proto.RegisterType((*DemoteOutput)(nil), "atomix.multiraft.election.v1.DemoteOutput")
	proto.RegisterType((*EvictInput)(nil), "atomix.multiraft.election.v1.EvictInput")
	proto.RegisterType((*EvictOutput)(nil), "atomix.multiraft.election.v1.EvictOutput")
	proto.RegisterType((*GetTermInput)(nil), "atomix.multiraft.election.v1.GetTermInput")
	proto.RegisterType((*GetTermOutput)(nil), "atomix.multiraft.election.v1.GetTermOutput")
	proto.RegisterType((*WatchInput)(nil), "atomix.multiraft.election.v1.WatchInput")
	proto.RegisterType((*WatchOutput)(nil), "atomix.multiraft.election.v1.WatchOutput")
	proto.RegisterType((*Term)(nil), "atomix.multiraft.election.v1.Term")
}

func init() {
	proto.RegisterFile("atomix/multiraft/election/v1/fsm.proto", fileDescriptor_81052ad2c4b6f51c)
}

var fileDescriptor_81052ad2c4b6f51c = []byte{
	// 790 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xcb, 0x4e, 0xdb, 0x4c,
	0x14, 0xc7, 0xe3, 0xc4, 0x84, 0xe4, 0x24, 0xb0, 0x98, 0x0f, 0xf1, 0x59, 0x15, 0x4a, 0x22, 0x2f,
	0xaa, 0x5c, 0xc0, 0x16, 0x54, 0xdd, 0x75, 0xd1, 0x84, 0x70, 0x49, 0x0b, 0x6d, 0x15, 0x2a, 0x21,
	0xb5, 0x95, 0x90, 0x89, 0x87, 0xc4, 0x12, 0xb6, 0x23, 0x67, 0x12, 0x78, 0x8c, 0x3e, 0x40, 0x17,
	0xdd, 0xf4, 0x5d, 0x50, 0x57, 0x2c, 0xba, 0xe8, 0x2a, 0xaa, 0xc2, 0x5b, 0xb0, 0xaa, 0x66, 0x7c,
	0x1b, 0x07, 0x35, 0x58, 0x75, 0x77, 0xf6, 0xe8, 0x9c, 0xff, 0xf9, 0xcf, 0xf1, 0x6f, 0x8e, 0x07,
	0x9e, 0x6a, 0xc4, 0x36, 0x8d, 0x6b, 0xd5, 0x1c, 0x5f, 0x12, 0xc3, 0xd1, 0x2e, 0x88, 0x8a, 0x2f,
	0x71, 0x8f, 0x18, 0xb6, 0xa5, 0x4e, 0xb6, 0xd5, 0x8b, 0x91, 0xa9, 0x0c, 0x1d, 0x9b, 0xd8, 0x68,
	0xc3, 0x8d, 0x53, 0x82, 0x38, 0xc5, 0x8f, 0x53, 0x26, 0xdb, 0x4f, 0xd6, 0xfa, 0x76, 0xdf, 0x66,
	0x81, 0x2a, 0x7d, 0x72, 0x73, 0xe4, 0xaf, 0x69, 0x58, 0x3f, 0xc2, 0x9a, 0x8e, 0x9d, 0x3d, 0x2f,
	0xf6, 0xc4, 0xd2, 0x86, 0xa3, 0x81, 0x4d, 0xd0, 0x07, 0x10, 0x09, 0x76, 0x4c, 0x49, 0xa8, 0x08,
	0x55, 0xb1, 0xb5, 0x7f, 0x3f, 0x2d, 0xb7, 0xfa, 0x06, 0x19, 0x8c, 0xcf, 0x95, 0x9e, 0x6d, 0xaa,
	0xbc, 0xa7, 0x2d, 0x5a, 0x6c, 0x6b, 0x44, 0x6c, 0x47, 0xeb, 0x63, 0x55, 0x1b, 0x1a, 0xea, 0x03,
	0xc7, 0x93, 0x6d, 0xa5, 0x63, 0xe9, 0xf8, 0xba, 0xcb, 0x34, 0xd1, 0x31, 0x64, 0x2f, 0x59, 0x55,
	0x29, 0x5d, 0x11, 0xaa, 0x85, 0x9d, 0xe7, 0xca, 0x22, 0xef, 0x4a, 0xd4, 0xe1, 0xae, 0x66, 0xe9,
	0x86, 0xae, 0x11, 0xdc, 0xf5, 0x44, 0xd0, 0x47, 0x80, 0x9e, 0xbf, 0x38, 0x92, 0x32, 0x95, 0xcc,
	0x5f, 0x4b, 0xb6, 0xc4, 0x9b, 0x69, 0x39, 0xd5, 0xe5, 0xe4, 0xe4, 0x6f, 0x02, 0xfc, 0xff, 0x87,
	0x68, 0x84, 0x40, 0xb4, 0x34, 0x13, 0xb3, 0x1e, 0xe5, 0xbb, 0xec, 0x19, 0x4d, 0x00, 0x46, 0x78,
	0x34, 0x32, 0x6c, 0xeb, 0xcc, 0xd0, 0xd9, 0xfe, 0xc4, 0xd6, 0xe9, 0x6c, 0x5a, 0xce, 0x9f, 0xb8,
	0xab, 0x9d, 0xf6, 0xfd, 0xb4, 0xbc, 0x9f, 0xa8, 0x95, 0x81, 0x52, 0x37, 0xef, 0x95, 0xea, 0xe8,
	0xf2, 0x77, 0x11, 0xfe, 0x8b, 0xfa, 0xec, 0x58, 0xc3, 0x31, 0x41, 0x2f, 0x61, 0x09, 0x5b, 0x04,
	0x3b, 0xcc, 0x64, 0x61, 0xa7, 0xba, 0xb8, 0x2f, 0x7b, 0x34, 0x94, 0x25, 0x1e, 0xa6, 0xba, 0x6e,
	0x22, 0xea, 0x40, 0xee, 0xca, 0x20, 0x03, 0xdd, 0xd1, 0xae, 0xbc, 0xef, 0xd5, 0x58, 0x2c, 0x72,
	0xea, 0x45, 0xfb, 0x3a, 0x41, 0x3a, 0xda, 0x85, 0xac, 0x66, 0xd9, 0x86, 0x45, 0xa4, 0x0c, 0x13,
	0xaa, 0x2d, 0x16, 0x6a, 0xb2, 0x58, 0x5f, 0xc6, 0x4b, 0x45, 0xfb, 0xb0, 0x3c, 0x74, 0x6c, 0xd3,
	0x26, 0x58, 0x12, 0x99, 0x4a, 0x7d, 0xb1, 0xca, 0x3b, 0x37, 0xd8, 0x97, 0xf1, 0x93, 0xa9, 0x19,
	0x1d, 0x33, 0x99, 0x5c, 0x1c, 0x33, 0x6d, 0xcc, 0xab, 0x78, 0xa9, 0xac, 0xbd, 0x13, 0xa3, 0x47,
	0xa4, 0xa5, 0x58, 0xed, 0xa5, 0xa1, 0x61, 0x7b, 0xe9, 0x1b, 0x3a, 0x80, 0x5c, 0x1f, 0x93, 0x33,
	0x76, 0xd8, 0xb2, 0x71, 0xf6, 0x73, 0x80, 0xc9, 0x7b, 0xec, 0x98, 0xc1, 0x7e, 0xfa, 0xee, 0x3b,
	0xb5, 0x72, 0xa5, 0x91, 0xde, 0x40, 0x5a, 0x8e, 0x63, 0xe5, 0x94, 0x86, 0x06, 0x56, 0x58, 0x62,
	0x6b, 0x19, 0x96, 0x0c, 0xba, 0x22, 0xff, 0x10, 0x61, 0x2d, 0x0a, 0xd3, 0xdb, 0x31, 0xa1, 0x34,
	0x35, 0xa3, 0x34, 0xd5, 0x62, 0xd0, 0xe4, 0x66, 0x86, 0x38, 0xbd, 0x7a, 0x80, 0xd3, 0x66, 0x3c,
	0x9c, 0x02, 0xa1, 0x90, 0xa7, 0xf6, 0x1c, 0x4f, 0xf5, 0x38, 0x3c, 0x05, 0x3a, 0x3e, 0x50, 0x07,
	0xf3, 0x40, 0x35, 0x62, 0x01, 0x15, 0xe8, 0x04, 0x44, 0xb5, 0xe7, 0x88, 0xaa, 0xc7, 0x21, 0x2a,
	0xb4, 0xe3, 0x21, 0xd5, 0x8c, 0x22, 0x55, 0x8b, 0x81, 0x14, 0xd7, 0x63, 0xc6, 0xd4, 0xe1, 0x03,
	0xa6, 0x1a, 0xb1, 0x98, 0x0a, 0xb7, 0xe4, 0x43, 0xd5, 0x8c, 0x42, 0x55, 0x8b, 0x01, 0x55, 0x68,
	0xc6, 0xa5, 0x2a, 0x07, 0x59, 0x9b, 0x2d, 0xc9, 0x75, 0x80, 0x70, 0xc0, 0xa0, 0x0d, 0xc8, 0x07,
	0x73, 0xd6, 0x1b, 0xa1, 0xe1, 0x82, 0xfc, 0x1a, 0x0a, 0x1c, 0x3e, 0xe8, 0x05, 0xf7, 0x3b, 0x2a,
	0xec, 0xc8, 0x8b, 0x6d, 0x50, 0xe7, 0xde, 0x28, 0x67, 0x59, 0xf2, 0x16, 0xac, 0x44, 0x86, 0xd2,
	0x23, 0xb5, 0xdf, 0xc0, 0x6a, 0x14, 0xba, 0x84, 0xe5, 0x1b, 0x50, 0xe0, 0x46, 0xd9, 0x23, 0xc5,
	0x8f, 0xa0, 0xc8, 0x73, 0x9a, 0xb0, 0xf4, 0x26, 0x14, 0xf9, 0xf9, 0x17, 0xad, 0x9d, 0x9e, 0xaf,
	0x7d, 0x0c, 0x2b, 0x11, 0xb8, 0x93, 0xef, 0x9b, 0x9b, 0x9a, 0x8f, 0xd4, 0x3e, 0x82, 0x22, 0x7f,
	0x20, 0x12, 0x96, 0xa6, 0xa8, 0x05, 0xc3, 0x36, 0x06, 0x6a, 0xe1, 0x29, 0x4a, 0x58, 0x78, 0x15,
	0x8a, 0xfc, 0x80, 0xa6, 0x2d, 0x8d, 0x1c, 0xae, 0x84, 0xf2, 0x45, 0x80, 0x70, 0x72, 0x53, 0xe7,
	0xdc, 0x91, 0x4b, 0x28, 0xfd, 0x45, 0x00, 0x91, 0x9d, 0xf9, 0xf5, 0xe0, 0x7a, 0xe6, 0xb6, 0xca,
	0xbf, 0x67, 0x95, 0x22, 0xf7, 0xac, 0x74, 0x25, 0x53, 0xcd, 0xf3, 0x57, 0x25, 0xf4, 0x89, 0xfe,
	0x3e, 0x74, 0x7c, 0xcd, 0x86, 0xf1, 0xbf, 0xbb, 0x33, 0xba, 0xa2, 0x2d, 0xe9, 0x66, 0x56, 0x12,
	0x6e, 0x67, 0x25, 0xe1, 0xd7, 0xac, 0x24, 0x7c, 0xbe, 0x2b, 0xa5, 0x6e, 0xef, 0x4a, 0xa9, 0x9f,
	0x77, 0xa5, 0xd4, 0x79, 0x96, 0x5d, 0x66, 0x9f, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x9d, 0xac,
	0x52, 0x52, 0x2a, 0x0b, 0x00, 0x00,
}

func (m *LeaderElectionSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaderElectionSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaderElectionSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Candidates) > 0 {
		for iNdEx := len(m.Candidates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Candidates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFsm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Leader != nil {
		{
			size, err := m.Leader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Term != 0 {
		i = encodeVarintFsm(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LeaderElectionCandidate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaderElectionCandidate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaderElectionCandidate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SessionID != 0 {
		i = encodeVarintFsm(dAtA, i, uint64(m.SessionID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFsm(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LeaderElectionInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaderElectionInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaderElectionInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Input != nil {
		{
			size := m.Input.Size()
			i -= size
			if _, err := m.Input.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *LeaderElectionInput_Enter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaderElectionInput_Enter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Enter != nil {
		{
			size, err := m.Enter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *LeaderElectionInput_Withdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaderElectionInput_Withdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Withdraw != nil {
		{
			size, err := m.Withdraw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *LeaderElectionInput_Anoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaderElectionInput_Anoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Anoint != nil {
		{
			size, err := m.Anoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *LeaderElectionInput_Promote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaderElectionInput_Promote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Promote != nil {
		{
			size, err := m.Promote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *LeaderElectionInput_Evict) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaderElectionInput_Evict) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Evict != nil {
		{
			size, err := m.Evict.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *LeaderElectionInput_GetTerm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaderElectionInput_GetTerm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GetTerm != nil {
		{
			size, err := m.GetTerm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *LeaderElectionInput_Watch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaderElectionInput_Watch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Watch != nil {
		{
			size, err := m.Watch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *LeaderElectionInput_Demote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaderElectionInput_Demote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Demote != nil {
		{
			size, err := m.Demote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *LeaderElectionOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaderElectionOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaderElectionOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Output != nil {
		{
			size := m.Output.Size()
			i -= size
			if _, err := m.Output.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *LeaderElectionOutput_Enter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaderElectionOutput_Enter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Enter != nil {
		{
			size, err := m.Enter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *LeaderElectionOutput_Withdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaderElectionOutput_Withdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Withdraw != nil {
		{
			size, err := m.Withdraw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *LeaderElectionOutput_Anoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaderElectionOutput_Anoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Anoint != nil {
		{
			size, err := m.Anoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *LeaderElectionOutput_Promote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaderElectionOutput_Promote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Promote != nil {
		{
			size, err := m.Promote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *LeaderElectionOutput_Evict) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaderElectionOutput_Evict) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Evict != nil {
		{
			size, err := m.Evict.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *LeaderElectionOutput_GetTerm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaderElectionOutput_GetTerm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GetTerm != nil {
		{
			size, err := m.GetTerm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *LeaderElectionOutput_Watch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaderElectionOutput_Watch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Watch != nil {
		{
			size, err := m.Watch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *LeaderElectionOutput_Demote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaderElectionOutput_Demote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Demote != nil {
		{
			size, err := m.Demote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *EnterInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnterInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Candidate) > 0 {
		i -= len(m.Candidate)
		copy(dAtA[i:], m.Candidate)
		i = encodeVarintFsm(dAtA, i, uint64(len(m.Candidate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnterOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnterOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Term.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFsm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *WithdrawInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Candidate) > 0 {
		i -= len(m.Candidate)
		copy(dAtA[i:], m.Candidate)
		i = encodeVarintFsm(dAtA, i, uint64(len(m.Candidate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Term.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFsm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AnointInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnointInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnointInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Candidate) > 0 {
		i -= len(m.Candidate)
		copy(dAtA[i:], m.Candidate)
		i = encodeVarintFsm(dAtA, i, uint64(len(m.Candidate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AnointOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnointOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnointOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Term.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFsm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PromoteInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromoteInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PromoteInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Candidate) > 0 {
		i -= len(m.Candidate)
		copy(dAtA[i:], m.Candidate)
		i = encodeVarintFsm(dAtA, i, uint64(len(m.Candidate)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *PromoteOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromoteOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PromoteOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Term.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFsm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DemoteInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DemoteInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DemoteInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Candidate) > 0 {
		i -= len(m.Candidate)
		copy(dAtA[i:], m.Candidate)
		i = encodeVarintFsm(dAtA, i, uint64(len(m.Candidate)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *DemoteOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DemoteOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DemoteOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Term.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFsm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EvictInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvictInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvictInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Candidate) > 0 {
		i -= len(m.Candidate)
		copy(dAtA[i:], m.Candidate)
		i = encodeVarintFsm(dAtA, i, uint64(len(m.Candidate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EvictOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvictOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvictOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Term.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFsm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetTermInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTermInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTermInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetTermOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTermOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTermOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Term.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFsm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *WatchInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *WatchOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Term.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFsm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Term) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Term) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Term) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintFsm(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Candidates) > 0 {
		for iNdEx := len(m.Candidates) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Candidates[iNdEx])
			copy(dAtA[i:], m.Candidates[iNdEx])
			i = encodeVarintFsm(dAtA, i, uint64(len(m.Candidates[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Leader) > 0 {
		i -= len(m.Leader)
		copy(dAtA[i:], m.Leader)
		i = encodeVarintFsm(dAtA, i, uint64(len(m.Leader)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFsm(dAtA []byte, offset int, v uint64) int {
	offset -= sovFsm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LeaderElectionSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Term != 0 {
		n += 1 + sovFsm(uint64(m.Term))
	}
	if m.Leader != nil {
		l = m.Leader.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	if len(m.Candidates) > 0 {
		for _, e := range m.Candidates {
			l = e.Size()
			n += 1 + l + sovFsm(uint64(l))
		}
	}
	return n
}

func (m *LeaderElectionCandidate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFsm(uint64(l))
	}
	if m.SessionID != 0 {
		n += 1 + sovFsm(uint64(m.SessionID))
	}
	return n
}

func (m *LeaderElectionInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Input != nil {
		n += m.Input.Size()
	}
	return n
}

func (m *LeaderElectionInput_Enter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enter != nil {
		l = m.Enter.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *LeaderElectionInput_Withdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Withdraw != nil {
		l = m.Withdraw.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *LeaderElectionInput_Anoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Anoint != nil {
		l = m.Anoint.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *LeaderElectionInput_Promote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Promote != nil {
		l = m.Promote.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *LeaderElectionInput_Evict) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Evict != nil {
		l = m.Evict.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *LeaderElectionInput_GetTerm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GetTerm != nil {
		l = m.GetTerm.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *LeaderElectionInput_Watch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Watch != nil {
		l = m.Watch.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *LeaderElectionInput_Demote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Demote != nil {
		l = m.Demote.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *LeaderElectionOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Output != nil {
		n += m.Output.Size()
	}
	return n
}

func (m *LeaderElectionOutput_Enter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enter != nil {
		l = m.Enter.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *LeaderElectionOutput_Withdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Withdraw != nil {
		l = m.Withdraw.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *LeaderElectionOutput_Anoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Anoint != nil {
		l = m.Anoint.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *LeaderElectionOutput_Promote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Promote != nil {
		l = m.Promote.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *LeaderElectionOutput_Evict) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Evict != nil {
		l = m.Evict.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *LeaderElectionOutput_GetTerm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GetTerm != nil {
		l = m.GetTerm.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *LeaderElectionOutput_Watch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Watch != nil {
		l = m.Watch.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *LeaderElectionOutput_Demote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Demote != nil {
		l = m.Demote.Size()
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}
func (m *EnterInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Candidate)
	if l > 0 {
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}

func (m *EnterOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Term.Size()
	n += 1 + l + sovFsm(uint64(l))
	return n
}

func (m *WithdrawInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Candidate)
	if l > 0 {
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}

func (m *WithdrawOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Term.Size()
	n += 1 + l + sovFsm(uint64(l))
	return n
}

func (m *AnointInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Candidate)
	if l > 0 {
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}

func (m *AnointOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Term.Size()
	n += 1 + l + sovFsm(uint64(l))
	return n
}

func (m *PromoteInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Candidate)
	if l > 0 {
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}

func (m *PromoteOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Term.Size()
	n += 1 + l + sovFsm(uint64(l))
	return n
}

func (m *DemoteInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Candidate)
	if l > 0 {
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}

func (m *DemoteOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Term.Size()
	n += 1 + l + sovFsm(uint64(l))
	return n
}

func (m *EvictInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Candidate)
	if l > 0 {
		n += 1 + l + sovFsm(uint64(l))
	}
	return n
}

func (m *EvictOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Term.Size()
	n += 1 + l + sovFsm(uint64(l))
	return n
}

func (m *GetTermInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetTermOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Term.Size()
	n += 1 + l + sovFsm(uint64(l))
	return n
}

func (m *WatchInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *WatchOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Term.Size()
	n += 1 + l + sovFsm(uint64(l))
	return n
}

func (m *Term) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Leader)
	if l > 0 {
		n += 1 + l + sovFsm(uint64(l))
	}
	if len(m.Candidates) > 0 {
		for _, s := range m.Candidates {
			l = len(s)
			n += 1 + l + sovFsm(uint64(l))
		}
	}
	if m.Index != 0 {
		n += 1 + sovFsm(uint64(m.Index))
	}
	return n
}

func sovFsm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFsm(x uint64) (n int) {
	return sovFsm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LeaderElectionSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaderElectionSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaderElectionSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= github_com_atomix_multi_raft_storage_api_atomix_multiraft_v1.Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Leader == nil {
				m.Leader = &LeaderElectionCandidate{}
			}
			if err := m.Leader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Candidates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Candidates = append(m.Candidates, LeaderElectionCandidate{})
			if err := m.Candidates[len(m.Candidates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaderElectionCandidate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaderElectionCandidate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaderElectionCandidate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			m.SessionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionID |= github_com_atomix_multi_raft_storage_api_atomix_multiraft_v1.SessionID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaderElectionInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaderElectionInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaderElectionInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EnterInput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Input = &LeaderElectionInput_Enter{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdraw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WithdrawInput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Input = &LeaderElectionInput_Withdraw{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Anoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AnointInput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Input = &LeaderElectionInput_Anoint{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Promote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PromoteInput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Input = &LeaderElectionInput_Promote{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evict", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EvictInput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Input = &LeaderElectionInput_Evict{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetTerm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetTermInput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Input = &LeaderElectionInput_GetTerm{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Watch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WatchInput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Input = &LeaderElectionInput_Watch{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Demote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DemoteInput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Input = &LeaderElectionInput_Demote{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaderElectionOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaderElectionOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaderElectionOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EnterOutput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Output = &LeaderElectionOutput_Enter{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdraw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WithdrawOutput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Output = &LeaderElectionOutput_Withdraw{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Anoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AnointOutput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Output = &LeaderElectionOutput_Anoint{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Promote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PromoteOutput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Output = &LeaderElectionOutput_Promote{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evict", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EvictOutput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Output = &LeaderElectionOutput_Evict{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetTerm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetTermOutput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Output = &LeaderElectionOutput_GetTerm{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Watch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WatchOutput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Output = &LeaderElectionOutput_Watch{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Demote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DemoteOutput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Output = &LeaderElectionOutput_Demote{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Candidate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Candidate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Term.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Candidate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Candidate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Term.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnointInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnointInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnointInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Candidate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Candidate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnointOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnointOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnointOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Term.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromoteInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromoteInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromoteInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Candidate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Candidate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromoteOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromoteOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromoteOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Term.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DemoteInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DemoteInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DemoteInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Candidate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Candidate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DemoteOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DemoteOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DemoteOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Term.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvictInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvictInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvictInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Candidate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Candidate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvictOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvictOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvictOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Term.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTermInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTermInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTermInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTermOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTermOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTermOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Term.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Term.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Term) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Term: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Term: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Leader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Candidates", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Candidates = append(m.Candidates, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= github_com_atomix_multi_raft_storage_api_atomix_multiraft_v1.Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFsm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFsm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFsm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFsm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFsm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFsm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFsm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFsm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFsm = fmt.Errorf("proto: unexpected end of group")
)
