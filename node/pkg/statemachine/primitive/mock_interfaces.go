// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/atomix/multi-raft-storage/node/pkg/statemachine/primitive (interfaces: AnyContext,AnyPrimitive,AnySession,AnyProposal,AnyQuery,AnyCodec)

// Package primitive is a generated GoMock package.
package primitive

import (
	statemachine "github.com/atomix/multi-raft-storage/node/pkg/statemachine"
	snapshot "github.com/atomix/multi-raft-storage/node/pkg/statemachine/snapshot"
	logging "github.com/atomix/runtime/sdk/pkg/logging"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockAnyContext is a mock of AnyContext interface.
type MockAnyContext struct {
	ctrl     *gomock.Controller
	recorder *MockAnyContextMockRecorder
}

// MockAnyContextMockRecorder is the mock recorder for MockAnyContext.
type MockAnyContextMockRecorder struct {
	mock *MockAnyContext
}

// NewMockAnyContext creates a new mock instance.
func NewMockAnyContext(ctrl *gomock.Controller) *MockAnyContext {
	mock := &MockAnyContext{ctrl: ctrl}
	mock.recorder = &MockAnyContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnyContext) EXPECT() *MockAnyContextMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockAnyContext) ID() ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(ID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockAnyContextMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockAnyContext)(nil).ID))
}

// Index mocks base method.
func (m *MockAnyContext) Index() statemachine.Index {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index")
	ret0, _ := ret[0].(statemachine.Index)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockAnyContextMockRecorder) Index() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockAnyContext)(nil).Index))
}

// Log mocks base method.
func (m *MockAnyContext) Log() logging.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// Log indicates an expected call of Log.
func (mr *MockAnyContextMockRecorder) Log() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockAnyContext)(nil).Log))
}

// Name mocks base method.
func (m *MockAnyContext) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockAnyContextMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockAnyContext)(nil).Name))
}

// Namespace mocks base method.
func (m *MockAnyContext) Namespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// Namespace indicates an expected call of Namespace.
func (mr *MockAnyContextMockRecorder) Namespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespace", reflect.TypeOf((*MockAnyContext)(nil).Namespace))
}

// Proposals mocks base method.
func (m *MockAnyContext) Proposals() Proposals[interface{}, interface{}] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Proposals")
	ret0, _ := ret[0].(Proposals[interface{}, interface{}])
	return ret0
}

// Proposals indicates an expected call of Proposals.
func (mr *MockAnyContextMockRecorder) Proposals() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proposals", reflect.TypeOf((*MockAnyContext)(nil).Proposals))
}

// Scheduler mocks base method.
func (m *MockAnyContext) Scheduler() statemachine.Scheduler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scheduler")
	ret0, _ := ret[0].(statemachine.Scheduler)
	return ret0
}

// Scheduler indicates an expected call of Scheduler.
func (mr *MockAnyContextMockRecorder) Scheduler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scheduler", reflect.TypeOf((*MockAnyContext)(nil).Scheduler))
}

// Service mocks base method.
func (m *MockAnyContext) Service() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Service")
	ret0, _ := ret[0].(string)
	return ret0
}

// Service indicates an expected call of Service.
func (mr *MockAnyContextMockRecorder) Service() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockAnyContext)(nil).Service))
}

// Sessions mocks base method.
func (m *MockAnyContext) Sessions() Sessions[interface{}, interface{}] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sessions")
	ret0, _ := ret[0].(Sessions[interface{}, interface{}])
	return ret0
}

// Sessions indicates an expected call of Sessions.
func (mr *MockAnyContextMockRecorder) Sessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sessions", reflect.TypeOf((*MockAnyContext)(nil).Sessions))
}

// Time mocks base method.
func (m *MockAnyContext) Time() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Time")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Time indicates an expected call of Time.
func (mr *MockAnyContextMockRecorder) Time() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Time", reflect.TypeOf((*MockAnyContext)(nil).Time))
}

// MockAnyPrimitive is a mock of AnyPrimitive interface.
type MockAnyPrimitive struct {
	ctrl     *gomock.Controller
	recorder *MockAnyPrimitiveMockRecorder
}

// MockAnyPrimitiveMockRecorder is the mock recorder for MockAnyPrimitive.
type MockAnyPrimitiveMockRecorder struct {
	mock *MockAnyPrimitive
}

// NewMockAnyPrimitive creates a new mock instance.
func NewMockAnyPrimitive(ctrl *gomock.Controller) *MockAnyPrimitive {
	mock := &MockAnyPrimitive{ctrl: ctrl}
	mock.recorder = &MockAnyPrimitiveMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnyPrimitive) EXPECT() *MockAnyPrimitiveMockRecorder {
	return m.recorder
}

// Propose mocks base method.
func (m *MockAnyPrimitive) Propose(arg0 Proposal[interface{}, interface{}]) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Propose", arg0)
}

// Propose indicates an expected call of Propose.
func (mr *MockAnyPrimitiveMockRecorder) Propose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Propose", reflect.TypeOf((*MockAnyPrimitive)(nil).Propose), arg0)
}

// Query mocks base method.
func (m *MockAnyPrimitive) Query(arg0 Query[interface{}, interface{}]) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Query", arg0)
}

// Query indicates an expected call of Query.
func (mr *MockAnyPrimitiveMockRecorder) Query(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockAnyPrimitive)(nil).Query), arg0)
}

// Recover mocks base method.
func (m *MockAnyPrimitive) Recover(arg0 *snapshot.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recover", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Recover indicates an expected call of Recover.
func (mr *MockAnyPrimitiveMockRecorder) Recover(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recover", reflect.TypeOf((*MockAnyPrimitive)(nil).Recover), arg0)
}

// Snapshot mocks base method.
func (m *MockAnyPrimitive) Snapshot(arg0 *snapshot.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockAnyPrimitiveMockRecorder) Snapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockAnyPrimitive)(nil).Snapshot), arg0)
}

// MockAnySession is a mock of AnySession interface.
type MockAnySession struct {
	ctrl     *gomock.Controller
	recorder *MockAnySessionMockRecorder
}

// MockAnySessionMockRecorder is the mock recorder for MockAnySession.
type MockAnySessionMockRecorder struct {
	mock *MockAnySession
}

// NewMockAnySession creates a new mock instance.
func NewMockAnySession(ctrl *gomock.Controller) *MockAnySession {
	mock := &MockAnySession{ctrl: ctrl}
	mock.recorder = &MockAnySessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnySession) EXPECT() *MockAnySessionMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockAnySession) ID() SessionID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(SessionID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockAnySessionMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockAnySession)(nil).ID))
}

// Log mocks base method.
func (m *MockAnySession) Log() logging.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// Log indicates an expected call of Log.
func (mr *MockAnySessionMockRecorder) Log() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockAnySession)(nil).Log))
}

// Proposals mocks base method.
func (m *MockAnySession) Proposals() Proposals[interface{}, interface{}] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Proposals")
	ret0, _ := ret[0].(Proposals[interface{}, interface{}])
	return ret0
}

// Proposals indicates an expected call of Proposals.
func (mr *MockAnySessionMockRecorder) Proposals() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proposals", reflect.TypeOf((*MockAnySession)(nil).Proposals))
}

// State mocks base method.
func (m *MockAnySession) State() SessionState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(SessionState)
	return ret0
}

// State indicates an expected call of State.
func (mr *MockAnySessionMockRecorder) State() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockAnySession)(nil).State))
}

// Watch mocks base method.
func (m *MockAnySession) Watch(arg0 statemachine.WatchFunc[SessionState]) statemachine.CancelFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0)
	ret0, _ := ret[0].(statemachine.CancelFunc)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockAnySessionMockRecorder) Watch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockAnySession)(nil).Watch), arg0)
}

// MockAnyProposal is a mock of AnyProposal interface.
type MockAnyProposal struct {
	ctrl     *gomock.Controller
	recorder *MockAnyProposalMockRecorder
}

// MockAnyProposalMockRecorder is the mock recorder for MockAnyProposal.
type MockAnyProposalMockRecorder struct {
	mock *MockAnyProposal
}

// NewMockAnyProposal creates a new mock instance.
func NewMockAnyProposal(ctrl *gomock.Controller) *MockAnyProposal {
	mock := &MockAnyProposal{ctrl: ctrl}
	mock.recorder = &MockAnyProposalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnyProposal) EXPECT() *MockAnyProposalMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockAnyProposal) Cancel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cancel")
}

// Cancel indicates an expected call of Cancel.
func (mr *MockAnyProposalMockRecorder) Cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockAnyProposal)(nil).Cancel))
}

// Close mocks base method.
func (m *MockAnyProposal) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockAnyProposalMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAnyProposal)(nil).Close))
}

// Error mocks base method.
func (m *MockAnyProposal) Error(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", arg0)
}

// Error indicates an expected call of Error.
func (mr *MockAnyProposalMockRecorder) Error(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockAnyProposal)(nil).Error), arg0)
}

// ID mocks base method.
func (m *MockAnyProposal) ID() statemachine.ProposalID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(statemachine.ProposalID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockAnyProposalMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockAnyProposal)(nil).ID))
}

// Input mocks base method.
func (m *MockAnyProposal) Input() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Input")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Input indicates an expected call of Input.
func (mr *MockAnyProposalMockRecorder) Input() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Input", reflect.TypeOf((*MockAnyProposal)(nil).Input))
}

// Log mocks base method.
func (m *MockAnyProposal) Log() logging.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// Log indicates an expected call of Log.
func (mr *MockAnyProposalMockRecorder) Log() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockAnyProposal)(nil).Log))
}

// Output mocks base method.
func (m *MockAnyProposal) Output(arg0 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Output", arg0)
}

// Output indicates an expected call of Output.
func (mr *MockAnyProposalMockRecorder) Output(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Output", reflect.TypeOf((*MockAnyProposal)(nil).Output), arg0)
}

// Session mocks base method.
func (m *MockAnyProposal) Session() Session[interface{}, interface{}] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session")
	ret0, _ := ret[0].(Session[interface{}, interface{}])
	return ret0
}

// Session indicates an expected call of Session.
func (mr *MockAnyProposalMockRecorder) Session() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockAnyProposal)(nil).Session))
}

// Watch mocks base method.
func (m *MockAnyProposal) Watch(arg0 statemachine.WatchFunc[statemachine.Phase]) statemachine.CancelFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0)
	ret0, _ := ret[0].(statemachine.CancelFunc)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockAnyProposalMockRecorder) Watch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockAnyProposal)(nil).Watch), arg0)
}

// MockAnyQuery is a mock of AnyQuery interface.
type MockAnyQuery struct {
	ctrl     *gomock.Controller
	recorder *MockAnyQueryMockRecorder
}

// MockAnyQueryMockRecorder is the mock recorder for MockAnyQuery.
type MockAnyQueryMockRecorder struct {
	mock *MockAnyQuery
}

// NewMockAnyQuery creates a new mock instance.
func NewMockAnyQuery(ctrl *gomock.Controller) *MockAnyQuery {
	mock := &MockAnyQuery{ctrl: ctrl}
	mock.recorder = &MockAnyQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnyQuery) EXPECT() *MockAnyQueryMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockAnyQuery) Cancel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cancel")
}

// Cancel indicates an expected call of Cancel.
func (mr *MockAnyQueryMockRecorder) Cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockAnyQuery)(nil).Cancel))
}

// Close mocks base method.
func (m *MockAnyQuery) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockAnyQueryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAnyQuery)(nil).Close))
}

// Error mocks base method.
func (m *MockAnyQuery) Error(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", arg0)
}

// Error indicates an expected call of Error.
func (mr *MockAnyQueryMockRecorder) Error(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockAnyQuery)(nil).Error), arg0)
}

// ID mocks base method.
func (m *MockAnyQuery) ID() statemachine.QueryID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(statemachine.QueryID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockAnyQueryMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockAnyQuery)(nil).ID))
}

// Input mocks base method.
func (m *MockAnyQuery) Input() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Input")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Input indicates an expected call of Input.
func (mr *MockAnyQueryMockRecorder) Input() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Input", reflect.TypeOf((*MockAnyQuery)(nil).Input))
}

// Log mocks base method.
func (m *MockAnyQuery) Log() logging.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// Log indicates an expected call of Log.
func (mr *MockAnyQueryMockRecorder) Log() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockAnyQuery)(nil).Log))
}

// Output mocks base method.
func (m *MockAnyQuery) Output(arg0 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Output", arg0)
}

// Output indicates an expected call of Output.
func (mr *MockAnyQueryMockRecorder) Output(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Output", reflect.TypeOf((*MockAnyQuery)(nil).Output), arg0)
}

// Session mocks base method.
func (m *MockAnyQuery) Session() Session[interface{}, interface{}] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session")
	ret0, _ := ret[0].(Session[interface{}, interface{}])
	return ret0
}

// Session indicates an expected call of Session.
func (mr *MockAnyQueryMockRecorder) Session() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockAnyQuery)(nil).Session))
}

// Watch mocks base method.
func (m *MockAnyQuery) Watch(arg0 statemachine.WatchFunc[statemachine.Phase]) statemachine.CancelFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0)
	ret0, _ := ret[0].(statemachine.CancelFunc)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockAnyQueryMockRecorder) Watch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockAnyQuery)(nil).Watch), arg0)
}

// MockAnyCodec is a mock of AnyCodec interface.
type MockAnyCodec struct {
	ctrl     *gomock.Controller
	recorder *MockAnyCodecMockRecorder
}

// MockAnyCodecMockRecorder is the mock recorder for MockAnyCodec.
type MockAnyCodecMockRecorder struct {
	mock *MockAnyCodec
}

// NewMockAnyCodec creates a new mock instance.
func NewMockAnyCodec(ctrl *gomock.Controller) *MockAnyCodec {
	mock := &MockAnyCodec{ctrl: ctrl}
	mock.recorder = &MockAnyCodecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnyCodec) EXPECT() *MockAnyCodecMockRecorder {
	return m.recorder
}

// DecodeInput mocks base method.
func (m *MockAnyCodec) DecodeInput(arg0 []byte) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeInput", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeInput indicates an expected call of DecodeInput.
func (mr *MockAnyCodecMockRecorder) DecodeInput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeInput", reflect.TypeOf((*MockAnyCodec)(nil).DecodeInput), arg0)
}

// EncodeOutput mocks base method.
func (m *MockAnyCodec) EncodeOutput(arg0 interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeOutput", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodeOutput indicates an expected call of EncodeOutput.
func (mr *MockAnyCodecMockRecorder) EncodeOutput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeOutput", reflect.TypeOf((*MockAnyCodec)(nil).EncodeOutput), arg0)
}
