/*
SPDX-FileCopyrightText: 2022-present Open Networking Foundation <info@opennetworking.org>

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package atomix.multiraft.v1;

import "google/protobuf/timestamp.proto";
import "gogoproto/gogo.proto";
import "atomix/multiraft/v1/config.proto";
import "atomix/multiraft/v1/headers.proto";
import "atomix/multiraft/v1/fsm.proto";

service Partition {
    rpc OpenSession(OpenSessionRequest) returns (OpenSessionResponse);
    rpc KeepAlive(KeepAliveRequest) returns (KeepAliveResponse);
    rpc CloseSession(CloseSessionRequest) returns (CloseSessionResponse);
    rpc Watch(WatchPartitionRequest) returns (stream PartitionEvent);
}

message OpenSessionRequest {
    PartitionRequestHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
    OpenSessionInput input = 2 [
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message OpenSessionResponse {
    PartitionResponseHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
    OpenSessionOutput output = 2 [
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message KeepAliveRequest {
    PartitionRequestHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
    KeepAliveInput input = 2 [
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message KeepAliveResponse {
    PartitionResponseHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
    KeepAliveOutput output = 2 [
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message CloseSessionRequest {
    PartitionRequestHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
    CloseSessionInput input = 2 [
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message CloseSessionResponse {
    PartitionResponseHeaders headers = 1 [
        (gogoproto.nullable) = false
    ];
    CloseSessionOutput output = 2 [
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message WatchPartitionRequest {
    uint32 partition_id = 1 [
        (gogoproto.customname) = "PartitionID",
        (gogoproto.casttype) = "PartitionID"
    ];
}

message PartitionEvent {
    google.protobuf.Timestamp timestamp = 1 [
        (gogoproto.nullable) = false,
        (gogoproto.stdtime) = true
    ];
    uint32 partition_id = 2 [
        (gogoproto.customname) = "PartitionID",
        (gogoproto.casttype) = "PartitionID"
    ];
    oneof event {
        MemberReadyEvent member_ready = 3;
        LeaderUpdatedEvent leader_updated = 4;
        MembershipChangedEvent membership_changed = 5;
        SendSnapshotStartedEvent send_snapshot_started = 6;
        SendSnapshotCompletedEvent send_snapshot_completed = 7;
        SendSnapshotAbortedEvent send_snapshot_aborted = 8;
        SnapshotReceivedEvent snapshot_received = 9;
        SnapshotRecoveredEvent snapshot_recovered = 10;
        SnapshotCreatedEvent snapshot_created = 11;
        SnapshotCompactedEvent snapshot_compacted = 12;
        LogCompactedEvent log_compacted = 13;
        LogDBCompactedEvent logdb_compacted = 14;
        ServiceConfigChangedEvent service_config_changed = 15;
    }
}

message ServiceConfigChangedEvent {
    ServiceConfig config = 1 [
        (gogoproto.nullable) = false
    ];
}

message MemberReadyEvent {
    uint64 node_id = 1 [
        (gogoproto.customname) = "NodeID",
        (gogoproto.casttype) = "NodeID"
    ];
}

message MembershipChangedEvent {
    uint64 node_id = 1 [
        (gogoproto.customname) = "NodeID",
        (gogoproto.casttype) = "NodeID"
    ];
}

message LeaderUpdatedEvent {
    uint64 term = 1 [
        (gogoproto.casttype) = "Term"
    ];
    uint64 leader = 2 [
        (gogoproto.casttype) = "NodeID"
    ];
}


message SendSnapshotStartedEvent {
    uint64 index = 1 [
        (gogoproto.casttype) = "Index"
    ];
    uint64 to = 2 [
        (gogoproto.casttype) = "NodeID"
    ];
}

message SendSnapshotCompletedEvent {
    uint64 index = 1 [
        (gogoproto.casttype) = "Index"
    ];
    uint64 to = 2 [
        (gogoproto.casttype) = "NodeID"
    ];
}

message SendSnapshotAbortedEvent {
    uint64 index = 1 [
        (gogoproto.casttype) = "Index"
    ];
    uint64 to = 2 [
        (gogoproto.casttype) = "NodeID"
    ];
}

message SnapshotReceivedEvent {
    uint64 index = 1 [
        (gogoproto.casttype) = "Index"
    ];
    uint64 from = 2 [
        (gogoproto.casttype) = "NodeID"
    ];
}

message SnapshotRecoveredEvent {
    uint64 index = 1 [
        (gogoproto.casttype) = "Index"
    ];
}

message SnapshotCreatedEvent {
    uint64 index = 1 [
        (gogoproto.casttype) = "Index"
    ];
}

message SnapshotCompactedEvent {
    uint64 index = 1 [
        (gogoproto.casttype) = "Index"
    ];
}

message LogEvent {
    uint64 index = 1 [
        (gogoproto.casttype) = "Index"
    ];
}

message LogCompactedEvent {
    uint64 index = 1 [
        (gogoproto.casttype) = "Index"
    ];
}

message LogDBCompactedEvent {
    uint64 index = 1 [
        (gogoproto.casttype) = "Index"
    ];
}
