/*
SPDX-FileCopyrightText: 2022-present Open Networking Foundation <info@opennetworking.org>

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package atomix.multiraft.value.v1;

import "atomix/multiraft/value/v1/fsm.proto";
import "atomix/multiraft/v1/descriptor.proto";
import "atomix/multiraft/v1/headers.proto";
import "gogoproto/gogo.proto";

// Value is a service for a value primitive
service Value {
    // Set sets the value
    rpc Set (SetRequest) returns (SetResponse) {
        option (atomix.multiraft.v1.operation_type) = COMMAND;
    }

    // Get gets the value
    rpc Get (GetRequest) returns (GetResponse) {
        option (atomix.multiraft.v1.operation_type) = QUERY;
    }

    // Watch watches the value
    rpc Watch (WatchRequest) returns (stream WatchResponse) {
        option (atomix.multiraft.v1.operation_type) = QUERY;
    }
}

message GetRequest {
    atomix.multiraft.v1.QueryRequestHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    GetInput input = 2 [
        (atomix.multiraft.v1.input) = true,
        (gogoproto.embed) = true
    ];
}

message GetResponse {
    atomix.multiraft.v1.QueryResponseHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    GetOutput output = 2 [
        (atomix.multiraft.v1.output) = true,
        (gogoproto.embed) = true
    ];
}

message SetRequest {
    atomix.multiraft.v1.CommandRequestHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    SetInput input = 2 [
        (atomix.multiraft.v1.input) = true,
        (gogoproto.embed) = true
    ];
}

message SetResponse {
    atomix.multiraft.v1.CommandResponseHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    SetOutput output = 2 [
        (atomix.multiraft.v1.output) = true,
        (gogoproto.embed) = true
    ];
}

message WatchRequest {
    atomix.multiraft.v1.QueryRequestHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    WatchInput input = 2 [
        (atomix.multiraft.v1.input) = true,
        (gogoproto.embed) = true
    ];
}

message WatchResponse {
    atomix.multiraft.v1.QueryResponseHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    WatchOutput output = 2 [
        (atomix.multiraft.v1.output) = true,
        (gogoproto.embed) = true
    ];
}
