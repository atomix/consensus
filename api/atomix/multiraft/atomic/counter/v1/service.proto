/*
SPDX-FileCopyrightText: 2022-present Open Networking Foundation <info@opennetworking.org>

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package atomix.multiraft.atomic.counter.v1;

import "atomix/multiraft/atomic/counter/v1/fsm.proto";
import "atomix/multiraft/v1/descriptor.proto";
import "atomix/multiraft/v1/headers.proto";
import "gogoproto/gogo.proto";

// AtomicCounter is a service for a counter primitive
service AtomicCounter {
    // Set sets the counter value
    rpc Set (SetRequest) returns (SetResponse) {
        option (atomix.multiraft.v1.operation_type) = COMMAND;
    }

    // Update sets the counter value
    rpc Update (UpdateRequest) returns (UpdateResponse) {
        option (atomix.multiraft.v1.operation_type) = COMMAND;
    }

    // Get gets the current counter value
    rpc Get (GetRequest) returns (GetResponse) {
        option (atomix.multiraft.v1.operation_type) = QUERY;
    }

    // Increment increments the counter value
    rpc Increment (IncrementRequest) returns (IncrementResponse) {
        option (atomix.multiraft.v1.operation_type) = COMMAND;
    }

    // Decrement decrements the counter value
    rpc Decrement (DecrementRequest) returns (DecrementResponse) {
        option (atomix.multiraft.v1.operation_type) = COMMAND;
    }
}

message IncrementRequest {
    atomix.multiraft.v1.CommandRequestHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    IncrementInput input = 2 [
        (atomix.multiraft.v1.input) = true,
        (gogoproto.embed) = true
    ];
}

message IncrementResponse {
    atomix.multiraft.v1.CommandResponseHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    IncrementOutput output = 2 [
        (atomix.multiraft.v1.output) = true,
        (gogoproto.embed) = true
    ];
}

message DecrementRequest {
    atomix.multiraft.v1.CommandRequestHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    DecrementInput input = 2 [
        (atomix.multiraft.v1.input) = true,
        (gogoproto.embed) = true
    ];
}

message DecrementResponse {
    atomix.multiraft.v1.CommandResponseHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    DecrementOutput output = 2 [
        (atomix.multiraft.v1.output) = true,
        (gogoproto.embed) = true
    ];
}

message GetRequest {
    atomix.multiraft.v1.QueryRequestHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    GetInput input = 2 [
        (atomix.multiraft.v1.input) = true,
        (gogoproto.embed) = true
    ];
}

message GetResponse {
    atomix.multiraft.v1.QueryResponseHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    GetOutput output = 2 [
        (atomix.multiraft.v1.output) = true,
        (gogoproto.embed) = true
    ];
}

message SetRequest {
    atomix.multiraft.v1.CommandRequestHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    SetInput input = 2 [
        (atomix.multiraft.v1.input) = true,
        (gogoproto.embed) = true
    ];
}

message SetResponse {
    atomix.multiraft.v1.CommandResponseHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    SetOutput output = 2 [
        (atomix.multiraft.v1.output) = true,
        (gogoproto.embed) = true
    ];
}

message UpdateRequest {
    atomix.multiraft.v1.CommandRequestHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    UpdateInput input = 2 [
        (atomix.multiraft.v1.input) = true,
        (gogoproto.embed) = true
    ];
}

message UpdateResponse {
    atomix.multiraft.v1.CommandResponseHeaders headers = 1 [
        (atomix.multiraft.v1.headers) = true
    ];
    UpdateOutput output = 2 [
        (atomix.multiraft.v1.output) = true,
        (gogoproto.embed) = true
    ];
}
