// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/multiraft/v1/headers.proto

package v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PartitionResponseHeaders_Status int32

const (
	PartitionResponseHeaders_UNKNOWN        PartitionResponseHeaders_Status = 0
	PartitionResponseHeaders_OK             PartitionResponseHeaders_Status = 1
	PartitionResponseHeaders_ERROR          PartitionResponseHeaders_Status = 2
	PartitionResponseHeaders_CANCELED       PartitionResponseHeaders_Status = 3
	PartitionResponseHeaders_NOT_FOUND      PartitionResponseHeaders_Status = 4
	PartitionResponseHeaders_ALREADY_EXISTS PartitionResponseHeaders_Status = 5
	PartitionResponseHeaders_UNAUTHORIZED   PartitionResponseHeaders_Status = 6
	PartitionResponseHeaders_FORBIDDEN      PartitionResponseHeaders_Status = 7
	PartitionResponseHeaders_CONFLICT       PartitionResponseHeaders_Status = 8
	PartitionResponseHeaders_INVALID        PartitionResponseHeaders_Status = 9
	PartitionResponseHeaders_UNAVAILABLE    PartitionResponseHeaders_Status = 10
	PartitionResponseHeaders_NOT_SUPPORTED  PartitionResponseHeaders_Status = 11
	PartitionResponseHeaders_TIMEOUT        PartitionResponseHeaders_Status = 12
	PartitionResponseHeaders_INTERNAL       PartitionResponseHeaders_Status = 13
)

var PartitionResponseHeaders_Status_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "OK",
	2:  "ERROR",
	3:  "CANCELED",
	4:  "NOT_FOUND",
	5:  "ALREADY_EXISTS",
	6:  "UNAUTHORIZED",
	7:  "FORBIDDEN",
	8:  "CONFLICT",
	9:  "INVALID",
	10: "UNAVAILABLE",
	11: "NOT_SUPPORTED",
	12: "TIMEOUT",
	13: "INTERNAL",
}

var PartitionResponseHeaders_Status_value = map[string]int32{
	"UNKNOWN":        0,
	"OK":             1,
	"ERROR":          2,
	"CANCELED":       3,
	"NOT_FOUND":      4,
	"ALREADY_EXISTS": 5,
	"UNAUTHORIZED":   6,
	"FORBIDDEN":      7,
	"CONFLICT":       8,
	"INVALID":        9,
	"UNAVAILABLE":    10,
	"NOT_SUPPORTED":  11,
	"TIMEOUT":        12,
	"INTERNAL":       13,
}

func (x PartitionResponseHeaders_Status) String() string {
	return proto.EnumName(PartitionResponseHeaders_Status_name, int32(x))
}

func (PartitionResponseHeaders_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_aa41837c4ac4528c, []int{1, 0}
}

type PartitionRequestHeaders struct {
	PartitionID PartitionID `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3,casttype=PartitionID" json:"partition_id,omitempty"`
}

func (m *PartitionRequestHeaders) Reset()         { *m = PartitionRequestHeaders{} }
func (m *PartitionRequestHeaders) String() string { return proto.CompactTextString(m) }
func (*PartitionRequestHeaders) ProtoMessage()    {}
func (*PartitionRequestHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa41837c4ac4528c, []int{0}
}
func (m *PartitionRequestHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionRequestHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartitionRequestHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartitionRequestHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionRequestHeaders.Merge(m, src)
}
func (m *PartitionRequestHeaders) XXX_Size() int {
	return m.Size()
}
func (m *PartitionRequestHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionRequestHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionRequestHeaders proto.InternalMessageInfo

func (m *PartitionRequestHeaders) GetPartitionID() PartitionID {
	if m != nil {
		return m.PartitionID
	}
	return 0
}

type PartitionResponseHeaders struct {
	Index   Index                           `protobuf:"varint,1,opt,name=index,proto3,casttype=Index" json:"index,omitempty"`
	Status  PartitionResponseHeaders_Status `protobuf:"varint,2,opt,name=status,proto3,enum=atomix.multiraft.v1.PartitionResponseHeaders_Status" json:"status,omitempty"`
	Message string                          `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *PartitionResponseHeaders) Reset()         { *m = PartitionResponseHeaders{} }
func (m *PartitionResponseHeaders) String() string { return proto.CompactTextString(m) }
func (*PartitionResponseHeaders) ProtoMessage()    {}
func (*PartitionResponseHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa41837c4ac4528c, []int{1}
}
func (m *PartitionResponseHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionResponseHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartitionResponseHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartitionResponseHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionResponseHeaders.Merge(m, src)
}
func (m *PartitionResponseHeaders) XXX_Size() int {
	return m.Size()
}
func (m *PartitionResponseHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionResponseHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionResponseHeaders proto.InternalMessageInfo

func (m *PartitionResponseHeaders) GetIndex() Index {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *PartitionResponseHeaders) GetStatus() PartitionResponseHeaders_Status {
	if m != nil {
		return m.Status
	}
	return PartitionResponseHeaders_UNKNOWN
}

func (m *PartitionResponseHeaders) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SessionRequestHeaders struct {
	PartitionRequestHeaders `protobuf:"bytes,1,opt,name=partition,proto3,embedded=partition" json:"partition"`
	SessionID               SessionID `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3,casttype=SessionID" json:"session_id,omitempty"`
}

func (m *SessionRequestHeaders) Reset()         { *m = SessionRequestHeaders{} }
func (m *SessionRequestHeaders) String() string { return proto.CompactTextString(m) }
func (*SessionRequestHeaders) ProtoMessage()    {}
func (*SessionRequestHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa41837c4ac4528c, []int{2}
}
func (m *SessionRequestHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionRequestHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionRequestHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionRequestHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionRequestHeaders.Merge(m, src)
}
func (m *SessionRequestHeaders) XXX_Size() int {
	return m.Size()
}
func (m *SessionRequestHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionRequestHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_SessionRequestHeaders proto.InternalMessageInfo

func (m *SessionRequestHeaders) GetSessionID() SessionID {
	if m != nil {
		return m.SessionID
	}
	return 0
}

type SessionResponseHeaders struct {
	PartitionResponseHeaders `protobuf:"bytes,1,opt,name=partition,proto3,embedded=partition" json:"partition"`
}

func (m *SessionResponseHeaders) Reset()         { *m = SessionResponseHeaders{} }
func (m *SessionResponseHeaders) String() string { return proto.CompactTextString(m) }
func (*SessionResponseHeaders) ProtoMessage()    {}
func (*SessionResponseHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa41837c4ac4528c, []int{3}
}
func (m *SessionResponseHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionResponseHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionResponseHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionResponseHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionResponseHeaders.Merge(m, src)
}
func (m *SessionResponseHeaders) XXX_Size() int {
	return m.Size()
}
func (m *SessionResponseHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionResponseHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_SessionResponseHeaders proto.InternalMessageInfo

type ServiceRequestHeaders struct {
	SessionRequestHeaders `protobuf:"bytes,1,opt,name=session,proto3,embedded=session" json:"session"`
	ServiceID             ServiceID `protobuf:"varint,2,opt,name=service_id,json=serviceId,proto3,casttype=ServiceID" json:"service_id,omitempty"`
}

func (m *ServiceRequestHeaders) Reset()         { *m = ServiceRequestHeaders{} }
func (m *ServiceRequestHeaders) String() string { return proto.CompactTextString(m) }
func (*ServiceRequestHeaders) ProtoMessage()    {}
func (*ServiceRequestHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa41837c4ac4528c, []int{4}
}
func (m *ServiceRequestHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceRequestHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceRequestHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceRequestHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceRequestHeaders.Merge(m, src)
}
func (m *ServiceRequestHeaders) XXX_Size() int {
	return m.Size()
}
func (m *ServiceRequestHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceRequestHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceRequestHeaders proto.InternalMessageInfo

func (m *ServiceRequestHeaders) GetServiceID() ServiceID {
	if m != nil {
		return m.ServiceID
	}
	return 0
}

type ServiceResponseHeaders struct {
	SessionResponseHeaders `protobuf:"bytes,1,opt,name=session,proto3,embedded=session" json:"session"`
}

func (m *ServiceResponseHeaders) Reset()         { *m = ServiceResponseHeaders{} }
func (m *ServiceResponseHeaders) String() string { return proto.CompactTextString(m) }
func (*ServiceResponseHeaders) ProtoMessage()    {}
func (*ServiceResponseHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa41837c4ac4528c, []int{5}
}
func (m *ServiceResponseHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceResponseHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceResponseHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceResponseHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceResponseHeaders.Merge(m, src)
}
func (m *ServiceResponseHeaders) XXX_Size() int {
	return m.Size()
}
func (m *ServiceResponseHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceResponseHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceResponseHeaders proto.InternalMessageInfo

type OperationRequestHeaders struct {
	ServiceRequestHeaders `protobuf:"bytes,1,opt,name=session,proto3,embedded=session" json:"session"`
	OperationID           OperationID `protobuf:"varint,2,opt,name=operation_id,json=operationId,proto3,casttype=OperationID" json:"operation_id,omitempty"`
}

func (m *OperationRequestHeaders) Reset()         { *m = OperationRequestHeaders{} }
func (m *OperationRequestHeaders) String() string { return proto.CompactTextString(m) }
func (*OperationRequestHeaders) ProtoMessage()    {}
func (*OperationRequestHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa41837c4ac4528c, []int{6}
}
func (m *OperationRequestHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationRequestHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperationRequestHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperationRequestHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationRequestHeaders.Merge(m, src)
}
func (m *OperationRequestHeaders) XXX_Size() int {
	return m.Size()
}
func (m *OperationRequestHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationRequestHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_OperationRequestHeaders proto.InternalMessageInfo

func (m *OperationRequestHeaders) GetOperationID() OperationID {
	if m != nil {
		return m.OperationID
	}
	return 0
}

type OperationResponseHeaders struct {
	ServiceResponseHeaders `protobuf:"bytes,1,opt,name=session,proto3,embedded=session" json:"session"`
}

func (m *OperationResponseHeaders) Reset()         { *m = OperationResponseHeaders{} }
func (m *OperationResponseHeaders) String() string { return proto.CompactTextString(m) }
func (*OperationResponseHeaders) ProtoMessage()    {}
func (*OperationResponseHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa41837c4ac4528c, []int{7}
}
func (m *OperationResponseHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationResponseHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperationResponseHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperationResponseHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationResponseHeaders.Merge(m, src)
}
func (m *OperationResponseHeaders) XXX_Size() int {
	return m.Size()
}
func (m *OperationResponseHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationResponseHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_OperationResponseHeaders proto.InternalMessageInfo

type CommandRequestHeaders struct {
	OperationRequestHeaders `protobuf:"bytes,1,opt,name=operation,proto3,embedded=operation" json:"operation"`
	CommandSequenceNum      CommandSequenceNum `protobuf:"varint,2,opt,name=command_sequence_num,json=commandSequenceNum,proto3,casttype=CommandSequenceNum" json:"command_sequence_num,omitempty"`
}

func (m *CommandRequestHeaders) Reset()         { *m = CommandRequestHeaders{} }
func (m *CommandRequestHeaders) String() string { return proto.CompactTextString(m) }
func (*CommandRequestHeaders) ProtoMessage()    {}
func (*CommandRequestHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa41837c4ac4528c, []int{8}
}
func (m *CommandRequestHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandRequestHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandRequestHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandRequestHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandRequestHeaders.Merge(m, src)
}
func (m *CommandRequestHeaders) XXX_Size() int {
	return m.Size()
}
func (m *CommandRequestHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandRequestHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_CommandRequestHeaders proto.InternalMessageInfo

func (m *CommandRequestHeaders) GetCommandSequenceNum() CommandSequenceNum {
	if m != nil {
		return m.CommandSequenceNum
	}
	return 0
}

type CommandResponseHeaders struct {
	OperationResponseHeaders `protobuf:"bytes,1,opt,name=operation,proto3,embedded=operation" json:"operation"`
	OutputSequenceNum        OutputSequenceNum `protobuf:"varint,2,opt,name=output_sequence_num,json=outputSequenceNum,proto3,casttype=OutputSequenceNum" json:"output_sequence_num,omitempty"`
}

func (m *CommandResponseHeaders) Reset()         { *m = CommandResponseHeaders{} }
func (m *CommandResponseHeaders) String() string { return proto.CompactTextString(m) }
func (*CommandResponseHeaders) ProtoMessage()    {}
func (*CommandResponseHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa41837c4ac4528c, []int{9}
}
func (m *CommandResponseHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandResponseHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandResponseHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandResponseHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandResponseHeaders.Merge(m, src)
}
func (m *CommandResponseHeaders) XXX_Size() int {
	return m.Size()
}
func (m *CommandResponseHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandResponseHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_CommandResponseHeaders proto.InternalMessageInfo

func (m *CommandResponseHeaders) GetOutputSequenceNum() OutputSequenceNum {
	if m != nil {
		return m.OutputSequenceNum
	}
	return 0
}

type QueryRequestHeaders struct {
	OperationRequestHeaders `protobuf:"bytes,1,opt,name=operation,proto3,embedded=operation" json:"operation"`
	LastCommandSequenceNum  CommandSequenceNum `protobuf:"varint,2,opt,name=last_command_sequence_num,json=lastCommandSequenceNum,proto3,casttype=CommandSequenceNum" json:"last_command_sequence_num,omitempty"`
}

func (m *QueryRequestHeaders) Reset()         { *m = QueryRequestHeaders{} }
func (m *QueryRequestHeaders) String() string { return proto.CompactTextString(m) }
func (*QueryRequestHeaders) ProtoMessage()    {}
func (*QueryRequestHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa41837c4ac4528c, []int{10}
}
func (m *QueryRequestHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRequestHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRequestHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRequestHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequestHeaders.Merge(m, src)
}
func (m *QueryRequestHeaders) XXX_Size() int {
	return m.Size()
}
func (m *QueryRequestHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequestHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequestHeaders proto.InternalMessageInfo

func (m *QueryRequestHeaders) GetLastCommandSequenceNum() CommandSequenceNum {
	if m != nil {
		return m.LastCommandSequenceNum
	}
	return 0
}

type QueryResponseHeaders struct {
	OperationResponseHeaders `protobuf:"bytes,1,opt,name=operation,proto3,embedded=operation" json:"operation"`
}

func (m *QueryResponseHeaders) Reset()         { *m = QueryResponseHeaders{} }
func (m *QueryResponseHeaders) String() string { return proto.CompactTextString(m) }
func (*QueryResponseHeaders) ProtoMessage()    {}
func (*QueryResponseHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa41837c4ac4528c, []int{11}
}
func (m *QueryResponseHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResponseHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResponseHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryResponseHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResponseHeaders.Merge(m, src)
}
func (m *QueryResponseHeaders) XXX_Size() int {
	return m.Size()
}
func (m *QueryResponseHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResponseHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResponseHeaders proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("atomix.multiraft.v1.PartitionResponseHeaders_Status", PartitionResponseHeaders_Status_name, PartitionResponseHeaders_Status_value)
	proto.RegisterType((*PartitionRequestHeaders)(nil), "atomix.multiraft.v1.PartitionRequestHeaders")
	proto.RegisterType((*PartitionResponseHeaders)(nil), "atomix.multiraft.v1.PartitionResponseHeaders")
	proto.RegisterType((*SessionRequestHeaders)(nil), "atomix.multiraft.v1.SessionRequestHeaders")
	proto.RegisterType((*SessionResponseHeaders)(nil), "atomix.multiraft.v1.SessionResponseHeaders")
	proto.RegisterType((*ServiceRequestHeaders)(nil), "atomix.multiraft.v1.ServiceRequestHeaders")
	proto.RegisterType((*ServiceResponseHeaders)(nil), "atomix.multiraft.v1.ServiceResponseHeaders")
	proto.RegisterType((*OperationRequestHeaders)(nil), "atomix.multiraft.v1.OperationRequestHeaders")
	proto.RegisterType((*OperationResponseHeaders)(nil), "atomix.multiraft.v1.OperationResponseHeaders")
	proto.RegisterType((*CommandRequestHeaders)(nil), "atomix.multiraft.v1.CommandRequestHeaders")
	proto.RegisterType((*CommandResponseHeaders)(nil), "atomix.multiraft.v1.CommandResponseHeaders")
	proto.RegisterType((*QueryRequestHeaders)(nil), "atomix.multiraft.v1.QueryRequestHeaders")
	proto.RegisterType((*QueryResponseHeaders)(nil), "atomix.multiraft.v1.QueryResponseHeaders")
}

func init() { proto.RegisterFile("atomix/multiraft/v1/headers.proto", fileDescriptor_aa41837c4ac4528c) }

var fileDescriptor_aa41837c4ac4528c = []byte{
	// 782 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x95, 0xbf, 0x52, 0xdb, 0x58,
	0x14, 0xc6, 0x2d, 0x83, 0x6d, 0x74, 0x6c, 0xb3, 0xe2, 0x02, 0xc6, 0x4b, 0x61, 0xb1, 0xaa, 0x98,
	0xdd, 0xc5, 0x1e, 0xd8, 0x6d, 0xb6, 0x94, 0x2d, 0x31, 0x68, 0xd0, 0x4a, 0x70, 0x2d, 0xb1, 0x9b,
	0x4c, 0x66, 0x3c, 0x8a, 0xa5, 0x10, 0x4d, 0x90, 0xe5, 0x58, 0x12, 0x43, 0xde, 0x22, 0xcf, 0x90,
	0x2a, 0x45, 0xea, 0xa4, 0x4b, 0x4d, 0x49, 0x91, 0x22, 0x95, 0x27, 0x63, 0xde, 0xc2, 0x55, 0x46,
	0x7f, 0x31, 0xb6, 0x0c, 0x09, 0x05, 0x9d, 0xee, 0xb9, 0xe7, 0x7c, 0xe7, 0xf3, 0xef, 0x9e, 0x7b,
	0x0d, 0xbf, 0x69, 0xae, 0x6d, 0x99, 0x17, 0x0d, 0xcb, 0x3b, 0x73, 0xcd, 0x81, 0xf6, 0xc2, 0x6d,
	0x9c, 0xef, 0x36, 0x5e, 0x1a, 0x9a, 0x6e, 0x0c, 0x9c, 0x7a, 0x7f, 0x60, 0xbb, 0x36, 0x5a, 0x0d,
	0x53, 0xea, 0x49, 0x4a, 0xfd, 0x7c, 0x77, 0x73, 0xed, 0xd4, 0x3e, 0xb5, 0x83, 0xfd, 0x86, 0xff,
	0x15, 0xa6, 0x32, 0xcf, 0x60, 0xe3, 0x48, 0x1b, 0xb8, 0xa6, 0x6b, 0xda, 0x3d, 0x6c, 0xbc, 0xf6,
	0x0c, 0xc7, 0x3d, 0x08, 0xb5, 0x10, 0x0b, 0xa5, 0x7e, 0xbc, 0xd5, 0x31, 0xf5, 0x2a, 0xb1, 0x45,
	0x6c, 0x97, 0x9b, 0xb5, 0xd1, 0x90, 0x2e, 0x26, 0x25, 0x02, 0x37, 0xbe, 0xbd, 0xc4, 0xc5, 0xa4,
	0x46, 0xd0, 0x99, 0x71, 0x16, 0xaa, 0x13, 0xf2, 0x4e, 0xdf, 0xee, 0x39, 0x46, 0xac, 0x4f, 0x43,
	0xce, 0xec, 0xe9, 0xc6, 0x45, 0x20, 0xbc, 0xd8, 0x24, 0xc7, 0x43, 0x3a, 0x27, 0xf8, 0x01, 0x1c,
	0xc6, 0x91, 0x08, 0x79, 0xc7, 0xd5, 0x5c, 0xcf, 0xa9, 0x66, 0xb7, 0x88, 0xed, 0xe5, 0xbd, 0xbf,
	0xeb, 0x29, 0xbf, 0xab, 0x3e, 0x4f, 0xbf, 0xde, 0x0e, 0x6a, 0x71, 0xa4, 0x81, 0xaa, 0x50, 0xb0,
	0x0c, 0xc7, 0xd1, 0x4e, 0x8d, 0xea, 0xc2, 0x16, 0xb1, 0x4d, 0xe2, 0x78, 0xc9, 0x7c, 0x21, 0x20,
	0x1f, 0x26, 0xa3, 0x22, 0x14, 0x54, 0xe9, 0x50, 0x92, 0xff, 0x93, 0xa8, 0x0c, 0xca, 0x43, 0x56,
	0x3e, 0xa4, 0x08, 0x44, 0x42, 0x8e, 0xc7, 0x58, 0xc6, 0x54, 0x16, 0x95, 0x60, 0xa9, 0xc5, 0x4a,
	0x2d, 0x5e, 0xe4, 0x39, 0x6a, 0x01, 0x95, 0x81, 0x94, 0x64, 0xa5, 0xb3, 0x2f, 0xab, 0x12, 0x47,
	0x2d, 0x22, 0x04, 0xcb, 0xac, 0x88, 0x79, 0x96, 0x7b, 0xd2, 0xe1, 0xff, 0x17, 0xda, 0x4a, 0x9b,
	0xca, 0x21, 0x0a, 0x4a, 0xaa, 0xc4, 0xaa, 0xca, 0x81, 0x8c, 0x85, 0xa7, 0x3c, 0x47, 0xe5, 0xfd,
	0xa2, 0x7d, 0x19, 0x37, 0x05, 0x8e, 0xe3, 0x25, 0xaa, 0x10, 0x28, 0xca, 0xd2, 0xbe, 0x28, 0xb4,
	0x14, 0x6a, 0xc9, 0xef, 0x2f, 0x48, 0x27, 0xac, 0x28, 0x70, 0x14, 0x89, 0x7e, 0x81, 0xa2, 0x2a,
	0xb1, 0x27, 0xac, 0x20, 0xb2, 0x4d, 0x91, 0xa7, 0x00, 0xad, 0x40, 0xd9, 0xef, 0xd7, 0x56, 0x8f,
	0x8e, 0x64, 0xac, 0xf0, 0x1c, 0x55, 0xf4, 0x0b, 0x14, 0xe1, 0x5f, 0x5e, 0x56, 0x15, 0xaa, 0xe4,
	0x6b, 0x09, 0x92, 0xc2, 0x63, 0x89, 0x15, 0xa9, 0x32, 0xf3, 0x9e, 0x80, 0xf5, 0xb6, 0xe1, 0x38,
	0xb3, 0x27, 0xab, 0x00, 0x99, 0x9c, 0x52, 0x40, 0xbf, 0xb8, 0xf7, 0xe7, 0x7d, 0x6c, 0x27, 0x05,
	0x9a, 0x4b, 0x97, 0x43, 0x3a, 0x73, 0x35, 0xa4, 0x09, 0x7c, 0x23, 0x84, 0xfe, 0x01, 0x70, 0xc2,
	0x76, 0xfe, 0xb4, 0x64, 0x83, 0x43, 0xdd, 0x1c, 0x0d, 0x69, 0x32, 0x32, 0x11, 0xcc, 0xca, 0xcd,
	0x02, 0x93, 0x51, 0xb6, 0xa0, 0x33, 0x36, 0x54, 0x12, 0xa7, 0xb7, 0x87, 0x44, 0x9d, 0xb5, 0xba,
	0xf3, 0x53, 0x63, 0x90, 0xea, 0x95, 0x79, 0x17, 0xb0, 0x19, 0x9c, 0x9b, 0x5d, 0x63, 0x8a, 0x8d,
	0x04, 0x85, 0xc8, 0x57, 0xd4, 0xee, 0xf7, 0xd4, 0x76, 0xa9, 0x60, 0x27, 0x7a, 0xc5, 0x22, 0x21,
	0x95, 0xa0, 0xd1, 0x0c, 0x95, 0x20, 0x1a, 0x53, 0x89, 0x16, 0x3e, 0x95, 0xf0, 0x53, 0x67, 0x4c,
	0x9f, 0x4a, 0xe4, 0xf1, 0x36, 0x15, 0x79, 0xda, 0xe4, 0x1f, 0x77, 0x9b, 0x9c, 0x47, 0x24, 0x56,
	0x61, 0x3e, 0x10, 0xb0, 0x21, 0xf7, 0x8d, 0x81, 0x96, 0xf2, 0x0e, 0xfc, 0x30, 0x91, 0x14, 0x9c,
	0x69, 0x44, 0x58, 0x28, 0xd9, 0x71, 0xab, 0x98, 0x49, 0xf4, 0xae, 0x24, 0x16, 0xc2, 0x77, 0x65,
	0x62, 0x89, 0x8b, 0x49, 0x8d, 0xa0, 0x33, 0xaf, 0xa0, 0x3a, 0xe1, 0xf6, 0x81, 0x6c, 0xd2, 0xc8,
	0xa6, 0xb1, 0xf9, 0x44, 0xc0, 0x7a, 0xcb, 0xb6, 0x2c, 0xad, 0xa7, 0xcf, 0xde, 0xa3, 0xc4, 0xd5,
	0x9d, 0xf7, 0x68, 0x0e, 0xda, 0xc9, 0xd9, 0x4c, 0x84, 0xd0, 0x01, 0xac, 0x75, 0xc3, 0x76, 0x1d,
	0xc7, 0x4f, 0xef, 0x75, 0x8d, 0x4e, 0xcf, 0xb3, 0xa2, 0xd9, 0xa9, 0x8c, 0x87, 0x34, 0x8a, 0xec,
	0xb4, 0xa3, 0x6d, 0xc9, 0xb3, 0x30, 0xea, 0xce, 0xc4, 0x98, 0x8f, 0x04, 0x54, 0x12, 0xe7, 0x33,
	0xf7, 0x6a, 0xda, 0xfa, 0xce, 0x7d, 0xd6, 0xe7, 0xde, 0xab, 0x1b, 0xef, 0x3c, 0xac, 0xda, 0x9e,
	0xdb, 0xf7, 0xdc, 0x34, 0xeb, 0xeb, 0xe3, 0x21, 0xbd, 0x22, 0x07, 0xdb, 0x93, 0xce, 0x57, 0xec,
	0xe9, 0x10, 0xf3, 0x99, 0x80, 0xd5, 0x63, 0xcf, 0x18, 0xbc, 0x79, 0x14, 0xe0, 0xc7, 0xf0, 0xeb,
	0x99, 0xe6, 0xb8, 0x9d, 0x07, 0x50, 0xaf, 0xf8, 0x85, 0xb3, 0x71, 0xc6, 0x82, 0xb5, 0xc8, 0xff,
	0x63, 0x60, 0x6f, 0x56, 0x2f, 0x47, 0x35, 0xe2, 0x6a, 0x54, 0x23, 0xbe, 0x8d, 0x6a, 0xc4, 0xdb,
	0xeb, 0x5a, 0xe6, 0xea, 0xba, 0x96, 0xf9, 0x7a, 0x5d, 0xcb, 0x3c, 0xcf, 0x07, 0x7f, 0xf3, 0x7f,
	0x7d, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x84, 0x43, 0x1f, 0x9d, 0x36, 0x08, 0x00, 0x00,
}

func (m *PartitionRequestHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionRequestHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionRequestHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PartitionID != 0 {
		i = encodeVarintHeaders(dAtA, i, uint64(m.PartitionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PartitionResponseHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionResponseHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionResponseHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintHeaders(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintHeaders(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Index != 0 {
		i = encodeVarintHeaders(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SessionRequestHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionRequestHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionRequestHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SessionID != 0 {
		i = encodeVarintHeaders(dAtA, i, uint64(m.SessionID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.PartitionRequestHeaders.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHeaders(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SessionResponseHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionResponseHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionResponseHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PartitionResponseHeaders.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHeaders(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ServiceRequestHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceRequestHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceRequestHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServiceID != 0 {
		i = encodeVarintHeaders(dAtA, i, uint64(m.ServiceID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.SessionRequestHeaders.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHeaders(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ServiceResponseHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceResponseHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceResponseHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SessionResponseHeaders.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHeaders(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *OperationRequestHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationRequestHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationRequestHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OperationID != 0 {
		i = encodeVarintHeaders(dAtA, i, uint64(m.OperationID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.ServiceRequestHeaders.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHeaders(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *OperationResponseHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationResponseHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationResponseHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ServiceResponseHeaders.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHeaders(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CommandRequestHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandRequestHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommandRequestHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CommandSequenceNum != 0 {
		i = encodeVarintHeaders(dAtA, i, uint64(m.CommandSequenceNum))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.OperationRequestHeaders.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHeaders(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CommandResponseHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandResponseHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommandResponseHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutputSequenceNum != 0 {
		i = encodeVarintHeaders(dAtA, i, uint64(m.OutputSequenceNum))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.OperationResponseHeaders.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHeaders(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRequestHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequestHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRequestHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastCommandSequenceNum != 0 {
		i = encodeVarintHeaders(dAtA, i, uint64(m.LastCommandSequenceNum))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.OperationRequestHeaders.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHeaders(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryResponseHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResponseHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResponseHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OperationResponseHeaders.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHeaders(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintHeaders(dAtA []byte, offset int, v uint64) int {
	offset -= sovHeaders(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PartitionRequestHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartitionID != 0 {
		n += 1 + sovHeaders(uint64(m.PartitionID))
	}
	return n
}

func (m *PartitionResponseHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovHeaders(uint64(m.Index))
	}
	if m.Status != 0 {
		n += 1 + sovHeaders(uint64(m.Status))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovHeaders(uint64(l))
	}
	return n
}

func (m *SessionRequestHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PartitionRequestHeaders.Size()
	n += 1 + l + sovHeaders(uint64(l))
	if m.SessionID != 0 {
		n += 1 + sovHeaders(uint64(m.SessionID))
	}
	return n
}

func (m *SessionResponseHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PartitionResponseHeaders.Size()
	n += 1 + l + sovHeaders(uint64(l))
	return n
}

func (m *ServiceRequestHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SessionRequestHeaders.Size()
	n += 1 + l + sovHeaders(uint64(l))
	if m.ServiceID != 0 {
		n += 1 + sovHeaders(uint64(m.ServiceID))
	}
	return n
}

func (m *ServiceResponseHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SessionResponseHeaders.Size()
	n += 1 + l + sovHeaders(uint64(l))
	return n
}

func (m *OperationRequestHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ServiceRequestHeaders.Size()
	n += 1 + l + sovHeaders(uint64(l))
	if m.OperationID != 0 {
		n += 1 + sovHeaders(uint64(m.OperationID))
	}
	return n
}

func (m *OperationResponseHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ServiceResponseHeaders.Size()
	n += 1 + l + sovHeaders(uint64(l))
	return n
}

func (m *CommandRequestHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OperationRequestHeaders.Size()
	n += 1 + l + sovHeaders(uint64(l))
	if m.CommandSequenceNum != 0 {
		n += 1 + sovHeaders(uint64(m.CommandSequenceNum))
	}
	return n
}

func (m *CommandResponseHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OperationResponseHeaders.Size()
	n += 1 + l + sovHeaders(uint64(l))
	if m.OutputSequenceNum != 0 {
		n += 1 + sovHeaders(uint64(m.OutputSequenceNum))
	}
	return n
}

func (m *QueryRequestHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OperationRequestHeaders.Size()
	n += 1 + l + sovHeaders(uint64(l))
	if m.LastCommandSequenceNum != 0 {
		n += 1 + sovHeaders(uint64(m.LastCommandSequenceNum))
	}
	return n
}

func (m *QueryResponseHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OperationResponseHeaders.Size()
	n += 1 + l + sovHeaders(uint64(l))
	return n
}

func sovHeaders(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHeaders(x uint64) (n int) {
	return sovHeaders(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PartitionRequestHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeaders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionRequestHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionRequestHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionID", wireType)
			}
			m.PartitionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionID |= PartitionID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeaders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeaders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionResponseHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeaders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionResponseHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionResponseHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= PartitionResponseHeaders_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeaders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeaders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeaders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeaders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionRequestHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeaders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionRequestHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionRequestHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionRequestHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeaders
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeaders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PartitionRequestHeaders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			m.SessionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionID |= SessionID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeaders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeaders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionResponseHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeaders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionResponseHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionResponseHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionResponseHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeaders
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeaders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PartitionResponseHeaders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeaders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeaders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceRequestHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeaders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceRequestHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceRequestHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionRequestHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeaders
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeaders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SessionRequestHeaders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceID", wireType)
			}
			m.ServiceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceID |= ServiceID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeaders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeaders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceResponseHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeaders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceResponseHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceResponseHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionResponseHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeaders
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeaders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SessionResponseHeaders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeaders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeaders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationRequestHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeaders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationRequestHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationRequestHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceRequestHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeaders
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeaders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ServiceRequestHeaders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationID", wireType)
			}
			m.OperationID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperationID |= OperationID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeaders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeaders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationResponseHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeaders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationResponseHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationResponseHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceResponseHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeaders
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeaders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ServiceResponseHeaders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeaders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeaders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandRequestHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeaders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandRequestHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandRequestHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationRequestHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeaders
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeaders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OperationRequestHeaders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandSequenceNum", wireType)
			}
			m.CommandSequenceNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommandSequenceNum |= CommandSequenceNum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeaders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeaders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandResponseHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeaders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandResponseHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandResponseHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationResponseHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeaders
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeaders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OperationResponseHeaders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputSequenceNum", wireType)
			}
			m.OutputSequenceNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputSequenceNum |= OutputSequenceNum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeaders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeaders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRequestHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeaders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequestHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequestHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationRequestHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeaders
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeaders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OperationRequestHeaders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCommandSequenceNum", wireType)
			}
			m.LastCommandSequenceNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastCommandSequenceNum |= CommandSequenceNum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeaders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeaders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResponseHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeaders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResponseHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResponseHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationResponseHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeaders
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeaders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OperationResponseHeaders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeaders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeaders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHeaders(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHeaders
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHeaders
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHeaders
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHeaders
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHeaders        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHeaders          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHeaders = fmt.Errorf("proto: unexpected end of group")
)
