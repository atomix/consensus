/*
SPDX-FileCopyrightText: 2022-present Open Networking Foundation <info@opennetworking.org>

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package atomix.multiraft.v1;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "gogoproto/gogo.proto";

message CommandInput {
    google.protobuf.Timestamp timestamp = 1 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false
    ];
    oneof input {
        OpenSessionInput open_session = 2;
        KeepAliveInput keep_alive = 3;
        CloseSessionInput close_session = 4;
        SessionCommandInput session_command = 5;
    }
}

message CommandOutput {
    uint64 index = 1 [
        (gogoproto.casttype) = "Index"
    ];
    oneof output {
        OpenSessionOutput open_session = 2;
        KeepAliveOutput keep_alive = 3;
        CloseSessionOutput close_session = 4;
        SessionCommandOutput session_command = 5;
    }
}

message OpenSessionInput {
    google.protobuf.Duration timeout = 1 [
        (gogoproto.stdduration) = true,
        (gogoproto.nullable) = false
    ];
}

message OpenSessionOutput {
    uint64 session_id = 1 [
        (gogoproto.customname) = "SessionID",
        (gogoproto.casttype) = "SessionID"
    ];
}

message KeepAliveInput {
    uint64 session_id = 1 [
        (gogoproto.customname) = "SessionID",
        (gogoproto.casttype) = "SessionID"
    ];
    bytes input_filter = 2;
    uint64 last_input_sequence_num = 3 [
        (gogoproto.casttype) = "SequenceNum"
    ];
    map<uint64, uint64> last_output_sequence_nums = 4 [
        (gogoproto.castkey) = "SequenceNum",
        (gogoproto.castvalue) = "SequenceNum"
    ];
}

message KeepAliveOutput {

}

message CloseSessionInput {
    uint64 session_id = 1 [
        (gogoproto.customname) = "SessionID",
        (gogoproto.casttype) = "SessionID"
    ];
}

message CloseSessionOutput {

}

message SessionCommandInput {
    uint64 session_id = 1 [
        (gogoproto.customname) = "SessionID",
        (gogoproto.casttype) = "SessionID"
    ];
    uint64 sequence_num = 2 [
        (gogoproto.casttype) = "SequenceNum"
    ];
    oneof input {
        CreatePrimitiveInput create_primitive = 3;
        ClosePrimitiveInput close_primitive = 4;
        PrimitiveOperationInput operation = 5;
    }
}

message SessionCommandOutput {
    uint64 sequence_num = 1 [
        (gogoproto.casttype) = "SequenceNum"
    ];
    oneof output {
        CreatePrimitiveOutput create_primitive = 2;
        ClosePrimitiveOutput close_primitive = 3;
        PrimitiveOperationOutput operation = 4;
    }
}

message CreatePrimitiveInput {
    PrimitiveSpec spec = 1 [
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message CreatePrimitiveOutput {
    uint64 primitive_id = 1 [
        (gogoproto.customname) = "PrimitiveID",
        (gogoproto.casttype) = "PrimitiveID"
    ];
}

message ClosePrimitiveInput {
    uint64 primitive_id = 1 [
        (gogoproto.customname) = "PrimitiveID",
        (gogoproto.casttype) = "PrimitiveID"
    ];
}

message ClosePrimitiveOutput {

}

message PartitionQueryInput {
    uint32 partition_id = 1 [
        (gogoproto.customname) = "PartitionID",
        (gogoproto.casttype) = "PartitionID"
    ];
    QueryInput query = 2 [
        (gogoproto.nullable) = false
    ];
    bool sync = 3;
}

message PartitionQueryOutput {
    QueryOutput query = 1 [
        (gogoproto.nullable) = false
    ];
}

message QueryInput {
    uint64 max_received_index = 1 [
        (gogoproto.casttype) = "Index"
    ];
    oneof input {
        SessionQueryInput session_query = 2;
    }
}

message QueryOutput {
    uint64 index = 1 [
        (gogoproto.casttype) = "Index"
    ];
    oneof output {
        SessionQueryOutput session_query = 2;
    }
}

message SessionQueryInput {
    uint64 session_id = 1 [
        (gogoproto.customname) = "SessionID",
        (gogoproto.casttype) = "SessionID"
    ];
    oneof input {
        PrimitiveOperationInput operation = 2;
    }
}

message SessionQueryOutput {
    oneof output {
        PrimitiveOperationOutput operation = 1;
    }
}

message PrimitiveOperationInput {
    uint64 primitive_id = 1 [
        (gogoproto.customname) = "PrimitiveID",
        (gogoproto.casttype) = "PrimitiveID"
    ];
    OperationInput input = 2 [
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message PrimitiveOperationOutput {
    OperationOutput output = 1 [
        (gogoproto.nullable) = false,
        (gogoproto.embed) = true
    ];
}

message OperationInput {
    bytes payload = 1;
}

message OperationOutput {
    Status status = 1;
    bytes payload = 2;
    string message = 3;

    enum Status {
        UNKNOWN = 0;
        OK = 1;
        ERROR = 2;
        CANCELED = 3;
        NOT_FOUND = 4;
        ALREADY_EXISTS = 5;
        UNAUTHORIZED = 6;
        FORBIDDEN = 7;
        CONFLICT = 8;
        INVALID = 9;
        UNAVAILABLE = 10;
        NOT_SUPPORTED = 11;
        TIMEOUT = 12;
        FAULT = 13;
        INTERNAL = 14;
    }
}

message Snapshot {
    uint64 index = 1 [(gogoproto.casttype) = "Index"];
    google.protobuf.Timestamp timestamp = 2 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false
    ];
}

message PrimitiveSnapshot {
    uint64 primitive_id = 1 [
        (gogoproto.customname) = "PrimitiveID",
        (gogoproto.casttype) = "PrimitiveID"
    ];
    PrimitiveSpec spec = 2 [
        (gogoproto.nullable) = false
    ];
}

message PrimitiveSessionSnapshot {
    uint64 session_id = 1 [
        (gogoproto.customname) = "SessionID",
        (gogoproto.casttype) = "SessionID"
    ];
    repeated uint64 commands = 2 [
        (gogoproto.casttype) = "Index"
    ];
}

message PrimitiveType {
    string name = 1;
    string api_version = 2;
}

message PrimitiveSpec {
    PrimitiveType type = 1 [
        (gogoproto.nullable) = false
    ];
    string namespace = 2;
    string name = 3;
}

message SessionSnapshot {
    uint64 session_id = 1 [
        (gogoproto.customname) = "SessionID",
        (gogoproto.casttype) = "SessionID"
    ];
    google.protobuf.Duration timeout = 2 [
        (gogoproto.stdduration) = true,
        (gogoproto.nullable) = false
    ];
    google.protobuf.Timestamp last_updated = 3 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false
    ];
    repeated CommandSnapshot commands = 4;
}

message CommandSnapshot {
    uint64 index = 1 [
        (gogoproto.casttype) = "Index"
    ];
    State state = 2;
    SessionCommandInput input = 3;
    repeated SessionCommandOutput pending_outputs = 4;

    enum State {
        UNKNOWN = 0;
        OPEN = 1;
        COMPLETE = 2;
    }
}
